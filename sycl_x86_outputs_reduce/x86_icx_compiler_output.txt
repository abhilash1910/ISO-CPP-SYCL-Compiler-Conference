__cxx_global_var_init:                  # 
        push    rbp
        mov     rbp, rsp
        movabs  rdi, offset std::__ioinit
        call    std::ios_base::Init::Init() [complete object constructor]
        movabs  rdi, offset std::ios_base::Init::~Init() [complete object destructor]
        movabs  rsi, offset std::__ioinit
        movabs  rdx, offset __dso_handle
        call    __cxa_atexit
        pop     rbp
        ret
block_reduce_kernel(cl::sycl::accessor<int, 1, (cl::sycl::access::mode)1026, (cl::sycl::access::target)2014, (cl::sycl::access::placeholder)0, cl::sycl::ext::oneapi::accessor_property_list<> >, cl::sycl::nd_item<3> const&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 304
        mov     qword ptr [rbp - 208], rdi      # 8-byte Spill
        mov     qword ptr [rbp - 56], rsi
        mov     rax, qword ptr [rbp - 56]
        mov     qword ptr [rbp - 32], rax
        mov     dword ptr [rbp - 36], 2
        mov     rcx, qword ptr [rbp - 32]
        add     rcx, 72
        mov     eax, dword ptr [rbp - 36]
        mov     qword ptr [rbp - 8], rcx
        mov     dword ptr [rbp - 12], eax
        mov     rdi, qword ptr [rbp - 8]
        add     rdi, 24
        mov     esi, dword ptr [rbp - 12]
        call    cl::sycl::detail::array<3>::operator[](int) const
        mov     qword ptr [rbp - 24], rax
        mov     rax, qword ptr [rbp - 24]
        mov     qword ptr [rbp - 48], rax
        mov     rax, qword ptr [rbp - 48]
        mov     dword ptr [rbp - 60], eax
        movsxd  rsi, dword ptr [rbp - 60]
        lea     rdi, [rbp - 72]
        call    cl::sycl::id<1>::id<1>(std::enable_if<(1)==(1), unsigned long>::type)
        mov     rdi, qword ptr [rbp - 208]      # 8-byte Reload
        mov     rsi, qword ptr [rbp - 72]
        call    int& cl::sycl::accessor<int, 1, (cl::sycl::access::mode)1026, (cl::sycl::access::target)2014, (cl::sycl::access::placeholder)0, cl::sycl::ext::oneapi::accessor_property_list<> >::operator[]<1, void>(cl::sycl::id<1>) const
        mov     eax, dword ptr [rax]
        mov     dword ptr [rbp - 64], eax
        mov     dword ptr [rbp - 76], 0
        mov     rsi, qword ptr [rbp - 56]
        lea     rdi, [rbp - 176]
        call    cl::sycl::nd_item<3>::get_group() const
        mov     edi, dword ptr [rbp - 64]
        movups  xmm0, xmmword ptr [rbp - 96]
        mov     rax, rsp
        movups  xmmword ptr [rax + 80], xmm0
        movups  xmm0, xmmword ptr [rbp - 112]
        movups  xmmword ptr [rax + 64], xmm0
        movups  xmm0, xmmword ptr [rbp - 176]
        movups  xmm1, xmmword ptr [rbp - 160]
        movups  xmm2, xmmword ptr [rbp - 144]
        movups  xmm3, xmmword ptr [rbp - 128]
        movups  xmmword ptr [rax + 48], xmm3
        movups  xmmword ptr [rax + 32], xmm2
        movups  xmmword ptr [rax + 16], xmm1
        movups  xmmword ptr [rax], xmm0
        call    std::enable_if<((is_group_v<std::decay<cl::sycl::group<3> >::type>)&&detail::is_scalar_arithmetic<int>::value)&&detail::is_native_op<int, std::plus<void> >::value, int>::type cl::sycl::reduce_over_group<cl::sycl::group<3>, int, std::plus<void> >(cl::sycl::group<3>, int, std::plus<void>)
        mov     dword ptr [rbp - 76], eax
        mov     eax, dword ptr [rbp - 76]
        mov     dword ptr [rbp - 196], eax      # 4-byte Spill
        movsxd  rsi, dword ptr [rbp - 60]
        lea     rdi, [rbp - 192]
        call    cl::sycl::id<1>::id<1>(std::enable_if<(1)==(1), unsigned long>::type)
        mov     rdi, qword ptr [rbp - 208]      # 8-byte Reload
        mov     rsi, qword ptr [rbp - 192]
        call    int& cl::sycl::accessor<int, 1, (cl::sycl::access::mode)1026, (cl::sycl::access::target)2014, (cl::sycl::access::placeholder)0, cl::sycl::ext::oneapi::accessor_property_list<> >::operator[]<1, void>(cl::sycl::id<1>) const
        mov     ecx, dword ptr [rbp - 196]      # 4-byte Reload
        mov     dword ptr [rax], ecx
        add     rsp, 304
        pop     rbp
        ret
int& cl::sycl::accessor<int, 1, (cl::sycl::access::mode)1026, (cl::sycl::access::target)2014, (cl::sycl::access::placeholder)0, cl::sycl::ext::oneapi::accessor_property_list<> >::operator[]<1, void>(cl::sycl::id<1>) const: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        mov     qword ptr [rbp - 8], rsi
        mov     qword ptr [rbp - 16], rdi
        mov     rdi, qword ptr [rbp - 16]
        mov     qword ptr [rbp - 40], rdi       # 8-byte Spill
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 32], rax
        mov     rsi, qword ptr [rbp - 32]
        call    unsigned long cl::sycl::accessor<int, 1, (cl::sycl::access::mode)1026, (cl::sycl::access::target)2014, (cl::sycl::access::placeholder)0, cl::sycl::ext::oneapi::accessor_property_list<> >::getLinearIndex<1>(cl::sycl::id<1>) const
        mov     rdi, qword ptr [rbp - 40]       # 8-byte Reload
        mov     qword ptr [rbp - 24], rax
        call    cl::sycl::accessor<int, 1, (cl::sycl::access::mode)1026, (cl::sycl::access::target)2014, (cl::sycl::access::placeholder)0, cl::sycl::ext::oneapi::accessor_property_list<> >::getQualifiedPtr() const
        mov     rcx, qword ptr [rbp - 24]
        shl     rcx, 2
        add     rax, rcx
        add     rsp, 48
        pop     rbp
        ret
cl::sycl::id<1>::id<1>(std::enable_if<(1)==(1), unsigned long>::type): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     rsi, qword ptr [rbp - 16]
        call    cl::sycl::detail::array<1>::array<1>(std::enable_if<(1)==(1), unsigned long>::type)
        add     rsp, 16
        pop     rbp
        ret
std::enable_if<((is_group_v<std::decay<cl::sycl::group<3> >::type>)&&detail::is_scalar_arithmetic<int>::value)&&detail::is_native_op<int, std::plus<void> >::value, int>::type cl::sycl::reduce_over_group<cl::sycl::group<3>, int, std::plus<void> >(cl::sycl::group<3>, int, std::plus<void>): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        mov     dword ptr [rbp - 12], edi
        mov     edi, 64
        call    __cxa_allocate_exception
        mov     rdi, rax
        mov     rax, rdi
        mov     qword ptr [rbp - 40], rax       # 8-byte Spill
        mov     esi, offset .L.str.10
        mov     edx, -33
        call    cl::sycl::runtime_error::runtime_error(char const*, int) [base object constructor]
        jmp     .LBB4_1
.LBB4_1:
        mov     rdi, qword ptr [rbp - 40]       # 8-byte Reload
        movabs  rsi, offset typeinfo for cl::sycl::runtime_error
        movabs  rdx, offset cl::sycl::runtime_error::~runtime_error() [base object destructor]
        call    __cxa_throw
        mov     rdi, qword ptr [rbp - 40]       # 8-byte Reload
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 24], rcx
        mov     dword ptr [rbp - 28], eax
        call    __cxa_free_exception
        mov     rdi, qword ptr [rbp - 24]
        call    _Unwind_Resume@PLT
cl::sycl::nd_item<3>::get_group() const: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     rax, rdi
        mov     qword ptr [rbp - 16], rax       # 8-byte Spill
        mov     qword ptr [rbp - 8], rsi
        mov     rsi, qword ptr [rbp - 8]
        add     rsi, 120
        mov     edx, 96
        call    memcpy@PLT
        mov     rax, qword ptr [rbp - 16]       # 8-byte Reload
        add     rsp, 16
        pop     rbp
        ret
call_command_queue(int*):               # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 416
        mov     qword ptr [rbp - 8], rdi
        lea     rdi, [rbp - 16]
        mov     qword ptr [rbp - 328], rdi      # 8-byte Spill
        call    cl::sycl::default_selector::default_selector() [base object constructor]
        lea     rdi, [rbp - 64]
        call    cl::sycl::property_list::property_list<, void>()
        jmp     .LBB6_1
.LBB6_1:
        mov     rsi, qword ptr [rbp - 328]      # 8-byte Reload
        lea     rdi, [rbp - 32]
        lea     rdx, [rbp - 64]
        call    cl::sycl::queue::queue(cl::sycl::device_selector const&, cl::sycl::property_list const&) [base object constructor]
        jmp     .LBB6_2
.LBB6_2:
        lea     rdi, [rbp - 64]
        call    cl::sycl::property_list::~property_list() [base object destructor]
        mov     edi, offset std::cout
        mov     esi, offset .L.str
        call    std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)
        mov     qword ptr [rbp - 336], rax      # 8-byte Spill
        jmp     .LBB6_3
.LBB6_3:
        lea     rdi, [rbp - 128]
        lea     rsi, [rbp - 32]
        call    cl::sycl::queue::get_device() const
        jmp     .LBB6_4
.LBB6_4:
        lea     rdi, [rbp - 112]
        lea     rsi, [rbp - 128]
        call    cl::sycl::info::param_traits<cl::sycl::info::device, (cl::sycl::info::device)4139>::return_type cl::sycl::device::get_info<(cl::sycl::info::device)4139>() const
        jmp     .LBB6_5
.LBB6_5:
        mov     rdi, qword ptr [rbp - 336]      # 8-byte Reload
        lea     rsi, [rbp - 112]
        call    std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
        mov     qword ptr [rbp - 344], rax      # 8-byte Spill
        jmp     .LBB6_6
.LBB6_6:
        mov     rdi, qword ptr [rbp - 344]      # 8-byte Reload
        mov     esi, offset .L.str.1
        call    std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)
        jmp     .LBB6_7
.LBB6_7:
        lea     rdi, [rbp - 112]
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() [complete object destructor]
        lea     rdi, [rbp - 128]
        call    cl::sycl::device::~device() [base object destructor]
        lea     rdi, [rbp - 144]
        lea     rsi, [rbp - 32]
        call    cl::sycl::queue::get_context() const
        jmp     .LBB6_8
.LBB6_8:
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 352], rax      # 8-byte Spill
        lea     rdi, [rbp - 192]
        mov     esi, 512
        call    cl::sycl::range<1>::range<1>(std::enable_if<(1)==(1), unsigned long>::type)
        jmp     .LBB6_9
.LBB6_9:
        lea     rdi, [rbp - 224]
        call    cl::sycl::property_list::property_list<, void>()
        jmp     .LBB6_10
.LBB6_10:
        mov     esi, offset .L.str.2
        mov     edx, offset .L.str.3
        lea     rdi, [rbp - 256]
        mov     ecx, 37
        mov     r8d, 30
        call    cl::sycl::detail::code_location::current(char const*, char const*, unsigned long, unsigned long)
        mov     rsi, qword ptr [rbp - 352]      # 8-byte Reload
        movups  xmm0, xmmword ptr [rbp - 256]
        movups  xmm1, xmmword ptr [rbp - 240]
        mov     rax, rsp
        movups  xmmword ptr [rax + 16], xmm1
        movups  xmmword ptr [rax], xmm0
        lea     rdi, [rbp - 184]
        lea     rdx, [rbp - 192]
        lea     rcx, [rbp - 224]
        call    cl::sycl::buffer<int, 1, cl::sycl::detail::aligned_allocator<char>, void>::buffer(int*, cl::sycl::range<1> const&, cl::sycl::property_list const&, cl::sycl::detail::code_location) [base object constructor]
        jmp     .LBB6_11
.LBB6_11:
        lea     rdi, [rbp - 224]
        call    cl::sycl::property_list::~property_list() [base object destructor]
        lea     rax, [rbp - 184]
        mov     qword ptr [rbp - 280], rax
        mov     esi, offset .L.str.2
        mov     edx, offset .L.str.3
        lea     rdi, [rbp - 312]
        mov     qword ptr [rbp - 360], rdi      # 8-byte Spill
        mov     ecx, 40
        mov     r8d, 5
        call    cl::sycl::detail::code_location::current(char const*, char const*, unsigned long, unsigned long)
        mov     rcx, qword ptr [rbp - 360]      # 8-byte Reload
        mov     rdx, qword ptr [rbp - 280]
        lea     rdi, [rbp - 272]
        lea     rsi, [rbp - 32]
        call    cl::sycl::event cl::sycl::queue::submit<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}, cl::sycl::detail::code_location const&)
        jmp     .LBB6_12
.LBB6_12:
        lea     rdi, [rbp - 272]
        call    cl::sycl::event::wait()
        jmp     .LBB6_13
.LBB6_13:
        lea     rdi, [rbp - 272]
        call    cl::sycl::event::~event() [base object destructor]
        mov     edi, offset std::cout
        mov     esi, offset .L.str.4
        call    std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)
        mov     qword ptr [rbp - 368], rax      # 8-byte Spill
        jmp     .LBB6_14
.LBB6_14:
        mov     rdi, qword ptr [rbp - 368]      # 8-byte Reload
        mov     esi, offset std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)
        call    std::basic_ostream<char, std::char_traits<char> >::operator<<(std::basic_ostream<char, std::char_traits<char> >& (*)(std::basic_ostream<char, std::char_traits<char> >&))
        jmp     .LBB6_15
.LBB6_15:
        mov     qword ptr [rbp - 320], 0
.LBB6_16:                               # =>This Inner Loop Header: Depth=1
        cmp     qword ptr [rbp - 320], 512
        jae     .LBB6_31
        mov     rax, qword ptr [rbp - 8]
        mov     rcx, qword ptr [rbp - 320]
        mov     esi, dword ptr [rax + 4*rcx]
        mov     edi, offset std::cout
        call    std::basic_ostream<char, std::char_traits<char> >::operator<<(int)
        mov     qword ptr [rbp - 376], rax      # 8-byte Spill
        jmp     .LBB6_18
.LBB6_18:                               #   in Loop: Header=BB6_16 Depth=1
        mov     rdi, qword ptr [rbp - 376]      # 8-byte Reload
        mov     esi, offset std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)
        call    std::basic_ostream<char, std::char_traits<char> >::operator<<(std::basic_ostream<char, std::char_traits<char> >& (*)(std::basic_ostream<char, std::char_traits<char> >&))
        jmp     .LBB6_19
.LBB6_19:                               #   in Loop: Header=BB6_16 Depth=1
        jmp     .LBB6_20
.LBB6_20:                               #   in Loop: Header=BB6_16 Depth=1
        mov     rax, qword ptr [rbp - 320]
        add     rax, 1
        mov     qword ptr [rbp - 320], rax
        jmp     .LBB6_16
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 72], rcx
        mov     dword ptr [rbp - 76], eax
        jmp     .LBB6_35
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 72], rcx
        mov     dword ptr [rbp - 76], eax
        lea     rdi, [rbp - 64]
        call    cl::sycl::property_list::~property_list() [base object destructor]
        jmp     .LBB6_35
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 72], rcx
        mov     dword ptr [rbp - 76], eax
        jmp     .LBB6_34
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 72], rcx
        mov     dword ptr [rbp - 76], eax
        jmp     .LBB6_26
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 72], rcx
        mov     dword ptr [rbp - 76], eax
        lea     rdi, [rbp - 112]
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() [complete object destructor]
.LBB6_26:
        lea     rdi, [rbp - 128]
        call    cl::sycl::device::~device() [base object destructor]
        jmp     .LBB6_34
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 72], rcx
        mov     dword ptr [rbp - 76], eax
        jmp     .LBB6_33
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 72], rcx
        mov     dword ptr [rbp - 76], eax
        lea     rdi, [rbp - 224]
        call    cl::sycl::property_list::~property_list() [base object destructor]
        jmp     .LBB6_33
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 72], rcx
        mov     dword ptr [rbp - 76], eax
        jmp     .LBB6_32
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 72], rcx
        mov     dword ptr [rbp - 76], eax
        lea     rdi, [rbp - 272]
        call    cl::sycl::event::~event() [base object destructor]
        jmp     .LBB6_32
.LBB6_31:
        lea     rdi, [rbp - 184]
        call    cl::sycl::buffer<int, 1, cl::sycl::detail::aligned_allocator<char>, void>::~buffer() [base object destructor]
        lea     rdi, [rbp - 144]
        call    cl::sycl::context::~context() [base object destructor]
        lea     rdi, [rbp - 32]
        call    cl::sycl::queue::~queue() [base object destructor]
        lea     rdi, [rbp - 16]
        call    cl::sycl::default_selector::~default_selector() [base object destructor]
        add     rsp, 416
        pop     rbp
        ret
.LBB6_32:
        lea     rdi, [rbp - 184]
        call    cl::sycl::buffer<int, 1, cl::sycl::detail::aligned_allocator<char>, void>::~buffer() [base object destructor]
.LBB6_33:
        lea     rdi, [rbp - 144]
        call    cl::sycl::context::~context() [base object destructor]
.LBB6_34:
        lea     rdi, [rbp - 32]
        call    cl::sycl::queue::~queue() [base object destructor]
.LBB6_35:
        lea     rdi, [rbp - 16]
        call    cl::sycl::default_selector::~default_selector() [base object destructor]
        mov     rdi, qword ptr [rbp - 72]
        call    _Unwind_Resume@PLT
cl::sycl::default_selector::default_selector() [base object constructor]:      # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 16], rdi       # 8-byte Spill
        call    cl::sycl::device_selector::device_selector() [base object constructor]
        mov     rax, qword ptr [rbp - 16]       # 8-byte Reload
        movabs  rcx, offset vtable for cl::sycl::default_selector
        add     rcx, 16
        mov     qword ptr [rax], rcx
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::property_list::property_list<, void>(): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 40], rax       # 8-byte Spill
        xor     eax, eax
        mov     esi, eax
        lea     rdi, [rbp - 16]
        call    std::bitset<32ul>::bitset(unsigned long long) [base object constructor]
        mov     rdi, qword ptr [rbp - 40]       # 8-byte Reload
        mov     rsi, qword ptr [rbp - 16]
        call    cl::sycl::detail::PropertyListBase::PropertyListBase(std::bitset<32ul>) [base object constructor]
        mov     rdi, qword ptr [rbp - 40]       # 8-byte Reload
        call    cl::sycl::detail::PropertyListBase::ctorHelper()
        jmp     .LBB8_1
.LBB8_1:
        add     rsp, 48
        pop     rbp
        ret
        mov     rdi, qword ptr [rbp - 40]       # 8-byte Reload
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 24], rcx
        mov     dword ptr [rbp - 28], eax
        call    cl::sycl::detail::PropertyListBase::~PropertyListBase() [base object destructor]
        mov     rdi, qword ptr [rbp - 24]
        call    _Unwind_Resume@PLT
cl::sycl::queue::queue(cl::sycl::device_selector const&, cl::sycl::property_list const&) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 112
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 112], rax      # 8-byte Spill
        mov     rsi, qword ptr [rbp - 16]
        mov     rax, qword ptr [rsi]
        mov     rax, qword ptr [rax + 16]
        lea     rdi, [rbp - 40]
        mov     qword ptr [rbp - 104], rdi      # 8-byte Spill
        call    rax
        lea     rdi, [rbp - 72]
        mov     qword ptr [rbp - 96], rdi       # 8-byte Spill
        call    std::function<void (cl::sycl::exception_list)>::function() [base object constructor]
        mov     rdi, qword ptr [rbp - 112]      # 8-byte Reload
        mov     rsi, qword ptr [rbp - 104]      # 8-byte Reload
        mov     rdx, qword ptr [rbp - 96]       # 8-byte Reload
        mov     rcx, qword ptr [rbp - 24]
        call    cl::sycl::queue::queue(cl::sycl::device const&, std::function<void (cl::sycl::exception_list)> const&, cl::sycl::property_list const&) [base object constructor]
        jmp     .LBB9_1
.LBB9_1:
        lea     rdi, [rbp - 72]
        call    std::function<void (cl::sycl::exception_list)>::~function() [base object destructor]
        lea     rdi, [rbp - 40]
        call    cl::sycl::device::~device() [base object destructor]
        add     rsp, 112
        pop     rbp
        ret
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 80], rcx
        mov     dword ptr [rbp - 84], eax
        lea     rdi, [rbp - 72]
        call    std::function<void (cl::sycl::exception_list)>::~function() [base object destructor]
        lea     rdi, [rbp - 40]
        call    cl::sycl::device::~device() [base object destructor]
        mov     rdi, qword ptr [rbp - 80]
        call    _Unwind_Resume@PLT
cl::sycl::property_list::~property_list() [base object destructor]:         # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    cl::sycl::detail::PropertyListBase::~PropertyListBase() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::device::~device() [base object destructor]:                 # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::shared_ptr<cl::sycl::detail::device_impl>::~shared_ptr() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::range<1>::range<1>(std::enable_if<(1)==(1), unsigned long>::type): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     rsi, qword ptr [rbp - 16]
        call    cl::sycl::detail::array<1>::array<1>(std::enable_if<(1)==(1), unsigned long>::type)
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::detail::code_location::current(char const*, char const*, unsigned long, unsigned long): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        mov     rax, rdi
        mov     qword ptr [rbp - 40], rax       # 8-byte Spill
        mov     qword ptr [rbp - 8], rsi
        mov     qword ptr [rbp - 16], rdx
        mov     qword ptr [rbp - 24], rcx
        mov     qword ptr [rbp - 32], r8
        mov     rsi, qword ptr [rbp - 8]
        mov     rdx, qword ptr [rbp - 16]
        mov     rax, qword ptr [rbp - 24]
        mov     ecx, eax
        mov     rax, qword ptr [rbp - 32]
        mov     r8d, eax
        call    cl::sycl::detail::code_location::code_location(char const*, char const*, int, int) [base object constructor]
        mov     rax, qword ptr [rbp - 40]       # 8-byte Reload
        add     rsp, 48
        pop     rbp
        ret
cl::sycl::buffer<int, 1, cl::sycl::detail::aligned_allocator<char>, void>::buffer(int*, cl::sycl::range<1> const&, cl::sycl::property_list const&, cl::sycl::detail::code_location) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 208
        lea     rax, [rbp + 16]
        mov     qword ptr [rbp - 144], rax      # 8-byte Spill
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        mov     qword ptr [rbp - 32], rcx
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 128], rdi      # 8-byte Spill
        mov     rax, rdi
        mov     qword ptr [rbp - 136], rax      # 8-byte Spill
        call    std::shared_ptr<cl::sycl::detail::buffer_impl>::shared_ptr() [base object constructor]
        mov     rdi, qword ptr [rbp - 128]      # 8-byte Reload
        mov     rax, qword ptr [rbp - 24]
        mov     rax, qword ptr [rax]
        mov     qword ptr [rdi + 16], rax
        mov     qword ptr [rdi + 24], 0
        mov     byte ptr [rdi + 32], 0
        call    cl::sycl::buffer<int, 1, cl::sycl::detail::aligned_allocator<char>, void>::size() const
        shl     rax, 2
        mov     qword ptr [rbp - 56], rax
        mov     edi, 4
        call    cl::sycl::detail::getNextPowerOfTwo(unsigned long)
        mov     qword ptr [rbp - 120], rax      # 8-byte Spill
        jmp     .LBB14_1
.LBB14_1:
        mov     rax, qword ptr [rbp - 120]      # 8-byte Reload
        mov     qword ptr [rbp - 64], rax
        mov     rax, qword ptr [rbp - 32]
        mov     qword ptr [rbp - 152], rax      # 8-byte Spill
        lea     rdi, [rbp - 88]
        call    std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > > cl::sycl::make_unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >>()
        jmp     .LBB14_2
.LBB14_2:
        mov     r8, qword ptr [rbp - 152]       # 8-byte Reload
        lea     rdi, [rbp - 48]
        lea     rsi, [rbp - 16]
        lea     rdx, [rbp - 56]
        lea     rcx, [rbp - 64]
        lea     r9, [rbp - 88]
        call    std::shared_ptr<cl::sycl::detail::buffer_impl> std::make_shared<cl::sycl::detail::buffer_impl, int*&, unsigned long, unsigned long, cl::sycl::property_list const&, std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > > >(int*&, unsigned long&&, unsigned long&&, cl::sycl::property_list const&, std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >&&)
        jmp     .LBB14_3
.LBB14_3:
        mov     rdi, qword ptr [rbp - 136]      # 8-byte Reload
        lea     rsi, [rbp - 48]
        mov     qword ptr [rbp - 192], rsi      # 8-byte Spill
        call    std::shared_ptr<cl::sycl::detail::buffer_impl>::operator=(std::shared_ptr<cl::sycl::detail::buffer_impl>&&)
        mov     rdi, qword ptr [rbp - 192]      # 8-byte Reload
        call    std::shared_ptr<cl::sycl::detail::buffer_impl>::~shared_ptr() [base object destructor]
        lea     rdi, [rbp - 88]
        call    std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >::~unique_ptr() [base object destructor]
        mov     rdi, qword ptr [rbp - 136]      # 8-byte Reload
        call    std::__shared_ptr_access<cl::sycl::detail::buffer_impl, (__gnu_cxx::_Lock_policy)2, false, false>::operator->() const
        mov     rdi, qword ptr [rbp - 136]      # 8-byte Reload
        mov     qword ptr [rbp - 184], rax      # 8-byte Spill
        call    std::__shared_ptr<cl::sycl::detail::buffer_impl, (__gnu_cxx::_Lock_policy)2>::get() const
        mov     qword ptr [rbp - 176], rax      # 8-byte Spill
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rbp - 168], rax      # 8-byte Spill
        mov     edi, offset typeinfo for int
        call    std::type_info::name() const
        mov     rsi, qword ptr [rbp - 136]      # 8-byte Reload
        mov     qword ptr [rbp - 160], rax      # 8-byte Spill
        mov     rdx, rsi
        add     rdx, 16
        lea     rdi, [rbp - 112]
        call    cl::sycl::buffer<int, 1, cl::sycl::detail::aligned_allocator<char>, void>::rangeToArray(cl::sycl::range<1>&)
        jmp     .LBB14_4
.LBB14_4:
        lea     rdi, [rbp - 112]
        call    std::array<unsigned long, 3ul>::data()
        mov     rdi, qword ptr [rbp - 184]      # 8-byte Reload
        mov     rsi, qword ptr [rbp - 144]      # 8-byte Reload
        mov     rdx, qword ptr [rbp - 176]      # 8-byte Reload
        mov     rcx, qword ptr [rbp - 168]      # 8-byte Reload
        mov     r8, qword ptr [rbp - 160]       # 8-byte Reload
        mov     r9, rax
        mov     rax, rsp
        mov     qword ptr [rax + 8], r9
        mov     dword ptr [rax], 4
        mov     r9d, 1
        call    cl::sycl::detail::buffer_impl::constructorNotification(cl::sycl::detail::code_location const&, void*, void const*, void const*, unsigned int, unsigned int, unsigned long*)
        jmp     .LBB14_5
.LBB14_5:
        add     rsp, 208
        pop     rbp
        ret
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 72], rcx
        mov     dword ptr [rbp - 76], eax
        jmp     .LBB14_8
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 72], rcx
        mov     dword ptr [rbp - 76], eax
        lea     rdi, [rbp - 88]
        call    std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >::~unique_ptr() [base object destructor]
.LBB14_8:
        mov     rdi, qword ptr [rbp - 128]      # 8-byte Reload
        call    std::shared_ptr<cl::sycl::detail::buffer_impl>::~shared_ptr() [base object destructor]
        mov     rdi, qword ptr [rbp - 72]
        call    _Unwind_Resume@PLT
cl::sycl::event cl::sycl::queue::submit<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}, cl::sycl::detail::code_location const&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 144
        mov     qword ptr [rbp - 136], rdi      # 8-byte Spill
        mov     rax, rdi
        mov     qword ptr [rbp - 128], rax      # 8-byte Spill
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rdx
        mov     qword ptr [rbp - 24], rsi
        mov     qword ptr [rbp - 32], rcx
        mov     rax, qword ptr [rbp - 24]
        mov     qword ptr [rbp - 120], rax      # 8-byte Spill
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rbp - 88], rax
        mov     rsi, qword ptr [rbp - 88]
        lea     rdi, [rbp - 80]
        mov     qword ptr [rbp - 112], rdi      # 8-byte Spill
        call    std::function<void (cl::sycl::handler&)>::function<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}, void, void>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1})
        mov     rsi, qword ptr [rbp - 120]      # 8-byte Reload
        mov     rdx, qword ptr [rbp - 112]      # 8-byte Reload
        mov     rcx, qword ptr [rbp - 32]
        lea     rdi, [rbp - 48]
        call    cl::sycl::queue::submit_impl(std::function<void (cl::sycl::handler&)>, cl::sycl::detail::code_location const&)
        jmp     .LBB15_1
.LBB15_1:
        lea     rdi, [rbp - 80]
        call    std::function<void (cl::sycl::handler&)>::~function() [base object destructor]
        mov     rdi, qword ptr [rbp - 136]      # 8-byte Reload
        mov     rsi, qword ptr [rbp - 120]      # 8-byte Reload
        lea     rdx, [rbp - 48]
        call    cl::sycl::queue::discard_or_return(cl::sycl::event const&)
        jmp     .LBB15_2
.LBB15_2:
        lea     rdi, [rbp - 48]
        call    cl::sycl::event::~event() [base object destructor]
        mov     rax, qword ptr [rbp - 128]      # 8-byte Reload
        add     rsp, 144
        pop     rbp
        ret
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 96], rcx
        mov     dword ptr [rbp - 100], eax
        lea     rdi, [rbp - 80]
        call    std::function<void (cl::sycl::handler&)>::~function() [base object destructor]
        jmp     .LBB15_5
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 96], rcx
        mov     dword ptr [rbp - 100], eax
        lea     rdi, [rbp - 48]
        call    cl::sycl::event::~event() [base object destructor]
.LBB15_5:
        mov     rdi, qword ptr [rbp - 96]
        call    _Unwind_Resume@PLT
cl::sycl::event::~event() [base object destructor]:                  # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::shared_ptr<cl::sycl::detail::event_impl>::~shared_ptr() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::buffer<int, 1, cl::sycl::detail::aligned_allocator<char>, void>::~buffer() [base object destructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::shared_ptr<cl::sycl::detail::buffer_impl>::~shared_ptr() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::context::~context() [base object destructor]:                # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::shared_ptr<cl::sycl::detail::context_impl>::~shared_ptr() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::queue::~queue() [base object destructor]:                  # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::shared_ptr<cl::sycl::detail::queue_impl>::~shared_ptr() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::default_selector::~default_selector() [base object destructor]:      # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    cl::sycl::device_selector::~device_selector() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
main:                                   # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 2080
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 2068], 0
.LBB21_1:                               # =>This Inner Loop Header: Depth=1
        cmp     dword ptr [rbp - 2068], 128
        jge     .LBB21_4
        mov     ecx, dword ptr [rbp - 2068]
        mov     eax, dword ptr [rbp - 2068]
        shl     eax, 2
        add     eax, 0
        cdqe
        mov     dword ptr [rbp + 4*rax - 2064], ecx
        mov     ecx, dword ptr [rbp - 2068]
        add     ecx, 128
        mov     eax, dword ptr [rbp - 2068]
        shl     eax, 2
        add     eax, 1
        cdqe
        mov     dword ptr [rbp + 4*rax - 2064], ecx
        mov     ecx, dword ptr [rbp - 2068]
        add     ecx, 256
        mov     eax, dword ptr [rbp - 2068]
        shl     eax, 2
        add     eax, 2
        cdqe
        mov     dword ptr [rbp + 4*rax - 2064], ecx
        mov     ecx, dword ptr [rbp - 2068]
        add     ecx, 384
        mov     eax, dword ptr [rbp - 2068]
        shl     eax, 2
        add     eax, 3
        cdqe
        mov     dword ptr [rbp + 4*rax - 2064], ecx
        mov     eax, dword ptr [rbp - 2068]
        add     eax, 1
        mov     dword ptr [rbp - 2068], eax
        jmp     .LBB21_1
.LBB21_4:
        lea     rdi, [rbp - 2064]
        call    call_command_queue(int*)
        mov     eax, dword ptr [rbp - 4]
        add     rsp, 2080
        pop     rbp
        ret
cl::sycl::device_selector::device_selector() [base object constructor]:       # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        movabs  rcx, offset vtable for cl::sycl::device_selector
        add     rcx, 16
        mov     qword ptr [rax], rcx
        pop     rbp
        ret
std::function<void (cl::sycl::exception_list)>::function() [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::_Function_base::_Function_base() [base object constructor]
        jmp     .LBB23_1
.LBB23_1:
        add     rsp, 16
        pop     rbp
        ret
        mov     rdi, rax
        call    __clang_call_terminate
std::function<void (cl::sycl::exception_list)>::~function() [base object destructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::_Function_base::~_Function_base() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
std::_Function_base::_Function_base() [base object constructor]:              # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rax + 16], 0
        pop     rbp
        ret
__clang_call_terminate:                 # 
        push    rax
        call    __cxa_begin_catch
        call    std::terminate()
        .intel_syntax noprefix
std::_Function_base::~_Function_base() [base object destructor]:              # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 16], rax       # 8-byte Spill
        cmp     qword ptr [rax + 16], 0
        je      .LBB27_3
        mov     rsi, qword ptr [rbp - 16]       # 8-byte Reload
        mov     rax, qword ptr [rsi + 16]
        mov     edx, 3
        mov     rdi, rsi
        call    rax
        jmp     .LBB27_2
.LBB27_2:
        jmp     .LBB27_3
.LBB27_3:
        add     rsp, 16
        pop     rbp
        ret
        mov     rdi, rax
        call    __clang_call_terminate
cl::sycl::detail::PropertyListBase::~PropertyListBase() [base object destructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        add     rdi, 8
        call    std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::~vector() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::~vector() [base object destructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 48], rdi       # 8-byte Spill
        mov     rax, qword ptr [rdi]
        mov     qword ptr [rbp - 40], rax       # 8-byte Spill
        mov     rax, qword ptr [rdi + 8]
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        call    std::_Vector_base<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::_M_get_Tp_allocator()
        mov     rdi, qword ptr [rbp - 40]       # 8-byte Reload
        mov     rsi, qword ptr [rbp - 32]       # 8-byte Reload
        mov     rdx, rax
        call    void std::_Destroy<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>*, std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> >(std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>*, std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>*, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> >&)
        jmp     .LBB29_1
.LBB29_1:
        mov     rdi, qword ptr [rbp - 48]       # 8-byte Reload
        call    std::_Vector_base<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::~_Vector_base() [base object destructor]
        add     rsp, 48
        pop     rbp
        ret
        mov     rdi, qword ptr [rbp - 48]       # 8-byte Reload
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 16], rcx
        mov     dword ptr [rbp - 20], eax
        call    std::_Vector_base<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::~_Vector_base() [base object destructor]
        mov     rdi, qword ptr [rbp - 16]
        call    __clang_call_terminate
void std::_Destroy<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>*, std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> >(std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>*, std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>*, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> >&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        mov     rdi, qword ptr [rbp - 8]
        mov     rsi, qword ptr [rbp - 16]
        call    void std::_Destroy<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>*>(std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>*, std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>*)
        add     rsp, 32
        pop     rbp
        ret
std::_Vector_base<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::_M_get_Tp_allocator(): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
std::_Vector_base<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::~_Vector_base() [base object destructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 32], rdi       # 8-byte Spill
        mov     rsi, qword ptr [rdi]
        mov     rdx, qword ptr [rdi + 16]
        sub     rdx, rsi
        sar     rdx, 4
        call    std::_Vector_base<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::_M_deallocate(std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>*, unsigned long)
        jmp     .LBB32_1
.LBB32_1:
        mov     rdi, qword ptr [rbp - 32]       # 8-byte Reload
        call    std::_Vector_base<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::_Vector_impl::~_Vector_impl() [base object destructor]
        add     rsp, 32
        pop     rbp
        ret
        mov     rdi, qword ptr [rbp - 32]       # 8-byte Reload
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 16], rcx
        mov     dword ptr [rbp - 20], eax
        call    std::_Vector_base<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::_Vector_impl::~_Vector_impl() [base object destructor]
        mov     rdi, qword ptr [rbp - 16]
        call    __clang_call_terminate
void std::_Destroy<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>*>(std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>*, std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>*): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     rsi, qword ptr [rbp - 16]
        call    void std::_Destroy_aux<false>::__destroy<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>*>(std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>*, std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>*)
        add     rsp, 16
        pop     rbp
        ret
void std::_Destroy_aux<false>::__destroy<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>*>(std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>*, std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>*): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
.LBB34_1:                               # =>This Inner Loop Header: Depth=1
        mov     rax, qword ptr [rbp - 8]
        cmp     rax, qword ptr [rbp - 16]
        je      .LBB34_4
        mov     rdi, qword ptr [rbp - 8]
        call    std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>* std::__addressof<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> >(std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>&)
        mov     rdi, rax
        call    void std::_Destroy<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> >(std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>*)
        mov     rax, qword ptr [rbp - 8]
        add     rax, 16
        mov     qword ptr [rbp - 8], rax
        jmp     .LBB34_1
.LBB34_4:
        add     rsp, 16
        pop     rbp
        ret
void std::_Destroy<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> >(std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>*): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>::~shared_ptr() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>* std::__addressof<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> >(std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>::~shared_ptr() [base object destructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::__shared_ptr<cl::sycl::detail::PropertyWithDataBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
std::__shared_ptr<cl::sycl::detail::PropertyWithDataBase, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() [base object destructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        add     rdi, 8
        call    std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count() [base object destructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 16], rax       # 8-byte Spill
        cmp     qword ptr [rax], 0
        je      .LBB39_2
        mov     rax, qword ptr [rbp - 16]       # 8-byte Reload
        mov     rdi, qword ptr [rax]
        call    std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()
.LBB39_2:
        add     rsp, 16
        pop     rbp
        ret
std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release(): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 144
        mov     qword ptr [rbp - 120], rdi
        mov     rax, qword ptr [rbp - 120]
        mov     qword ptr [rbp - 128], rax      # 8-byte Spill
        add     rax, 8
        mov     qword ptr [rbp - 104], rax
        mov     dword ptr [rbp - 108], -1
        call    __gthread_active_p()
        cmp     eax, 0
        je      .LBB40_2
        mov     rcx, qword ptr [rbp - 104]
        mov     eax, dword ptr [rbp - 108]
        mov     qword ptr [rbp - 80], rcx
        mov     dword ptr [rbp - 84], eax
        mov     rcx, qword ptr [rbp - 80]
        mov     eax, dword ptr [rbp - 84]
        mov     dword ptr [rbp - 88], eax
        mov     eax, dword ptr [rbp - 88]
        lock            xadd    dword ptr [rcx], eax
        mov     dword ptr [rbp - 92], eax
        mov     eax, dword ptr [rbp - 92]
        mov     dword ptr [rbp - 96], eax
        jmp     .LBB40_3
.LBB40_2:
        mov     rcx, qword ptr [rbp - 104]
        mov     eax, dword ptr [rbp - 108]
        mov     qword ptr [rbp - 64], rcx
        mov     dword ptr [rbp - 68], eax
        mov     rax, qword ptr [rbp - 64]
        mov     eax, dword ptr [rax]
        mov     dword ptr [rbp - 72], eax
        mov     ecx, dword ptr [rbp - 68]
        mov     rax, qword ptr [rbp - 64]
        add     ecx, dword ptr [rax]
        mov     dword ptr [rax], ecx
        mov     eax, dword ptr [rbp - 72]
        mov     dword ptr [rbp - 96], eax
.LBB40_3:
        mov     eax, dword ptr [rbp - 96]
        mov     dword ptr [rbp - 132], eax      # 4-byte Spill
        mov     eax, dword ptr [rbp - 132]      # 4-byte Reload
        cmp     eax, 1
        jne     .LBB40_12
        mov     rdi, qword ptr [rbp - 128]      # 8-byte Reload
        mov     rax, qword ptr [rdi]
        call    qword ptr [rax + 16]
        mov     rax, qword ptr [rbp - 128]      # 8-byte Reload
        add     rax, 12
        mov     qword ptr [rbp - 48], rax
        mov     dword ptr [rbp - 52], -1
        call    __gthread_active_p()
        cmp     eax, 0
        je      .LBB40_7
        mov     rcx, qword ptr [rbp - 48]
        mov     eax, dword ptr [rbp - 52]
        mov     qword ptr [rbp - 24], rcx
        mov     dword ptr [rbp - 28], eax
        mov     rcx, qword ptr [rbp - 24]
        mov     eax, dword ptr [rbp - 28]
        mov     dword ptr [rbp - 32], eax
        mov     eax, dword ptr [rbp - 32]
        lock            xadd    dword ptr [rcx], eax
        mov     dword ptr [rbp - 36], eax
        mov     eax, dword ptr [rbp - 36]
        mov     dword ptr [rbp - 40], eax
        jmp     .LBB40_8
.LBB40_7:
        mov     rcx, qword ptr [rbp - 48]
        mov     eax, dword ptr [rbp - 52]
        mov     qword ptr [rbp - 8], rcx
        mov     dword ptr [rbp - 12], eax
        mov     rax, qword ptr [rbp - 8]
        mov     eax, dword ptr [rax]
        mov     dword ptr [rbp - 16], eax
        mov     ecx, dword ptr [rbp - 12]
        mov     rax, qword ptr [rbp - 8]
        add     ecx, dword ptr [rax]
        mov     dword ptr [rax], ecx
        mov     eax, dword ptr [rbp - 16]
        mov     dword ptr [rbp - 40], eax
.LBB40_8:
        mov     eax, dword ptr [rbp - 40]
        mov     dword ptr [rbp - 136], eax      # 4-byte Spill
        mov     eax, dword ptr [rbp - 136]      # 4-byte Reload
        cmp     eax, 1
        jne     .LBB40_11
        mov     rdi, qword ptr [rbp - 128]      # 8-byte Reload
        mov     rax, qword ptr [rdi]
        call    qword ptr [rax + 24]
.LBB40_11:
        jmp     .LBB40_12
.LBB40_12:
        add     rsp, 144
        pop     rbp
        ret
__gthread_active_p():               # 
        push    rbp
        mov     rbp, rsp
        mov     eax, offset __pthread_key_create
        test    rax, rax
        setne   al
        movzx   eax, al
        pop     rbp
        ret
std::_Vector_base<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::_M_deallocate(std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>*, unsigned long): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        cmp     qword ptr [rbp - 16], 0
        je      .LBB42_2
        mov     rdi, qword ptr [rbp - 32]       # 8-byte Reload
        mov     rsi, qword ptr [rbp - 16]
        mov     rdx, qword ptr [rbp - 24]
        call    std::allocator_traits<std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::deallocate(std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> >&, std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>*, unsigned long)
.LBB42_2:
        add     rsp, 32
        pop     rbp
        ret
std::_Vector_base<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::_Vector_impl::~_Vector_impl() [base object destructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> >::~allocator() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
std::allocator_traits<std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::deallocate(std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> >&, std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>*, unsigned long): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        mov     rdi, qword ptr [rbp - 8]
        mov     rsi, qword ptr [rbp - 16]
        mov     rdx, qword ptr [rbp - 24]
        call    __gnu_cxx::new_allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> >::deallocate(std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>*, unsigned long)
        add     rsp, 32
        pop     rbp
        ret
__gnu_cxx::new_allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> >::deallocate(std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>*, unsigned long): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        mov     rdi, qword ptr [rbp - 16]
        call    operator delete(void*)
        add     rsp, 32
        pop     rbp
        ret
__gnu_cxx::new_allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> >::~new_allocator() [base object destructor]: # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        pop     rbp
        ret
std::shared_ptr<cl::sycl::detail::device_impl>::~shared_ptr() [base object destructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::__shared_ptr<cl::sycl::detail::device_impl, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
std::__shared_ptr<cl::sycl::detail::device_impl, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() [base object destructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        add     rdi, 8
        call    std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::detail::code_location::code_location(char const*, char const*, int, int) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        mov     dword ptr [rbp - 28], ecx
        mov     dword ptr [rbp - 32], r8d
        mov     rax, qword ptr [rbp - 8]
        mov     rcx, qword ptr [rbp - 16]
        mov     qword ptr [rax], rcx
        mov     rcx, qword ptr [rbp - 24]
        mov     qword ptr [rax + 8], rcx
        movsxd  rcx, dword ptr [rbp - 28]
        mov     qword ptr [rax + 16], rcx
        movsxd  rcx, dword ptr [rbp - 32]
        mov     qword ptr [rax + 24], rcx
        pop     rbp
        ret
std::shared_ptr<cl::sycl::detail::event_impl>::~shared_ptr() [base object destructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::__shared_ptr<cl::sycl::detail::event_impl, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
std::__shared_ptr<cl::sycl::detail::event_impl, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() [base object destructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        add     rdi, 8
        call    std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
std::shared_ptr<cl::sycl::detail::buffer_impl>::~shared_ptr() [base object destructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::__shared_ptr<cl::sycl::detail::buffer_impl, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
std::shared_ptr<cl::sycl::detail::context_impl>::~shared_ptr() [base object destructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::__shared_ptr<cl::sycl::detail::context_impl, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
std::__shared_ptr<cl::sycl::detail::context_impl, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() [base object destructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        add     rdi, 8
        call    std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
std::shared_ptr<cl::sycl::detail::queue_impl>::~shared_ptr() [base object destructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::__shared_ptr<cl::sycl::detail::queue_impl, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
std::__shared_ptr<cl::sycl::detail::queue_impl, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() [base object destructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        add     rdi, 8
        call    std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::device_selector::~device_selector() [base object destructor]:       # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        pop     rbp
        ret
cl::sycl::detail::array<1>::array<1>(std::enable_if<(1)==(1), unsigned long>::type): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rax, qword ptr [rbp - 8]
        mov     rcx, qword ptr [rbp - 16]
        mov     qword ptr [rax], rcx
        pop     rbp
        ret
cl::sycl::detail::array<3>::operator[](int) const:    # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 64
        mov     qword ptr [rbp - 40], rdi
        mov     dword ptr [rbp - 44], esi
        mov     rcx, qword ptr [rbp - 40]
        mov     qword ptr [rbp - 56], rcx       # 8-byte Spill
        mov     eax, dword ptr [rbp - 44]
        mov     qword ptr [rbp - 8], rcx
        mov     dword ptr [rbp - 12], eax
        cmp     dword ptr [rbp - 12], 3
        jge     .LBB59_2
        cmp     dword ptr [rbp - 12], 0
        jge     .LBB59_5
.LBB59_2:
        mov     edi, 64
        call    __cxa_allocate_exception
        mov     rdi, rax
        mov     rax, rdi
        mov     qword ptr [rbp - 64], rax       # 8-byte Spill
        mov     esi, offset .L.str.5
        mov     edx, -30
        call    cl::sycl::invalid_parameter_error::invalid_parameter_error(char const*, int) [base object constructor]
        jmp     .LBB59_3
.LBB59_3:
        mov     rdi, qword ptr [rbp - 64]       # 8-byte Reload
        movabs  rsi, offset typeinfo for cl::sycl::invalid_parameter_error
        movabs  rdx, offset cl::sycl::invalid_parameter_error::~invalid_parameter_error() [base object destructor]
        call    __cxa_throw
        mov     rdi, qword ptr [rbp - 64]       # 8-byte Reload
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 24], rcx
        mov     dword ptr [rbp - 28], eax
        call    __cxa_free_exception
        mov     rdi, qword ptr [rbp - 24]
        call    _Unwind_Resume@PLT
.LBB59_5:
        mov     rax, qword ptr [rbp - 56]       # 8-byte Reload
        movsxd  rcx, dword ptr [rbp - 44]
        mov     rax, qword ptr [rax + 8*rcx]
        add     rsp, 64
        pop     rbp
        ret
cl::sycl::invalid_parameter_error::invalid_parameter_error(char const*, int) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 112
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     dword ptr [rbp - 20], edx
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 104], rax      # 8-byte Spill
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rbp - 96], rax       # 8-byte Spill
        lea     rdi, [rbp - 64]
        mov     qword ptr [rbp - 88], rdi       # 8-byte Spill
        call    std::allocator<char>::allocator() [complete object constructor]
        mov     rsi, qword ptr [rbp - 96]       # 8-byte Reload
        mov     rdx, qword ptr [rbp - 88]       # 8-byte Reload
        lea     rdi, [rbp - 56]
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&)
        jmp     .LBB60_1
.LBB60_1:
        mov     rdi, qword ptr [rbp - 104]      # 8-byte Reload
        mov     edx, dword ptr [rbp - 20]
        lea     rsi, [rbp - 56]
        call    cl::sycl::invalid_parameter_error::invalid_parameter_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int) [base object constructor]
        jmp     .LBB60_2
.LBB60_2:
        lea     rdi, [rbp - 56]
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() [complete object destructor]
        lea     rdi, [rbp - 64]
        call    std::allocator<char>::~allocator() [complete object destructor]
        add     rsp, 112
        pop     rbp
        ret
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 72], rcx
        mov     dword ptr [rbp - 76], eax
        jmp     .LBB60_5
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 72], rcx
        mov     dword ptr [rbp - 76], eax
        lea     rdi, [rbp - 56]
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() [complete object destructor]
.LBB60_5:
        lea     rdi, [rbp - 64]
        call    std::allocator<char>::~allocator() [complete object destructor]
        mov     rdi, qword ptr [rbp - 72]
        call    _Unwind_Resume@PLT
cl::sycl::invalid_parameter_error::~invalid_parameter_error() [base object destructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    cl::sycl::runtime_error::~runtime_error() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 80
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 56], rdi       # 8-byte Spill
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data()
        mov     rdi, qword ptr [rbp - 56]       # 8-byte Reload
        mov     rsi, rax
        mov     rdx, qword ptr [rbp - 24]
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char> const&) [complete object constructor]
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rbp - 48], rax       # 8-byte Spill
        cmp     qword ptr [rbp - 16], 0
        je      .LBB62_3
        mov     rdi, qword ptr [rbp - 16]
        mov     qword ptr [rbp - 72], rdi       # 8-byte Spill
        call    std::char_traits<char>::length(char const*)
        mov     qword ptr [rbp - 64], rax       # 8-byte Spill
        jmp     .LBB62_2
.LBB62_2:
        mov     rcx, qword ptr [rbp - 64]       # 8-byte Reload
        mov     rax, qword ptr [rbp - 72]       # 8-byte Reload
        add     rax, rcx
        mov     qword ptr [rbp - 80], rax       # 8-byte Spill
        jmp     .LBB62_4
.LBB62_3:
        mov     rax, qword ptr [rbp - 16]
        add     rax, -1
        mov     qword ptr [rbp - 80], rax       # 8-byte Spill
.LBB62_4:
        mov     rsi, qword ptr [rbp - 48]       # 8-byte Reload
        mov     rdi, qword ptr [rbp - 56]       # 8-byte Reload
        mov     rdx, qword ptr [rbp - 80]       # 8-byte Reload
        call    void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*)
        jmp     .LBB62_5
.LBB62_5:
        add     rsp, 80
        pop     rbp
        ret
        mov     rdi, qword ptr [rbp - 56]       # 8-byte Reload
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 32], rcx
        mov     dword ptr [rbp - 36], eax
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::~_Alloc_hider() [base object destructor]
        mov     rdi, qword ptr [rbp - 32]
        call    _Unwind_Resume@PLT
cl::sycl::invalid_parameter_error::invalid_parameter_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 64
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     dword ptr [rbp - 20], edx
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 48], rax       # 8-byte Spill
        mov     qword ptr [rbp - 56], rax       # 8-byte Spill
        mov     edi, 6
        call    cl::sycl::make_error_code(cl::sycl::errc)
        mov     rdi, qword ptr [rbp - 56]       # 8-byte Reload
        mov     dword ptr [rbp - 40], eax
        mov     qword ptr [rbp - 32], rdx
        mov     rcx, qword ptr [rbp - 16]
        mov     r8d, dword ptr [rbp - 20]
        mov     esi, dword ptr [rbp - 40]
        mov     rdx, qword ptr [rbp - 32]
        call    cl::sycl::runtime_error::runtime_error(std::error_code, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int) [base object constructor]
        mov     rax, qword ptr [rbp - 48]       # 8-byte Reload
        movabs  rcx, offset vtable for cl::sycl::invalid_parameter_error
        add     rcx, 16
        mov     qword ptr [rax], rcx
        add     rsp, 64
        pop     rbp
        ret
void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        mov     rdi, qword ptr [rbp - 8]
        mov     rsi, qword ptr [rbp - 16]
        mov     rdx, qword ptr [rbp - 24]
        call    void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char const*>(char const*, char const*, std::__false_type)
        add     rsp, 32
        pop     rbp
        ret
std::char_traits<char>::length(char const*):       # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 24], rdi
        mov     rax, qword ptr [rbp - 24]
        mov     qword ptr [rbp - 8], rax
        xor     eax, eax
        test    al, 1
        jne     .LBB65_1
        jmp     .LBB65_2
.LBB65_1:
        mov     rdi, qword ptr [rbp - 24]
        call    __gnu_cxx::char_traits<char>::length(char const*)
        mov     qword ptr [rbp - 16], rax
        jmp     .LBB65_3
.LBB65_2:
        mov     rdi, qword ptr [rbp - 24]
        call    strlen
        mov     qword ptr [rbp - 16], rax
.LBB65_3:
        mov     rax, qword ptr [rbp - 16]
        add     rsp, 32
        pop     rbp
        ret
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::~_Alloc_hider() [base object destructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::allocator<char>::~allocator() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char const*>(char const*, char const*, std::__false_type): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        mov     qword ptr [rbp - 16], rdi
        mov     qword ptr [rbp - 24], rsi
        mov     qword ptr [rbp - 32], rdx
        mov     rdi, qword ptr [rbp - 16]
        mov     rsi, qword ptr [rbp - 24]
        mov     rdx, qword ptr [rbp - 32]
        call    void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)
        add     rsp, 48
        pop     rbp
        ret
void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 80
        mov     qword ptr [rbp - 16], rdi
        mov     qword ptr [rbp - 24], rsi
        mov     qword ptr [rbp - 32], rdx
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rbp - 64], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 24]
        call    bool __gnu_cxx::__is_null_pointer<char const>(char const*)
        test    al, 1
        jne     .LBB68_1
        jmp     .LBB68_3
.LBB68_1:
        mov     rax, qword ptr [rbp - 24]
        cmp     rax, qword ptr [rbp - 32]
        je      .LBB68_3
        movabs  rdi, offset .L.str.6
        call    std::__throw_logic_error(char const*)
.LBB68_3:
        mov     rdi, qword ptr [rbp - 24]
        mov     rsi, qword ptr [rbp - 32]
        call    std::iterator_traits<char const*>::difference_type std::distance<char const*>(char const*, char const*)
        mov     qword ptr [rbp - 40], rax
        cmp     qword ptr [rbp - 40], 15
        jbe     .LBB68_5
        mov     rdi, qword ptr [rbp - 64]       # 8-byte Reload
        lea     rsi, [rbp - 40]
        xor     eax, eax
        mov     edx, eax
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)
        mov     rdi, qword ptr [rbp - 64]       # 8-byte Reload
        mov     rsi, rax
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data(char*)
        mov     rdi, qword ptr [rbp - 64]       # 8-byte Reload
        mov     rsi, qword ptr [rbp - 40]
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_capacity(unsigned long)
.LBB68_5:
        mov     rdi, qword ptr [rbp - 64]       # 8-byte Reload
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const
        mov     qword ptr [rbp - 72], rax       # 8-byte Spill
        jmp     .LBB68_6
.LBB68_6:
        mov     rdi, qword ptr [rbp - 72]       # 8-byte Reload
        mov     rsi, qword ptr [rbp - 24]
        mov     rdx, qword ptr [rbp - 32]
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char const*, char const*)
        jmp     .LBB68_12
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 48], rcx
        mov     dword ptr [rbp - 52], eax
        mov     rdi, qword ptr [rbp - 48]
        call    __cxa_begin_catch
        mov     rdi, qword ptr [rbp - 64]       # 8-byte Reload
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()
        jmp     .LBB68_9
.LBB68_9:
        call    __cxa_rethrow
        jmp     .LBB68_15
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 48], rcx
        mov     dword ptr [rbp - 52], eax
        call    __cxa_end_catch
        jmp     .LBB68_11
.LBB68_11:
        jmp     .LBB68_13
.LBB68_12:
        mov     rdi, qword ptr [rbp - 64]       # 8-byte Reload
        mov     rsi, qword ptr [rbp - 40]
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long)
        add     rsp, 80
        pop     rbp
        ret
.LBB68_13:
        mov     rdi, qword ptr [rbp - 48]
        call    _Unwind_Resume@PLT
        mov     rdi, rax
        call    __clang_call_terminate
.LBB68_15:
bool __gnu_cxx::__is_null_pointer<char const>(char const*): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        cmp     qword ptr [rbp - 8], 0
        sete    al
        and     al, 1
        movzx   eax, al
        pop     rbp
        ret
std::iterator_traits<char const*>::difference_type std::distance<char const*>(char const*, char const*): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 48], rax       # 8-byte Spill
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rbp - 40], rax       # 8-byte Spill
        lea     rdi, [rbp - 8]
        call    std::iterator_traits<char const*>::iterator_category std::__iterator_category<char const*>(char const* const&)
        mov     rdi, qword ptr [rbp - 48]       # 8-byte Reload
        mov     rsi, qword ptr [rbp - 40]       # 8-byte Reload
        call    std::iterator_traits<char const*>::difference_type std::__distance<char const*>(char const*, char const*, std::random_access_iterator_tag)
        add     rsp, 48
        pop     rbp
        ret
std::iterator_traits<char const*>::difference_type std::__distance<char const*>(char const*, char const*, std::random_access_iterator_tag): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 16], rdi
        mov     qword ptr [rbp - 24], rsi
        mov     rax, qword ptr [rbp - 24]
        mov     rcx, qword ptr [rbp - 16]
        sub     rax, rcx
        pop     rbp
        ret
std::iterator_traits<char const*>::iterator_category std::__iterator_category<char const*>(char const* const&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        pop     rbp
        ret
__gnu_cxx::char_traits<char>::length(char const*): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], 0
.LBB73_1:                               # =>This Inner Loop Header: Depth=1
        mov     rdi, qword ptr [rbp - 8]
        add     rdi, qword ptr [rbp - 16]
        mov     byte ptr [rbp - 17], 0
        lea     rsi, [rbp - 17]
        call    __gnu_cxx::char_traits<char>::eq(char const&, char const&)
        xor     al, -1
        test    al, 1
        jne     .LBB73_2
        jmp     .LBB73_3
.LBB73_2:                               #   in Loop: Header=BB73_1 Depth=1
        mov     rax, qword ptr [rbp - 16]
        add     rax, 1
        mov     qword ptr [rbp - 16], rax
        jmp     .LBB73_1
.LBB73_3:
        mov     rax, qword ptr [rbp - 16]
        add     rsp, 32
        pop     rbp
        ret
__gnu_cxx::char_traits<char>::eq(char const&, char const&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rax, qword ptr [rbp - 8]
        movsx   eax, byte ptr [rax]
        mov     rcx, qword ptr [rbp - 16]
        movsx   ecx, byte ptr [rcx]
        cmp     eax, ecx
        sete    al
        and     al, 1
        movzx   eax, al
        pop     rbp
        ret
cl::sycl::runtime_error::runtime_error(std::error_code, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 128
        mov     dword ptr [rbp - 16], esi
        mov     qword ptr [rbp - 8], rdx
        mov     qword ptr [rbp - 24], rdi
        mov     qword ptr [rbp - 32], rcx
        mov     dword ptr [rbp - 36], r8d
        mov     rax, qword ptr [rbp - 24]
        mov     qword ptr [rbp - 128], rax      # 8-byte Spill
        movups  xmm0, xmmword ptr [rbp - 16]
        movaps  xmmword ptr [rbp - 64], xmm0
        mov     rax, qword ptr [rbp - 32]
        mov     qword ptr [rbp - 120], rax      # 8-byte Spill
        mov     eax, dword ptr [rbp - 36]
        mov     dword ptr [rbp - 108], eax      # 4-byte Spill
        xor     eax, eax
        mov     esi, eax
        lea     rdi, [rbp - 80]
        mov     qword ptr [rbp - 104], rdi      # 8-byte Spill
        call    std::shared_ptr<cl::sycl::context>::shared_ptr(decltype(nullptr)) [base object constructor]
        mov     rdi, qword ptr [rbp - 128]      # 8-byte Reload
        mov     rcx, qword ptr [rbp - 120]      # 8-byte Reload
        mov     r8d, dword ptr [rbp - 108]      # 4-byte Reload
        mov     r9, qword ptr [rbp - 104]       # 8-byte Reload
        mov     esi, dword ptr [rbp - 64]
        mov     rdx, qword ptr [rbp - 56]
        call    cl::sycl::exception::exception(std::error_code, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, std::shared_ptr<cl::sycl::context>) [base object constructor]
        jmp     .LBB75_1
.LBB75_1:
        lea     rdi, [rbp - 80]
        call    std::shared_ptr<cl::sycl::context>::~shared_ptr() [base object destructor]
        mov     rax, qword ptr [rbp - 128]      # 8-byte Reload
        movabs  rcx, offset vtable for cl::sycl::runtime_error
        add     rcx, 16
        mov     qword ptr [rax], rcx
        add     rsp, 128
        pop     rbp
        ret
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 88], rcx
        mov     dword ptr [rbp - 92], eax
        lea     rdi, [rbp - 80]
        call    std::shared_ptr<cl::sycl::context>::~shared_ptr() [base object destructor]
        mov     rdi, qword ptr [rbp - 88]
        call    _Unwind_Resume@PLT
cl::sycl::invalid_parameter_error::~invalid_parameter_error() [deleting destructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 16], rdi       # 8-byte Spill
        call    cl::sycl::invalid_parameter_error::~invalid_parameter_error() [base object destructor]
        mov     rdi, qword ptr [rbp - 16]       # 8-byte Reload
        call    operator delete(void*)
        add     rsp, 16
        pop     rbp
        ret
std::shared_ptr<cl::sycl::context>::shared_ptr(decltype(nullptr)) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        call    std::shared_ptr<cl::sycl::context>::shared_ptr() [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::exception::exception(std::error_code, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, std::shared_ptr<cl::sycl::context>) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 208
        mov     qword ptr [rbp - 208], r9       # 8-byte Spill
        mov     eax, esi
        mov     rsi, qword ptr [rbp - 208]      # 8-byte Reload
        mov     dword ptr [rbp - 16], eax
        mov     qword ptr [rbp - 8], rdx
        mov     qword ptr [rbp - 24], rdi
        mov     qword ptr [rbp - 32], rcx
        mov     dword ptr [rbp - 36], r8d
        mov     rax, qword ptr [rbp - 24]
        mov     qword ptr [rbp - 200], rax      # 8-byte Spill
        movups  xmm0, xmmword ptr [rbp - 16]
        movaps  xmmword ptr [rbp - 64], xmm0
        lea     rdi, [rbp - 80]
        call    std::shared_ptr<cl::sycl::context>::shared_ptr(std::shared_ptr<cl::sycl::context> const&) [base object constructor]
        mov     rsi, qword ptr [rbp - 32]
        mov     edx, offset .L.str.7
        lea     rdi, [rbp - 144]
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)
        jmp     .LBB78_1
.LBB78_1:
        mov     esi, dword ptr [rbp - 36]
        lea     rdi, [rbp - 192]
        call    cl::sycl::detail::codeToString[abi:cxx11](int)
        jmp     .LBB78_2
.LBB78_2:
        lea     rdi, [rbp - 112]
        lea     rsi, [rbp - 144]
        lea     rdx, [rbp - 192]
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)
        jmp     .LBB78_3
.LBB78_3:
        mov     rdi, qword ptr [rbp - 200]      # 8-byte Reload
        mov     esi, dword ptr [rbp - 64]
        mov     rdx, qword ptr [rbp - 56]
        lea     rcx, [rbp - 80]
        lea     r8, [rbp - 112]
        call    cl::sycl::exception::exception(std::error_code, std::shared_ptr<cl::sycl::context>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) [base object constructor]
        jmp     .LBB78_4
.LBB78_4:
        lea     rdi, [rbp - 112]
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() [complete object destructor]
        lea     rdi, [rbp - 192]
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() [complete object destructor]
        lea     rdi, [rbp - 144]
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() [complete object destructor]
        lea     rdi, [rbp - 80]
        call    std::shared_ptr<cl::sycl::context>::~shared_ptr() [base object destructor]
        mov     rax, qword ptr [rbp - 200]      # 8-byte Reload
        mov     ecx, dword ptr [rbp - 36]
        mov     dword ptr [rax + 40], ecx
        add     rsp, 208
        pop     rbp
        ret
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 152], rcx
        mov     dword ptr [rbp - 156], eax
        jmp     .LBB78_11
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 152], rcx
        mov     dword ptr [rbp - 156], eax
        jmp     .LBB78_10
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 152], rcx
        mov     dword ptr [rbp - 156], eax
        jmp     .LBB78_9
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 152], rcx
        mov     dword ptr [rbp - 156], eax
        lea     rdi, [rbp - 112]
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() [complete object destructor]
.LBB78_9:
        lea     rdi, [rbp - 192]
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() [complete object destructor]
.LBB78_10:
        lea     rdi, [rbp - 144]
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() [complete object destructor]
.LBB78_11:
        lea     rdi, [rbp - 80]
        call    std::shared_ptr<cl::sycl::context>::~shared_ptr() [base object destructor]
        mov     rdi, qword ptr [rbp - 152]
        call    _Unwind_Resume@PLT
std::shared_ptr<cl::sycl::context>::~shared_ptr() [base object destructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::__shared_ptr<cl::sycl::context, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::runtime_error::~runtime_error() [base object destructor]:         # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    cl::sycl::exception::~exception() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::runtime_error::~runtime_error() [deleting destructor]:         # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 16], rdi       # 8-byte Spill
        call    cl::sycl::runtime_error::~runtime_error() [base object destructor]
        mov     rdi, qword ptr [rbp - 16]       # 8-byte Reload
        call    operator delete(void*)
        add     rsp, 16
        pop     rbp
        ret
std::shared_ptr<cl::sycl::context>::shared_ptr() [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::__shared_ptr<cl::sycl::context, (__gnu_cxx::_Lock_policy)2>::__shared_ptr() [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
std::__shared_ptr<cl::sycl::context, (__gnu_cxx::_Lock_policy)2>::__shared_ptr() [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rdi], 0
        add     rdi, 8
        call    std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count() [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count() [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rax], 0
        pop     rbp
        ret
std::shared_ptr<cl::sycl::context>::shared_ptr(std::shared_ptr<cl::sycl::context> const&) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     rsi, qword ptr [rbp - 16]
        call    std::__shared_ptr<cl::sycl::context, (__gnu_cxx::_Lock_policy)2>::__shared_ptr(std::__shared_ptr<cl::sycl::context, (__gnu_cxx::_Lock_policy)2> const&) [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 80
        mov     qword ptr [rbp - 56], rdi       # 8-byte Spill
        mov     rax, rdi
        mov     qword ptr [rbp - 48], rax       # 8-byte Spill
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        mov     byte ptr [rbp - 25], 0
        mov     byte ptr [rbp - 25], 1
        test    byte ptr [rbp - 25], 1
        je      .LBB86_5
        mov     rdi, qword ptr [rbp - 16]
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const
        mov     qword ptr [rbp - 72], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 24]
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const
        mov     rcx, rax
        mov     rax, qword ptr [rbp - 72]       # 8-byte Reload
        add     rax, rcx
        mov     qword ptr [rbp - 40], rax
        mov     rax, qword ptr [rbp - 40]
        mov     qword ptr [rbp - 64], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 16]
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::capacity() const
        mov     rcx, rax
        mov     rax, qword ptr [rbp - 64]       # 8-byte Reload
        cmp     rax, rcx
        jbe     .LBB86_4
        mov     rax, qword ptr [rbp - 40]
        mov     qword ptr [rbp - 80], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 24]
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::capacity() const
        mov     rcx, rax
        mov     rax, qword ptr [rbp - 80]       # 8-byte Reload
        cmp     rax, rcx
        ja      .LBB86_4
        mov     rdi, qword ptr [rbp - 24]
        mov     rdx, qword ptr [rbp - 16]
        xor     eax, eax
        mov     esi, eax
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
        mov     rdi, rax
        call    std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>::type&& std::move<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)
        mov     rdi, qword ptr [rbp - 56]       # 8-byte Reload
        mov     rsi, rax
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) [complete object constructor]
        jmp     .LBB86_6
.LBB86_4:
        jmp     .LBB86_5
.LBB86_5:
        mov     rdi, qword ptr [rbp - 16]
        mov     rsi, qword ptr [rbp - 24]
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
        mov     rdi, rax
        call    std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>::type&& std::move<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)
        mov     rdi, qword ptr [rbp - 56]       # 8-byte Reload
        mov     rsi, rax
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) [complete object constructor]
.LBB86_6:
        mov     rax, qword ptr [rbp - 48]       # 8-byte Reload
        add     rsp, 80
        pop     rbp
        ret
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 64
        mov     qword ptr [rbp - 56], rdi       # 8-byte Spill
        mov     rax, rdi
        mov     qword ptr [rbp - 64], rax       # 8-byte Spill
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        mov     byte ptr [rbp - 25], 0
        mov     rsi, qword ptr [rbp - 16]
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) [complete object constructor]
        mov     rdi, qword ptr [rbp - 56]       # 8-byte Reload
        mov     rsi, qword ptr [rbp - 24]
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)
        jmp     .LBB87_1
.LBB87_1:
        mov     byte ptr [rbp - 25], 1
        test    byte ptr [rbp - 25], 1
        jne     .LBB87_4
        jmp     .LBB87_3
        mov     rdi, qword ptr [rbp - 56]       # 8-byte Reload
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 40], rcx
        mov     dword ptr [rbp - 44], eax
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() [complete object destructor]
        jmp     .LBB87_5
.LBB87_3:
        mov     rdi, qword ptr [rbp - 56]       # 8-byte Reload
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() [complete object destructor]
.LBB87_4:
        mov     rax, qword ptr [rbp - 64]       # 8-byte Reload
        add     rsp, 64
        pop     rbp
        ret
.LBB87_5:
        mov     rdi, qword ptr [rbp - 40]
        call    _Unwind_Resume@PLT
cl::sycl::detail::codeToString[abi:cxx11](int): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 160
        mov     qword ptr [rbp - 152], rdi      # 8-byte Spill
        mov     rax, rdi
        mov     qword ptr [rbp - 144], rax      # 8-byte Spill
        mov     qword ptr [rbp - 8], rdi
        mov     dword ptr [rbp - 12], esi
        mov     esi, dword ptr [rbp - 12]
        lea     rdi, [rbp - 112]
        mov     qword ptr [rbp - 136], rdi      # 8-byte Spill
        call    std::__cxx11::to_string(int)
        mov     rsi, qword ptr [rbp - 136]      # 8-byte Reload
        mov     edx, offset .L.str.8
        lea     rdi, [rbp - 80]
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, char const*)
        jmp     .LBB88_1
.LBB88_1:
        mov     edi, dword ptr [rbp - 12]
        call    cl::sycl::detail::stringifyErrorCode(int)
        mov     qword ptr [rbp - 160], rax      # 8-byte Spill
        jmp     .LBB88_2
.LBB88_2:
        mov     rdx, qword ptr [rbp - 160]      # 8-byte Reload
        lea     rdi, [rbp - 48]
        lea     rsi, [rbp - 80]
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, char const*)
        jmp     .LBB88_3
.LBB88_3:
        mov     rdi, qword ptr [rbp - 152]      # 8-byte Reload
        mov     edx, offset .L.str.9
        lea     rsi, [rbp - 48]
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, char const*)
        jmp     .LBB88_4
.LBB88_4:
        lea     rdi, [rbp - 48]
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() [complete object destructor]
        lea     rdi, [rbp - 80]
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() [complete object destructor]
        lea     rdi, [rbp - 112]
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() [complete object destructor]
        mov     rax, qword ptr [rbp - 144]      # 8-byte Reload
        add     rsp, 160
        pop     rbp
        ret
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 120], rcx
        mov     dword ptr [rbp - 124], eax
        jmp     .LBB88_9
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 120], rcx
        mov     dword ptr [rbp - 124], eax
        jmp     .LBB88_8
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 120], rcx
        mov     dword ptr [rbp - 124], eax
        lea     rdi, [rbp - 48]
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() [complete object destructor]
.LBB88_8:
        lea     rdi, [rbp - 80]
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() [complete object destructor]
.LBB88_9:
        lea     rdi, [rbp - 112]
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() [complete object destructor]
        mov     rdi, qword ptr [rbp - 120]
        call    _Unwind_Resume@PLT
std::__shared_ptr<cl::sycl::context, (__gnu_cxx::_Lock_policy)2>::__shared_ptr(std::__shared_ptr<cl::sycl::context, (__gnu_cxx::_Lock_policy)2> const&) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     rax, qword ptr [rbp - 16]
        mov     rax, qword ptr [rax]
        mov     qword ptr [rdi], rax
        add     rdi, 8
        mov     rsi, qword ptr [rbp - 16]
        add     rsi, 8
        call    std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count(std::__shared_count<(__gnu_cxx::_Lock_policy)2> const&) [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count(std::__shared_count<(__gnu_cxx::_Lock_policy)2> const&) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 24], rax       # 8-byte Spill
        mov     rcx, qword ptr [rbp - 16]
        mov     rcx, qword ptr [rcx]
        mov     qword ptr [rax], rcx
        cmp     qword ptr [rax], 0
        je      .LBB90_3
        mov     rax, qword ptr [rbp - 24]       # 8-byte Reload
        mov     rdi, qword ptr [rax]
        call    std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_add_ref_copy()
        jmp     .LBB90_2
.LBB90_2:
        jmp     .LBB90_3
.LBB90_3:
        add     rsp, 32
        pop     rbp
        ret
        mov     rdi, rax
        call    __clang_call_terminate
std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_add_ref_copy(): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 64
        mov     qword ptr [rbp - 64], rdi
        mov     rax, qword ptr [rbp - 64]
        add     rax, 8
        mov     qword ptr [rbp - 48], rax
        mov     dword ptr [rbp - 52], 1
        call    __gthread_active_p()
        cmp     eax, 0
        je      .LBB91_2
        mov     rcx, qword ptr [rbp - 48]
        mov     eax, dword ptr [rbp - 52]
        mov     qword ptr [rbp - 24], rcx
        mov     dword ptr [rbp - 28], eax
        mov     rcx, qword ptr [rbp - 24]
        mov     eax, dword ptr [rbp - 28]
        mov     dword ptr [rbp - 32], eax
        mov     eax, dword ptr [rbp - 32]
        lock            xadd    dword ptr [rcx], eax
        mov     dword ptr [rbp - 36], eax
        jmp     .LBB91_3
.LBB91_2:
        mov     rcx, qword ptr [rbp - 48]
        mov     eax, dword ptr [rbp - 52]
        mov     qword ptr [rbp - 8], rcx
        mov     dword ptr [rbp - 12], eax
        mov     ecx, dword ptr [rbp - 12]
        mov     rax, qword ptr [rbp - 8]
        add     ecx, dword ptr [rax]
        mov     dword ptr [rax], ecx
.LBB91_3:
        add     rsp, 64
        pop     rbp
        ret
std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>::type&& std::move<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, char const*): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        mov     qword ptr [rbp - 40], rdi       # 8-byte Spill
        mov     rax, rdi
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        mov     rdi, qword ptr [rbp - 16]
        mov     rsi, qword ptr [rbp - 24]
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)
        mov     rdi, rax
        call    std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>::type&& std::move<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)
        mov     rdi, qword ptr [rbp - 40]       # 8-byte Reload
        mov     rsi, rax
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) [complete object constructor]
        mov     rax, qword ptr [rbp - 32]       # 8-byte Reload
        add     rsp, 48
        pop     rbp
        ret
std::__cxx11::to_string(int):              # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 96
        mov     qword ptr [rbp - 64], rdi       # 8-byte Spill
        mov     rax, rdi
        mov     qword ptr [rbp - 56], rax       # 8-byte Spill
        mov     qword ptr [rbp - 8], rdi
        mov     dword ptr [rbp - 12], esi
        cmp     dword ptr [rbp - 12], 0
        setl    al
        and     al, 1
        mov     byte ptr [rbp - 13], al
        test    byte ptr [rbp - 13], 1
        je      .LBB94_2
        mov     eax, dword ptr [rbp - 12]
        xor     eax, -1
        add     eax, 1
        mov     dword ptr [rbp - 68], eax       # 4-byte Spill
        jmp     .LBB94_3
.LBB94_2:
        mov     eax, dword ptr [rbp - 12]
        mov     dword ptr [rbp - 68], eax       # 4-byte Spill
.LBB94_3:
        mov     eax, dword ptr [rbp - 68]       # 4-byte Reload
        mov     dword ptr [rbp - 20], eax
        mov     edi, dword ptr [rbp - 20]
        mov     esi, 10
        call    unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)
        mov     dword ptr [rbp - 24], eax
        mov     byte ptr [rbp - 25], 0
        movzx   eax, byte ptr [rbp - 13]
        and     eax, 1
        mov     ecx, dword ptr [rbp - 24]
        add     eax, ecx
        mov     qword ptr [rbp - 88], rax       # 8-byte Spill
        lea     rdi, [rbp - 32]
        mov     qword ptr [rbp - 80], rdi       # 8-byte Spill
        call    std::allocator<char>::allocator() [complete object constructor]
        mov     rdi, qword ptr [rbp - 64]       # 8-byte Reload
        mov     rsi, qword ptr [rbp - 88]       # 8-byte Reload
        mov     rcx, qword ptr [rbp - 80]       # 8-byte Reload
        mov     edx, 45
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(unsigned long, char, std::allocator<char> const&)
        jmp     .LBB94_4
.LBB94_4:
        lea     rdi, [rbp - 32]
        call    std::allocator<char>::~allocator() [complete object destructor]
        mov     rdi, qword ptr [rbp - 64]       # 8-byte Reload
        movzx   eax, byte ptr [rbp - 13]
        and     eax, 1
        mov     esi, eax
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[](unsigned long)
        mov     qword ptr [rbp - 96], rax       # 8-byte Spill
        jmp     .LBB94_5
.LBB94_5:
        mov     rdi, qword ptr [rbp - 96]       # 8-byte Reload
        mov     esi, dword ptr [rbp - 24]
        mov     edx, dword ptr [rbp - 20]
        call    void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)
        mov     byte ptr [rbp - 25], 1
        test    byte ptr [rbp - 25], 1
        jne     .LBB94_9
        jmp     .LBB94_8
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 40], rcx
        mov     dword ptr [rbp - 44], eax
        lea     rdi, [rbp - 32]
        call    std::allocator<char>::~allocator() [complete object destructor]
        jmp     .LBB94_10
        mov     rdi, qword ptr [rbp - 64]       # 8-byte Reload
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 40], rcx
        mov     dword ptr [rbp - 44], eax
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() [complete object destructor]
        jmp     .LBB94_10
.LBB94_8:
        mov     rdi, qword ptr [rbp - 64]       # 8-byte Reload
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() [complete object destructor]
.LBB94_9:
        mov     rax, qword ptr [rbp - 56]       # 8-byte Reload
        add     rsp, 96
        pop     rbp
        ret
.LBB94_10:
        mov     rdi, qword ptr [rbp - 40]
        call    _Unwind_Resume@PLT
unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int): # 
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 8], edi
        mov     dword ptr [rbp - 12], esi
        mov     dword ptr [rbp - 16], 1
        mov     eax, dword ptr [rbp - 12]
        imul    eax, dword ptr [rbp - 12]
        mov     dword ptr [rbp - 20], eax
        mov     eax, dword ptr [rbp - 20]
        imul    eax, dword ptr [rbp - 12]
        mov     dword ptr [rbp - 24], eax
        mov     eax, dword ptr [rbp - 24]
        imul    eax, dword ptr [rbp - 12]
        mov     eax, eax
        mov     qword ptr [rbp - 32], rax
.LBB95_1:                               # =>This Inner Loop Header: Depth=1
        mov     eax, dword ptr [rbp - 8]
        cmp     eax, dword ptr [rbp - 12]
        jae     .LBB95_3
        mov     eax, dword ptr [rbp - 16]
        mov     dword ptr [rbp - 4], eax
        jmp     .LBB95_10
.LBB95_3:                               #   in Loop: Header=BB95_1 Depth=1
        mov     eax, dword ptr [rbp - 8]
        cmp     eax, dword ptr [rbp - 20]
        jae     .LBB95_5
        mov     eax, dword ptr [rbp - 16]
        add     eax, 1
        mov     dword ptr [rbp - 4], eax
        jmp     .LBB95_10
.LBB95_5:                               #   in Loop: Header=BB95_1 Depth=1
        mov     eax, dword ptr [rbp - 8]
        cmp     eax, dword ptr [rbp - 24]
        jae     .LBB95_7
        mov     eax, dword ptr [rbp - 16]
        add     eax, 2
        mov     dword ptr [rbp - 4], eax
        jmp     .LBB95_10
.LBB95_7:                               #   in Loop: Header=BB95_1 Depth=1
        mov     eax, dword ptr [rbp - 8]
        cmp     rax, qword ptr [rbp - 32]
        jae     .LBB95_9
        mov     eax, dword ptr [rbp - 16]
        add     eax, 3
        mov     dword ptr [rbp - 4], eax
        jmp     .LBB95_10
.LBB95_9:                               #   in Loop: Header=BB95_1 Depth=1
        mov     rcx, qword ptr [rbp - 32]
        mov     eax, dword ptr [rbp - 8]
        xor     edx, edx
        div     rcx
        mov     dword ptr [rbp - 8], eax
        mov     eax, dword ptr [rbp - 16]
        add     eax, 4
        mov     dword ptr [rbp - 16], eax
        jmp     .LBB95_1
.LBB95_10:
        mov     eax, dword ptr [rbp - 4]
        pop     rbp
        ret
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(unsigned long, char, std::allocator<char> const&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 64
        mov     al, dl
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     byte ptr [rbp - 17], al
        mov     qword ptr [rbp - 32], rcx
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 56], rdi       # 8-byte Spill
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data()
        mov     rdi, qword ptr [rbp - 56]       # 8-byte Reload
        mov     rsi, rax
        mov     rdx, qword ptr [rbp - 32]
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char> const&) [complete object constructor]
        mov     rdi, qword ptr [rbp - 56]       # 8-byte Reload
        mov     rsi, qword ptr [rbp - 16]
        movsx   edx, byte ptr [rbp - 17]
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)
        jmp     .LBB96_1
.LBB96_1:
        add     rsp, 64
        pop     rbp
        ret
        mov     rdi, qword ptr [rbp - 56]       # 8-byte Reload
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 40], rcx
        mov     dword ptr [rbp - 44], eax
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::~_Alloc_hider() [base object destructor]
        mov     rdi, qword ptr [rbp - 40]
        call    _Unwind_Resume@PLT
void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     dword ptr [rbp - 12], esi
        mov     dword ptr [rbp - 16], edx
        mov     eax, dword ptr [rbp - 12]
        sub     eax, 1
        mov     dword ptr [rbp - 20], eax
.LBB97_1:                               # =>This Inner Loop Header: Depth=1
        cmp     dword ptr [rbp - 16], 100
        jb      .LBB97_3
        mov     eax, dword ptr [rbp - 16]
        mov     ecx, 100
        xor     edx, edx
        div     ecx
        shl     edx, 1
        mov     dword ptr [rbp - 24], edx
        mov     eax, dword ptr [rbp - 16]
        mov     ecx, 100
        xor     edx, edx
        div     ecx
        mov     dword ptr [rbp - 16], eax
        mov     eax, dword ptr [rbp - 24]
        add     eax, 1
        mov     eax, eax
        mov     dl, byte ptr [rax + std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits]
        mov     rax, qword ptr [rbp - 8]
        mov     ecx, dword ptr [rbp - 20]
        mov     byte ptr [rax + rcx], dl
        mov     eax, dword ptr [rbp - 24]
        mov     dl, byte ptr [rax + std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits]
        mov     rax, qword ptr [rbp - 8]
        mov     ecx, dword ptr [rbp - 20]
        sub     ecx, 1
        mov     ecx, ecx
        mov     byte ptr [rax + rcx], dl
        mov     eax, dword ptr [rbp - 20]
        sub     eax, 2
        mov     dword ptr [rbp - 20], eax
        jmp     .LBB97_1
.LBB97_3:
        cmp     dword ptr [rbp - 16], 10
        jb      .LBB97_5
        mov     eax, dword ptr [rbp - 16]
        shl     eax, 1
        mov     dword ptr [rbp - 28], eax
        mov     eax, dword ptr [rbp - 28]
        add     eax, 1
        mov     eax, eax
        mov     cl, byte ptr [rax + std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits]
        mov     rax, qword ptr [rbp - 8]
        mov     byte ptr [rax + 1], cl
        mov     eax, dword ptr [rbp - 28]
        mov     cl, byte ptr [rax + std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits]
        mov     rax, qword ptr [rbp - 8]
        mov     byte ptr [rax], cl
        jmp     .LBB97_6
.LBB97_5:
        mov     eax, dword ptr [rbp - 16]
        add     eax, 48
        mov     cl, al
        mov     rax, qword ptr [rbp - 8]
        mov     byte ptr [rax], cl
.LBB97_6:
        pop     rbp
        ret
std::__shared_ptr<cl::sycl::context, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() [base object destructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        add     rdi, 8
        call    std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::exception::~exception() [base object destructor]:              # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 16], rdi       # 8-byte Spill
        movabs  rax, offset vtable for cl::sycl::exception
        add     rax, 16
        mov     qword ptr [rdi], rax
        add     rdi, 48
        call    std::shared_ptr<cl::sycl::context>::~shared_ptr() [base object destructor]
        mov     rdi, qword ptr [rbp - 16]       # 8-byte Reload
        add     rdi, 8
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() [complete object destructor]
        mov     rdi, qword ptr [rbp - 16]       # 8-byte Reload
        call    std::exception::~exception() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
unsigned long cl::sycl::accessor<int, 1, (cl::sycl::access::mode)1026, (cl::sycl::access::target)2014, (cl::sycl::access::placeholder)0, cl::sycl::ext::oneapi::accessor_property_list<> >::getLinearIndex<1>(cl::sycl::id<1>) const: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 64
        mov     qword ptr [rbp - 8], rsi
        mov     qword ptr [rbp - 16], rdi
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rbp - 40], rax       # 8-byte Spill
        mov     qword ptr [rbp - 24], 0
        mov     dword ptr [rbp - 28], 0
.LBB100_1:                              # =>This Inner Loop Header: Depth=1
        cmp     dword ptr [rbp - 28], 1
        jge     .LBB100_4
        mov     rdi, qword ptr [rbp - 40]       # 8-byte Reload
        mov     rax, qword ptr [rbp - 24]
        mov     qword ptr [rbp - 56], rax       # 8-byte Spill
        call    cl::sycl::detail::AccessorBaseHost::getMemoryRange() const
        mov     rdi, rax
        mov     esi, dword ptr [rbp - 28]
        call    cl::sycl::detail::array<3>::operator[](int) const
        mov     rcx, rax
        mov     rax, qword ptr [rbp - 56]       # 8-byte Reload
        imul    rax, rcx
        mov     qword ptr [rbp - 48], rax       # 8-byte Spill
        lea     rdi, [rbp - 8]
        mov     esi, dword ptr [rbp - 28]
        call    cl::sycl::detail::array<1>::operator[](int)
        mov     rdi, qword ptr [rbp - 40]       # 8-byte Reload
        mov     rcx, rax
        mov     rax, qword ptr [rbp - 48]       # 8-byte Reload
        add     rax, qword ptr [rcx]
        mov     qword ptr [rbp - 24], rax
        call    cl::sycl::detail::AccessorBaseHost::getOffset() const
        mov     rdi, rax
        mov     esi, dword ptr [rbp - 28]
        call    cl::sycl::detail::array<3>::operator[](int) const
        add     rax, qword ptr [rbp - 24]
        mov     qword ptr [rbp - 24], rax
        mov     eax, dword ptr [rbp - 28]
        add     eax, 1
        mov     dword ptr [rbp - 28], eax
        jmp     .LBB100_1
.LBB100_4:
        mov     rax, qword ptr [rbp - 24]
        add     rsp, 64
        pop     rbp
        ret
cl::sycl::accessor<int, 1, (cl::sycl::access::mode)1026, (cl::sycl::access::target)2014, (cl::sycl::access::placeholder)0, cl::sycl::ext::oneapi::accessor_property_list<> >::getQualifiedPtr() const: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    cl::sycl::detail::AccessorBaseHost::getPtr() const
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::detail::AccessorBaseHost::getMemoryRange() const: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::__shared_ptr_access<cl::sycl::detail::AccessorImplHost, (__gnu_cxx::_Lock_policy)2, false, false>::operator->() const
        add     rax, 48
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::detail::array<1>::operator[](int):     # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 64
        mov     qword ptr [rbp - 40], rdi
        mov     dword ptr [rbp - 44], esi
        mov     rcx, qword ptr [rbp - 40]
        mov     qword ptr [rbp - 56], rcx       # 8-byte Spill
        mov     eax, dword ptr [rbp - 44]
        mov     qword ptr [rbp - 8], rcx
        mov     dword ptr [rbp - 12], eax
        cmp     dword ptr [rbp - 12], 1
        jge     .LBB103_2
        cmp     dword ptr [rbp - 12], 0
        jge     .LBB103_5
.LBB103_2:
        mov     edi, 64
        call    __cxa_allocate_exception
        mov     rdi, rax
        mov     rax, rdi
        mov     qword ptr [rbp - 64], rax       # 8-byte Spill
        mov     esi, offset .L.str.5
        mov     edx, -30
        call    cl::sycl::invalid_parameter_error::invalid_parameter_error(char const*, int) [base object constructor]
        jmp     .LBB103_3
.LBB103_3:
        mov     rdi, qword ptr [rbp - 64]       # 8-byte Reload
        movabs  rsi, offset typeinfo for cl::sycl::invalid_parameter_error
        movabs  rdx, offset cl::sycl::invalid_parameter_error::~invalid_parameter_error() [base object destructor]
        call    __cxa_throw
        mov     rdi, qword ptr [rbp - 64]       # 8-byte Reload
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 24], rcx
        mov     dword ptr [rbp - 28], eax
        call    __cxa_free_exception
        mov     rdi, qword ptr [rbp - 24]
        call    _Unwind_Resume@PLT
.LBB103_5:
        mov     rax, qword ptr [rbp - 56]       # 8-byte Reload
        movsxd  rcx, dword ptr [rbp - 44]
        shl     rcx, 3
        add     rax, rcx
        add     rsp, 64
        pop     rbp
        ret
cl::sycl::detail::AccessorBaseHost::getOffset() const: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::__shared_ptr_access<cl::sycl::detail::AccessorImplHost, (__gnu_cxx::_Lock_policy)2, false, false>::operator->() const
        add     rsp, 16
        pop     rbp
        ret
std::__shared_ptr_access<cl::sycl::detail::AccessorImplHost, (__gnu_cxx::_Lock_policy)2, false, false>::operator->() const: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::__shared_ptr_access<cl::sycl::detail::AccessorImplHost, (__gnu_cxx::_Lock_policy)2, false, false>::_M_get() const
        add     rsp, 16
        pop     rbp
        ret
std::__shared_ptr_access<cl::sycl::detail::AccessorImplHost, (__gnu_cxx::_Lock_policy)2, false, false>::_M_get() const: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::__shared_ptr<cl::sycl::detail::AccessorImplHost, (__gnu_cxx::_Lock_policy)2>::get() const
        add     rsp, 16
        pop     rbp
        ret
std::__shared_ptr<cl::sycl::detail::AccessorImplHost, (__gnu_cxx::_Lock_policy)2>::get() const: # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        mov     rax, qword ptr [rax]
        pop     rbp
        ret
cl::sycl::detail::AccessorBaseHost::getPtr() const: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::__shared_ptr_access<cl::sycl::detail::AccessorImplHost, (__gnu_cxx::_Lock_policy)2, false, false>::operator->() const
        mov     rax, qword ptr [rax + 104]
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::runtime_error::runtime_error(char const*, int) [base object constructor]:      # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 112
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     dword ptr [rbp - 20], edx
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 104], rax      # 8-byte Spill
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rbp - 96], rax       # 8-byte Spill
        lea     rdi, [rbp - 64]
        mov     qword ptr [rbp - 88], rdi       # 8-byte Spill
        call    std::allocator<char>::allocator() [complete object constructor]
        mov     rsi, qword ptr [rbp - 96]       # 8-byte Reload
        mov     rdx, qword ptr [rbp - 88]       # 8-byte Reload
        lea     rdi, [rbp - 56]
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&)
        jmp     .LBB109_1
.LBB109_1:
        mov     rdi, qword ptr [rbp - 104]      # 8-byte Reload
        mov     edx, dword ptr [rbp - 20]
        lea     rsi, [rbp - 56]
        call    cl::sycl::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int) [base object constructor]
        jmp     .LBB109_2
.LBB109_2:
        lea     rdi, [rbp - 56]
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() [complete object destructor]
        lea     rdi, [rbp - 64]
        call    std::allocator<char>::~allocator() [complete object destructor]
        add     rsp, 112
        pop     rbp
        ret
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 72], rcx
        mov     dword ptr [rbp - 76], eax
        jmp     .LBB109_5
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 72], rcx
        mov     dword ptr [rbp - 76], eax
        lea     rdi, [rbp - 56]
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() [complete object destructor]
.LBB109_5:
        lea     rdi, [rbp - 64]
        call    std::allocator<char>::~allocator() [complete object destructor]
        mov     rdi, qword ptr [rbp - 72]
        call    _Unwind_Resume@PLT
cl::sycl::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 112
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     dword ptr [rbp - 20], edx
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 104], rax      # 8-byte Spill
        mov     edi, 1
        call    cl::sycl::make_error_code(cl::sycl::errc)
        mov     dword ptr [rbp - 40], eax
        mov     qword ptr [rbp - 32], rdx
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rbp - 96], rax       # 8-byte Spill
        mov     eax, dword ptr [rbp - 20]
        mov     dword ptr [rbp - 84], eax       # 4-byte Spill
        xor     eax, eax
        mov     esi, eax
        lea     rdi, [rbp - 56]
        mov     qword ptr [rbp - 80], rdi       # 8-byte Spill
        call    std::shared_ptr<cl::sycl::context>::shared_ptr(decltype(nullptr)) [base object constructor]
        mov     rdi, qword ptr [rbp - 104]      # 8-byte Reload
        mov     rcx, qword ptr [rbp - 96]       # 8-byte Reload
        mov     r8d, dword ptr [rbp - 84]       # 4-byte Reload
        mov     r9, qword ptr [rbp - 80]        # 8-byte Reload
        mov     esi, dword ptr [rbp - 40]
        mov     rdx, qword ptr [rbp - 32]
        call    cl::sycl::exception::exception(std::error_code, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, std::shared_ptr<cl::sycl::context>) [base object constructor]
        jmp     .LBB110_1
.LBB110_1:
        lea     rdi, [rbp - 56]
        call    std::shared_ptr<cl::sycl::context>::~shared_ptr() [base object destructor]
        mov     rax, qword ptr [rbp - 104]      # 8-byte Reload
        movabs  rcx, offset vtable for cl::sycl::runtime_error
        add     rcx, 16
        mov     qword ptr [rax], rcx
        add     rsp, 112
        pop     rbp
        ret
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 64], rcx
        mov     dword ptr [rbp - 68], eax
        lea     rdi, [rbp - 56]
        call    std::shared_ptr<cl::sycl::context>::~shared_ptr() [base object destructor]
        mov     rdi, qword ptr [rbp - 64]
        call    _Unwind_Resume@PLT
std::bitset<32ul>::bitset(unsigned long long) [base object constructor]:                # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 16]
        call    std::_Sanitize_val<32ul, true>::_S_do_sanitize_val(unsigned long long)
        mov     qword ptr [rbp - 24], rax       # 8-byte Spill
        jmp     .LBB111_1
.LBB111_1:
        mov     rsi, qword ptr [rbp - 24]       # 8-byte Reload
        mov     rdi, qword ptr [rbp - 32]       # 8-byte Reload
        call    std::_Base_bitset<1ul>::_Base_bitset(unsigned long long) [base object constructor]
        add     rsp, 32
        pop     rbp
        ret
        mov     rdi, rax
        call    __clang_call_terminate
cl::sycl::detail::PropertyListBase::PropertyListBase(std::bitset<32ul>) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rsi
        mov     qword ptr [rbp - 16], rdi
        mov     rdi, qword ptr [rbp - 16]
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rdi], rax
        add     rdi, 8
        call    std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::vector() [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::detail::PropertyListBase::ctorHelper(): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        pop     rbp
        ret
std::_Sanitize_val<32ul, true>::_S_do_sanitize_val(unsigned long long): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        movabs  rax, 4294967295
        and     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
std::_Base_bitset<1ul>::_Base_bitset(unsigned long long) [base object constructor]:          # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rax, qword ptr [rbp - 8]
        mov     rcx, qword ptr [rbp - 16]
        mov     qword ptr [rax], rcx
        pop     rbp
        ret
std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::vector() [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::_Vector_base<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::_Vector_base() [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
std::_Vector_base<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::_Vector_base() [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::_Vector_base<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::_Vector_impl::_Vector_impl() [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
std::_Vector_base<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::_Vector_impl::_Vector_impl() [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 16], rdi       # 8-byte Spill
        call    std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> >::allocator() [base object constructor]
        mov     rdi, qword ptr [rbp - 16]       # 8-byte Reload
        call    std::_Vector_base<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::_Vector_impl_data::_Vector_impl_data() [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> >::allocator() [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    __gnu_cxx::new_allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> >::new_allocator() [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
std::_Vector_base<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::_Vector_impl_data::_Vector_impl_data() [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rax], 0
        mov     qword ptr [rax + 8], 0
        mov     qword ptr [rax + 16], 0
        pop     rbp
        ret
__gnu_cxx::new_allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> >::new_allocator() [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        pop     rbp
        ret
std::shared_ptr<cl::sycl::detail::buffer_impl>::shared_ptr() [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::__shared_ptr<cl::sycl::detail::buffer_impl, (__gnu_cxx::_Lock_policy)2>::__shared_ptr() [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
std::shared_ptr<cl::sycl::detail::buffer_impl> std::make_shared<cl::sycl::detail::buffer_impl, int*&, unsigned long, unsigned long, cl::sycl::property_list const&, std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > > >(int*&, unsigned long&&, unsigned long&&, cl::sycl::property_list const&, std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >&&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 144
        mov     qword ptr [rbp - 120], rdi      # 8-byte Spill
        mov     rax, rdi
        mov     qword ptr [rbp - 128], rax      # 8-byte Spill
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        mov     qword ptr [rbp - 32], rcx
        mov     qword ptr [rbp - 40], r8
        mov     qword ptr [rbp - 48], r9
        lea     rdi, [rbp - 56]
        mov     qword ptr [rbp - 112], rdi      # 8-byte Spill
        call    std::allocator<cl::sycl::detail::buffer_impl>::allocator() [base object constructor]
        mov     rdi, qword ptr [rbp - 16]
        call    int*& std::forward<int*&>(std::remove_reference<int*&>::type&)
        mov     qword ptr [rbp - 104], rax      # 8-byte Spill
        mov     rdi, qword ptr [rbp - 24]
        call    unsigned long&& std::forward<unsigned long>(std::remove_reference<unsigned long>::type&)
        mov     qword ptr [rbp - 96], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 32]
        call    unsigned long&& std::forward<unsigned long>(std::remove_reference<unsigned long>::type&)
        mov     qword ptr [rbp - 88], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 40]
        call    cl::sycl::property_list const& std::forward<cl::sycl::property_list const&>(std::remove_reference<cl::sycl::property_list const&>::type&)
        mov     qword ptr [rbp - 80], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 48]
        call    std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >&& std::forward<std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > > >(std::remove_reference<std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > > >::type&)
        mov     rdi, qword ptr [rbp - 120]      # 8-byte Reload
        mov     rsi, qword ptr [rbp - 112]      # 8-byte Reload
        mov     rdx, qword ptr [rbp - 104]      # 8-byte Reload
        mov     rcx, qword ptr [rbp - 96]       # 8-byte Reload
        mov     r8, qword ptr [rbp - 88]        # 8-byte Reload
        mov     r9, qword ptr [rbp - 80]        # 8-byte Reload
        mov     r10, rax
        mov     rax, rsp
        mov     qword ptr [rax], r10
        call    std::shared_ptr<cl::sycl::detail::buffer_impl> std::allocate_shared<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, int*&, unsigned long, unsigned long, cl::sycl::property_list const&, std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > > >(std::allocator<cl::sycl::detail::buffer_impl> const&, int*&, unsigned long&&, unsigned long&&, cl::sycl::property_list const&, std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >&&)
        jmp     .LBB123_1
.LBB123_1:
        lea     rdi, [rbp - 56]
        call    std::allocator<cl::sycl::detail::buffer_impl>::~allocator() [base object destructor]
        mov     rax, qword ptr [rbp - 128]      # 8-byte Reload
        add     rsp, 144
        pop     rbp
        ret
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 64], rcx
        mov     dword ptr [rbp - 68], eax
        lea     rdi, [rbp - 56]
        call    std::allocator<cl::sycl::detail::buffer_impl>::~allocator() [base object destructor]
        mov     rdi, qword ptr [rbp - 64]
        call    _Unwind_Resume@PLT
cl::sycl::buffer<int, 1, cl::sycl::detail::aligned_allocator<char>, void>::size() const: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        add     rdi, 16
        call    cl::sycl::range<1>::size() const
        mov     qword ptr [rbp - 16], rax       # 8-byte Spill
        jmp     .LBB124_1
.LBB124_1:
        mov     rax, qword ptr [rbp - 16]       # 8-byte Reload
        add     rsp, 16
        pop     rbp
        ret
        mov     rdi, rax
        call    __clang_call_terminate
cl::sycl::detail::getNextPowerOfTwo(unsigned long): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        sub     rdi, 1
        mov     esi, 1
        call    cl::sycl::detail::getNextPowerOfTwoHelper(unsigned long, unsigned long)
        add     rax, 1
        add     rsp, 16
        pop     rbp
        ret
std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > > cl::sycl::make_unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >>(): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 64
        mov     qword ptr [rbp - 56], rdi       # 8-byte Spill
        mov     rax, rdi
        mov     qword ptr [rbp - 48], rax       # 8-byte Spill
        mov     qword ptr [rbp - 8], rdi
        mov     edi, 24
        call    operator new(unsigned long)
        mov     rdi, rax
        mov     rax, rdi
        mov     qword ptr [rbp - 40], rax       # 8-byte Spill
        mov     rax, rdi
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        call    cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >::SYCLMemObjAllocatorHolder() [base object constructor]
        jmp     .LBB126_1
.LBB126_1:
        mov     rsi, qword ptr [rbp - 32]       # 8-byte Reload
        mov     rdi, qword ptr [rbp - 56]       # 8-byte Reload
        call    std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >::unique_ptr<std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > >, void>(cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >*)
        mov     rax, qword ptr [rbp - 48]       # 8-byte Reload
        add     rsp, 64
        pop     rbp
        ret
        mov     rdi, qword ptr [rbp - 40]       # 8-byte Reload
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 16], rcx
        mov     dword ptr [rbp - 20], eax
        call    operator delete(void*)
        mov     rdi, qword ptr [rbp - 16]
        call    _Unwind_Resume@PLT
std::shared_ptr<cl::sycl::detail::buffer_impl>::operator=(std::shared_ptr<cl::sycl::detail::buffer_impl>&&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 24], rax       # 8-byte Spill
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 16]
        call    std::remove_reference<std::shared_ptr<cl::sycl::detail::buffer_impl>&>::type&& std::move<std::shared_ptr<cl::sycl::detail::buffer_impl>&>(std::shared_ptr<cl::sycl::detail::buffer_impl>&)
        mov     rdi, qword ptr [rbp - 32]       # 8-byte Reload
        mov     rsi, rax
        call    std::__shared_ptr<cl::sycl::detail::buffer_impl, (__gnu_cxx::_Lock_policy)2>::operator=(std::__shared_ptr<cl::sycl::detail::buffer_impl, (__gnu_cxx::_Lock_policy)2>&&)
        mov     rax, qword ptr [rbp - 24]       # 8-byte Reload
        add     rsp, 32
        pop     rbp
        ret
std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >::~unique_ptr() [base object destructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 24], rdi       # 8-byte Spill
        call    std::__uniq_ptr_impl<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >::_M_ptr()
        mov     qword ptr [rbp - 16], rax
        mov     rax, qword ptr [rbp - 16]
        cmp     qword ptr [rax], 0
        je      .LBB128_3
        mov     rdi, qword ptr [rbp - 24]       # 8-byte Reload
        call    std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >::get_deleter()
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 16]
        call    std::remove_reference<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >*&>::type&& std::move<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >*&>(cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >*&)
        mov     rdi, qword ptr [rbp - 32]       # 8-byte Reload
        mov     rsi, qword ptr [rax]
        call    std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > >::operator()(cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >*) const
        jmp     .LBB128_2
.LBB128_2:
        jmp     .LBB128_3
.LBB128_3:
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rax], 0
        add     rsp, 32
        pop     rbp
        ret
        mov     rdi, rax
        call    __clang_call_terminate
std::__shared_ptr_access<cl::sycl::detail::buffer_impl, (__gnu_cxx::_Lock_policy)2, false, false>::operator->() const: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::__shared_ptr_access<cl::sycl::detail::buffer_impl, (__gnu_cxx::_Lock_policy)2, false, false>::_M_get() const
        add     rsp, 16
        pop     rbp
        ret
std::__shared_ptr<cl::sycl::detail::buffer_impl, (__gnu_cxx::_Lock_policy)2>::get() const: # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        mov     rax, qword ptr [rax]
        pop     rbp
        ret
std::type_info::name() const:                # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 16], rax       # 8-byte Spill
        mov     rax, qword ptr [rax + 8]
        movsx   eax, byte ptr [rax]
        cmp     eax, 42
        jne     .LBB131_2
        mov     rax, qword ptr [rbp - 16]       # 8-byte Reload
        mov     rax, qword ptr [rax + 8]
        add     rax, 1
        mov     qword ptr [rbp - 24], rax       # 8-byte Spill
        jmp     .LBB131_3
.LBB131_2:
        mov     rax, qword ptr [rbp - 16]       # 8-byte Reload
        mov     rax, qword ptr [rax + 8]
        mov     qword ptr [rbp - 24], rax       # 8-byte Spill
.LBB131_3:
        mov     rax, qword ptr [rbp - 24]       # 8-byte Reload
        pop     rbp
        ret
cl::sycl::buffer<int, 1, cl::sycl::detail::aligned_allocator<char>, void>::rangeToArray(cl::sycl::range<1>&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 32], rdi       # 8-byte Spill
        mov     qword ptr [rbp - 24], rdi       # 8-byte Spill
        mov     qword ptr [rbp - 8], rsi
        mov     qword ptr [rbp - 16], rdx
        mov     rdi, qword ptr [rbp - 16]
        xor     esi, esi
        call    cl::sycl::detail::array<1>::operator[](int)
        mov     rdi, qword ptr [rbp - 32]       # 8-byte Reload
        mov     rcx, rax
        mov     rax, qword ptr [rbp - 24]       # 8-byte Reload
        mov     rcx, qword ptr [rcx]
        mov     qword ptr [rdi], rcx
        mov     qword ptr [rdi + 8], 0
        mov     qword ptr [rdi + 16], 0
        add     rsp, 32
        pop     rbp
        ret
std::array<unsigned long, 3ul>::data():              # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::__array_traits<unsigned long, 3ul>::_S_ptr(unsigned long const (&) [3])
        add     rsp, 16
        pop     rbp
        ret
std::__shared_ptr<cl::sycl::detail::buffer_impl, (__gnu_cxx::_Lock_policy)2>::__shared_ptr() [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rdi], 0
        add     rdi, 8
        call    std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count() [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
std::shared_ptr<cl::sycl::detail::buffer_impl> std::allocate_shared<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, int*&, unsigned long, unsigned long, cl::sycl::property_list const&, std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > > >(std::allocator<cl::sycl::detail::buffer_impl> const&, int*&, unsigned long&&, unsigned long&&, cl::sycl::property_list const&, std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >&&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 112
        mov     qword ptr [rbp - 104], rdi      # 8-byte Spill
        mov     rax, rdi
        mov     qword ptr [rbp - 64], rax       # 8-byte Spill
        mov     rax, qword ptr [rbp + 16]
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        mov     qword ptr [rbp - 32], rcx
        mov     qword ptr [rbp - 40], r8
        mov     qword ptr [rbp - 48], r9
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rbp - 56], rax
        mov     rdi, qword ptr [rbp - 24]
        call    int*& std::forward<int*&>(std::remove_reference<int*&>::type&)
        mov     qword ptr [rbp - 96], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 32]
        call    unsigned long&& std::forward<unsigned long>(std::remove_reference<unsigned long>::type&)
        mov     qword ptr [rbp - 88], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 40]
        call    unsigned long&& std::forward<unsigned long>(std::remove_reference<unsigned long>::type&)
        mov     qword ptr [rbp - 80], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 48]
        call    cl::sycl::property_list const& std::forward<cl::sycl::property_list const&>(std::remove_reference<cl::sycl::property_list const&>::type&)
        mov     qword ptr [rbp - 72], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp + 16]
        call    std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >&& std::forward<std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > > >(std::remove_reference<std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > > >::type&)
        mov     rdi, qword ptr [rbp - 104]      # 8-byte Reload
        mov     rdx, qword ptr [rbp - 96]       # 8-byte Reload
        mov     rcx, qword ptr [rbp - 88]       # 8-byte Reload
        mov     r8, qword ptr [rbp - 80]        # 8-byte Reload
        mov     r9, qword ptr [rbp - 72]        # 8-byte Reload
        mov     rsi, qword ptr [rbp - 56]
        mov     qword ptr [rsp], rax
        call    std::shared_ptr<cl::sycl::detail::buffer_impl>::shared_ptr<std::allocator<cl::sycl::detail::buffer_impl>, int*&, unsigned long, unsigned long, cl::sycl::property_list const&, std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > > >(std::_Sp_alloc_shared_tag<std::allocator<cl::sycl::detail::buffer_impl> >, int*&, unsigned long&&, unsigned long&&, cl::sycl::property_list const&, std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >&&)
        mov     rax, qword ptr [rbp - 64]       # 8-byte Reload
        add     rsp, 112
        pop     rbp
        ret
std::allocator<cl::sycl::detail::buffer_impl>::allocator() [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    __gnu_cxx::new_allocator<cl::sycl::detail::buffer_impl>::new_allocator() [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
int*& std::forward<int*&>(std::remove_reference<int*&>::type&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
unsigned long&& std::forward<unsigned long>(std::remove_reference<unsigned long>::type&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
cl::sycl::property_list const& std::forward<cl::sycl::property_list const&>(std::remove_reference<cl::sycl::property_list const&>::type&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >&& std::forward<std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > > >(std::remove_reference<std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > > >::type&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
std::allocator<cl::sycl::detail::buffer_impl>::~allocator() [base object destructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    __gnu_cxx::new_allocator<cl::sycl::detail::buffer_impl>::~new_allocator() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
std::shared_ptr<cl::sycl::detail::buffer_impl>::shared_ptr<std::allocator<cl::sycl::detail::buffer_impl>, int*&, unsigned long, unsigned long, cl::sycl::property_list const&, std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > > >(std::_Sp_alloc_shared_tag<std::allocator<cl::sycl::detail::buffer_impl> >, int*&, unsigned long&&, unsigned long&&, cl::sycl::property_list const&, std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >&&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 112
        mov     rax, qword ptr [rbp + 16]
        mov     qword ptr [rbp - 8], rsi
        mov     qword ptr [rbp - 16], rdi
        mov     qword ptr [rbp - 24], rdx
        mov     qword ptr [rbp - 32], rcx
        mov     qword ptr [rbp - 40], r8
        mov     qword ptr [rbp - 48], r9
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rbp - 96], rax       # 8-byte Spill
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 56], rax
        mov     rdi, qword ptr [rbp - 24]
        call    int*& std::forward<int*&>(std::remove_reference<int*&>::type&)
        mov     qword ptr [rbp - 88], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 32]
        call    unsigned long&& std::forward<unsigned long>(std::remove_reference<unsigned long>::type&)
        mov     qword ptr [rbp - 80], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 40]
        call    unsigned long&& std::forward<unsigned long>(std::remove_reference<unsigned long>::type&)
        mov     qword ptr [rbp - 72], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 48]
        call    cl::sycl::property_list const& std::forward<cl::sycl::property_list const&>(std::remove_reference<cl::sycl::property_list const&>::type&)
        mov     qword ptr [rbp - 64], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp + 16]
        call    std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >&& std::forward<std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > > >(std::remove_reference<std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > > >::type&)
        mov     rdi, qword ptr [rbp - 96]       # 8-byte Reload
        mov     rdx, qword ptr [rbp - 88]       # 8-byte Reload
        mov     rcx, qword ptr [rbp - 80]       # 8-byte Reload
        mov     r8, qword ptr [rbp - 72]        # 8-byte Reload
        mov     r9, qword ptr [rbp - 64]        # 8-byte Reload
        mov     rsi, qword ptr [rbp - 56]
        mov     qword ptr [rsp], rax
        call    std::__shared_ptr<cl::sycl::detail::buffer_impl, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::allocator<cl::sycl::detail::buffer_impl>, int*&, unsigned long, unsigned long, cl::sycl::property_list const&, std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > > >(std::_Sp_alloc_shared_tag<std::allocator<cl::sycl::detail::buffer_impl> >, int*&, unsigned long&&, unsigned long&&, cl::sycl::property_list const&, std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >&&)
        add     rsp, 112
        pop     rbp
        ret
std::__shared_ptr<cl::sycl::detail::buffer_impl, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::allocator<cl::sycl::detail::buffer_impl>, int*&, unsigned long, unsigned long, cl::sycl::property_list const&, std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > > >(std::_Sp_alloc_shared_tag<std::allocator<cl::sycl::detail::buffer_impl> >, int*&, unsigned long&&, unsigned long&&, cl::sycl::property_list const&, std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >&&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 128
        mov     rax, qword ptr [rbp + 16]
        mov     qword ptr [rbp - 8], rsi
        mov     qword ptr [rbp - 16], rdi
        mov     qword ptr [rbp - 24], rdx
        mov     qword ptr [rbp - 32], rcx
        mov     qword ptr [rbp - 40], r8
        mov     qword ptr [rbp - 48], r9
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rbp - 64], rax       # 8-byte Spill
        mov     qword ptr [rax], 0
        add     rax, 8
        mov     qword ptr [rbp - 104], rax      # 8-byte Spill
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 56], rax
        mov     rdi, qword ptr [rbp - 24]
        call    int*& std::forward<int*&>(std::remove_reference<int*&>::type&)
        mov     qword ptr [rbp - 96], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 32]
        call    unsigned long&& std::forward<unsigned long>(std::remove_reference<unsigned long>::type&)
        mov     qword ptr [rbp - 88], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 40]
        call    unsigned long&& std::forward<unsigned long>(std::remove_reference<unsigned long>::type&)
        mov     qword ptr [rbp - 80], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 48]
        call    cl::sycl::property_list const& std::forward<cl::sycl::property_list const&>(std::remove_reference<cl::sycl::property_list const&>::type&)
        mov     qword ptr [rbp - 72], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp + 16]
        call    std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >&& std::forward<std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > > >(std::remove_reference<std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > > >::type&)
        mov     rdi, qword ptr [rbp - 104]      # 8-byte Reload
        mov     rcx, qword ptr [rbp - 96]       # 8-byte Reload
        mov     r8, qword ptr [rbp - 88]        # 8-byte Reload
        mov     r9, qword ptr [rbp - 80]        # 8-byte Reload
        mov     r10, qword ptr [rbp - 72]       # 8-byte Reload
        mov     rsi, qword ptr [rbp - 64]       # 8-byte Reload
        mov     rdx, qword ptr [rbp - 56]
        mov     qword ptr [rsp], r10
        mov     qword ptr [rsp + 8], rax
        call    std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, int*&, unsigned long, unsigned long, cl::sycl::property_list const&, std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > > >(cl::sycl::detail::buffer_impl*&, std::_Sp_alloc_shared_tag<std::allocator<cl::sycl::detail::buffer_impl> >, int*&, unsigned long&&, unsigned long&&, cl::sycl::property_list const&, std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >&&)
        mov     rdi, qword ptr [rbp - 64]       # 8-byte Reload
        mov     rsi, qword ptr [rdi]
        call    std::enable_if<!__has_esft_base<cl::sycl::detail::buffer_impl>::value, void>::type std::__shared_ptr<cl::sycl::detail::buffer_impl, (__gnu_cxx::_Lock_policy)2>::_M_enable_shared_from_this_with<cl::sycl::detail::buffer_impl, cl::sycl::detail::buffer_impl>(cl::sycl::detail::buffer_impl*)
        add     rsp, 128
        pop     rbp
        ret
std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, int*&, unsigned long, unsigned long, cl::sycl::property_list const&, std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > > >(cl::sycl::detail::buffer_impl*&, std::_Sp_alloc_shared_tag<std::allocator<cl::sycl::detail::buffer_impl> >, int*&, unsigned long&&, unsigned long&&, cl::sycl::property_list const&, std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >&&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 192
        mov     rax, qword ptr [rbp + 24]
        mov     rax, qword ptr [rbp + 16]
        mov     qword ptr [rbp - 8], rdx
        mov     qword ptr [rbp - 16], rdi
        mov     qword ptr [rbp - 24], rsi
        mov     qword ptr [rbp - 32], rcx
        mov     qword ptr [rbp - 40], r8
        mov     qword ptr [rbp - 48], r9
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rbp - 128], rax      # 8-byte Spill
        mov     rsi, qword ptr [rbp - 8]
        lea     rdi, [rbp - 56]
        mov     qword ptr [rbp - 120], rdi      # 8-byte Spill
        call    std::allocator<std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2> >::allocator<cl::sycl::detail::buffer_impl>(std::allocator<cl::sycl::detail::buffer_impl> const&)
        mov     rsi, qword ptr [rbp - 120]      # 8-byte Reload
        lea     rdi, [rbp - 72]
        call    std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2> > > std::__allocate_guarded<std::allocator<std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2> > >(std::allocator<std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2> >&)
        jmp     .LBB144_1
.LBB144_1:
        lea     rdi, [rbp - 72]
        call    std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2> > >::get()
        mov     qword ptr [rbp - 136], rax      # 8-byte Spill
        jmp     .LBB144_2
.LBB144_2:
        mov     rax, qword ptr [rbp - 136]      # 8-byte Reload
        mov     qword ptr [rbp - 96], rax
        mov     rax, qword ptr [rbp - 96]
        mov     qword ptr [rbp - 184], rax      # 8-byte Spill
        mov     rsi, qword ptr [rbp - 8]
        lea     rdi, [rbp - 112]
        mov     qword ptr [rbp - 176], rdi      # 8-byte Spill
        call    std::allocator<cl::sycl::detail::buffer_impl>::allocator(std::allocator<cl::sycl::detail::buffer_impl> const&) [base object constructor]
        mov     rdi, qword ptr [rbp - 32]
        call    int*& std::forward<int*&>(std::remove_reference<int*&>::type&)
        mov     qword ptr [rbp - 168], rax      # 8-byte Spill
        mov     rdi, qword ptr [rbp - 40]
        call    unsigned long&& std::forward<unsigned long>(std::remove_reference<unsigned long>::type&)
        mov     qword ptr [rbp - 160], rax      # 8-byte Spill
        mov     rdi, qword ptr [rbp - 48]
        call    unsigned long&& std::forward<unsigned long>(std::remove_reference<unsigned long>::type&)
        mov     qword ptr [rbp - 152], rax      # 8-byte Spill
        mov     rdi, qword ptr [rbp + 16]
        call    cl::sycl::property_list const& std::forward<cl::sycl::property_list const&>(std::remove_reference<cl::sycl::property_list const&>::type&)
        mov     qword ptr [rbp - 144], rax      # 8-byte Spill
        mov     rdi, qword ptr [rbp + 24]
        call    std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >&& std::forward<std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > > >(std::remove_reference<std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > > >::type&)
        mov     rdi, qword ptr [rbp - 184]      # 8-byte Reload
        mov     rsi, qword ptr [rbp - 176]      # 8-byte Reload
        mov     rdx, qword ptr [rbp - 168]      # 8-byte Reload
        mov     rcx, qword ptr [rbp - 160]      # 8-byte Reload
        mov     r8, qword ptr [rbp - 152]       # 8-byte Reload
        mov     r9, qword ptr [rbp - 144]       # 8-byte Reload
        mov     r10, rax
        mov     rax, rsp
        mov     qword ptr [rax], r10
        call    std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2>::_Sp_counted_ptr_inplace<int*&, unsigned long, unsigned long, cl::sycl::property_list const&, std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > > >(std::allocator<cl::sycl::detail::buffer_impl>, int*&, unsigned long&&, unsigned long&&, cl::sycl::property_list const&, std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >&&)
        jmp     .LBB144_3
.LBB144_3:
        lea     rdi, [rbp - 112]
        call    std::allocator<cl::sycl::detail::buffer_impl>::~allocator() [base object destructor]
        mov     rax, qword ptr [rbp - 184]      # 8-byte Reload
        mov     qword ptr [rbp - 104], rax
        lea     rdi, [rbp - 72]
        xor     eax, eax
        mov     esi, eax
        call    std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2> > >::operator=(decltype(nullptr))
        mov     rax, qword ptr [rbp - 128]      # 8-byte Reload
        mov     rcx, qword ptr [rbp - 104]
        mov     qword ptr [rax], rcx
        mov     rdi, qword ptr [rbp - 104]
        call    std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2>::_M_ptr()
        mov     rcx, rax
        mov     rax, qword ptr [rbp - 24]
        mov     qword ptr [rax], rcx
        lea     rdi, [rbp - 72]
        call    std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2> > >::~__allocated_ptr() [base object destructor]
        lea     rdi, [rbp - 56]
        call    std::allocator<std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2> >::~allocator() [base object destructor]
        add     rsp, 192
        pop     rbp
        ret
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 80], rcx
        mov     dword ptr [rbp - 84], eax
        jmp     .LBB144_8
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 80], rcx
        mov     dword ptr [rbp - 84], eax
        jmp     .LBB144_7
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 80], rcx
        mov     dword ptr [rbp - 84], eax
        lea     rdi, [rbp - 112]
        call    std::allocator<cl::sycl::detail::buffer_impl>::~allocator() [base object destructor]
.LBB144_7:
        lea     rdi, [rbp - 72]
        call    std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2> > >::~__allocated_ptr() [base object destructor]
.LBB144_8:
        lea     rdi, [rbp - 56]
        call    std::allocator<std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2> >::~allocator() [base object destructor]
        mov     rdi, qword ptr [rbp - 80]
        call    _Unwind_Resume@PLT
std::enable_if<!__has_esft_base<cl::sycl::detail::buffer_impl>::value, void>::type std::__shared_ptr<cl::sycl::detail::buffer_impl, (__gnu_cxx::_Lock_policy)2>::_M_enable_shared_from_this_with<cl::sycl::detail::buffer_impl, cl::sycl::detail::buffer_impl>(cl::sycl::detail::buffer_impl*): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        pop     rbp
        ret
std::allocator<std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2> >::allocator<cl::sycl::detail::buffer_impl>(std::allocator<cl::sycl::detail::buffer_impl> const&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        call    __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2> >::new_allocator() [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2> > > std::__allocate_guarded<std::allocator<std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2> > >(std::allocator<std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2> >&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        mov     qword ptr [rbp - 40], rdi       # 8-byte Spill
        mov     rax, rdi
        mov     qword ptr [rbp - 24], rax       # 8-byte Spill
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 16]
        mov     esi, 1
        call    std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2> > >::allocate(std::allocator<std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2> >&, unsigned long)
        mov     rdi, qword ptr [rbp - 40]       # 8-byte Reload
        mov     rsi, qword ptr [rbp - 32]       # 8-byte Reload
        mov     rdx, rax
        call    std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2> > >::__allocated_ptr(std::allocator<std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2> >&, std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2>*) [base object constructor]
        mov     rax, qword ptr [rbp - 24]       # 8-byte Reload
        add     rsp, 48
        pop     rbp
        ret
std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2> > >::get(): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        mov     rdi, qword ptr [rax + 8]
        call    std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2>* std::__to_address<std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2> >(std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2>*)
        add     rsp, 16
        pop     rbp
        ret
std::allocator<cl::sycl::detail::buffer_impl>::allocator(std::allocator<cl::sycl::detail::buffer_impl> const&) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     rsi, qword ptr [rbp - 16]
        call    __gnu_cxx::new_allocator<cl::sycl::detail::buffer_impl>::new_allocator(__gnu_cxx::new_allocator<cl::sycl::detail::buffer_impl> const&) [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2>::_Sp_counted_ptr_inplace<int*&, unsigned long, unsigned long, cl::sycl::property_list const&, std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > > >(std::allocator<cl::sycl::detail::buffer_impl>, int*&, unsigned long&&, unsigned long&&, cl::sycl::property_list const&, std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >&&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 144
        mov     qword ptr [rbp - 112], rsi      # 8-byte Spill
        mov     rax, qword ptr [rbp + 16]
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rdx
        mov     qword ptr [rbp - 24], rcx
        mov     qword ptr [rbp - 32], r8
        mov     qword ptr [rbp - 40], r9
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 120], rdi      # 8-byte Spill
        call    std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_Sp_counted_base() [base object constructor]
        mov     rax, qword ptr [rbp - 120]      # 8-byte Reload
        mov     rsi, qword ptr [rbp - 112]      # 8-byte Reload
        mov     qword ptr [rax], offset vtable for std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2>+16
        add     rax, 16
        mov     qword ptr [rbp - 136], rax      # 8-byte Spill
        lea     rdi, [rbp - 48]
        mov     qword ptr [rbp - 128], rdi      # 8-byte Spill
        call    std::allocator<cl::sycl::detail::buffer_impl>::allocator(std::allocator<cl::sycl::detail::buffer_impl> const&) [base object constructor]
        mov     rdi, qword ptr [rbp - 136]      # 8-byte Reload
        mov     rsi, qword ptr [rbp - 128]      # 8-byte Reload
        call    std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2>::_Impl::_Impl(std::allocator<cl::sycl::detail::buffer_impl>) [base object constructor]
        mov     rdi, qword ptr [rbp - 128]      # 8-byte Reload
        call    std::allocator<cl::sycl::detail::buffer_impl>::~allocator() [base object destructor]
        mov     rdi, qword ptr [rbp - 120]      # 8-byte Reload
        call    std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2>::_M_ptr()
        mov     qword ptr [rbp - 104], rax      # 8-byte Spill
        mov     rdi, qword ptr [rbp - 16]
        call    int*& std::forward<int*&>(std::remove_reference<int*&>::type&)
        mov     qword ptr [rbp - 96], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 24]
        call    unsigned long&& std::forward<unsigned long>(std::remove_reference<unsigned long>::type&)
        mov     qword ptr [rbp - 88], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 32]
        call    unsigned long&& std::forward<unsigned long>(std::remove_reference<unsigned long>::type&)
        mov     qword ptr [rbp - 80], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 40]
        call    cl::sycl::property_list const& std::forward<cl::sycl::property_list const&>(std::remove_reference<cl::sycl::property_list const&>::type&)
        mov     qword ptr [rbp - 72], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp + 16]
        call    std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >&& std::forward<std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > > >(std::remove_reference<std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > > >::type&)
        mov     rdi, qword ptr [rbp - 112]      # 8-byte Reload
        mov     rsi, qword ptr [rbp - 104]      # 8-byte Reload
        mov     rdx, qword ptr [rbp - 96]       # 8-byte Reload
        mov     rcx, qword ptr [rbp - 88]       # 8-byte Reload
        mov     r8, qword ptr [rbp - 80]        # 8-byte Reload
        mov     r9, qword ptr [rbp - 72]        # 8-byte Reload
        mov     r10, rax
        mov     rax, rsp
        mov     qword ptr [rax], r10
        call    void std::allocator_traits<std::allocator<cl::sycl::detail::buffer_impl> >::construct<cl::sycl::detail::buffer_impl, int*&, unsigned long, unsigned long, cl::sycl::property_list const&, std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > > >(std::allocator<cl::sycl::detail::buffer_impl>&, cl::sycl::detail::buffer_impl*, int*&, unsigned long&&, unsigned long&&, cl::sycl::property_list const&, std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >&&)
        jmp     .LBB150_1
.LBB150_1:
        add     rsp, 144
        pop     rbp
        ret
        mov     rdi, qword ptr [rbp - 136]      # 8-byte Reload
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 56], rcx
        mov     dword ptr [rbp - 60], eax
        call    std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2>::_Impl::~_Impl() [base object destructor]
        mov     rdi, qword ptr [rbp - 120]      # 8-byte Reload
        call    std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::~_Sp_counted_base() [base object destructor]
        mov     rdi, qword ptr [rbp - 56]
        call    _Unwind_Resume@PLT
std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2> > >::operator=(decltype(nullptr)): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rax + 8], 0
        pop     rbp
        ret
std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2>::_M_ptr(): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        add     rdi, 16
        call    __gnu_cxx::__aligned_buffer<cl::sycl::detail::buffer_impl>::_M_ptr()
        add     rsp, 16
        pop     rbp
        ret
std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2> > >::~__allocated_ptr() [base object destructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 16], rax       # 8-byte Spill
        cmp     qword ptr [rax + 8], 0
        je      .LBB153_3
        mov     rax, qword ptr [rbp - 16]       # 8-byte Reload
        mov     rdi, qword ptr [rax]
        mov     rsi, qword ptr [rax + 8]
        mov     edx, 1
        call    std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2> > >::deallocate(std::allocator<std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2> >&, std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2>*, unsigned long)
        jmp     .LBB153_2
.LBB153_2:
        jmp     .LBB153_3
.LBB153_3:
        add     rsp, 16
        pop     rbp
        ret
        mov     rdi, rax
        call    __clang_call_terminate
std::allocator<std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2> >::~allocator() [base object destructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2> >::~new_allocator() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2> >::new_allocator() [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        pop     rbp
        ret
std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2> > >::allocate(std::allocator<std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2> >&, unsigned long): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     rsi, qword ptr [rbp - 16]
        xor     eax, eax
        mov     edx, eax
        call    __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*)
        add     rsp, 16
        pop     rbp
        ret
std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2> > >::__allocated_ptr(std::allocator<std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2> >&, std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2>*) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 16]
        call    std::allocator<std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2> >* std::__addressof<std::allocator<std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2> > >(std::allocator<std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2> >&)
        mov     rcx, rax
        mov     rax, qword ptr [rbp - 32]       # 8-byte Reload
        mov     qword ptr [rax], rcx
        mov     rcx, qword ptr [rbp - 24]
        mov     qword ptr [rax + 8], rcx
        add     rsp, 32
        pop     rbp
        ret
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        mov     rdi, qword ptr [rbp - 8]
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        call    __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2> >::_M_max_size() const
        mov     rcx, rax
        mov     rax, qword ptr [rbp - 32]       # 8-byte Reload
        cmp     rax, rcx
        jbe     .LBB158_2
        call    std::__throw_bad_alloc()
.LBB158_2:
        imul    rdi, qword ptr [rbp - 16], 200
        call    operator new(unsigned long)
        add     rsp, 32
        pop     rbp
        ret
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2> >::_M_max_size() const: # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        movabs  rax, 46116860184273879
        pop     rbp
        ret
std::allocator<std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2> >* std::__addressof<std::allocator<std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2> > >(std::allocator<std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2> >&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2>* std::__to_address<std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2> >(std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2>*): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
__gnu_cxx::new_allocator<cl::sycl::detail::buffer_impl>::new_allocator(__gnu_cxx::new_allocator<cl::sycl::detail::buffer_impl> const&) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        pop     rbp
        ret
std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_Sp_counted_base() [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        movabs  rcx, offset vtable for std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>
        add     rcx, 16
        mov     qword ptr [rax], rcx
        mov     dword ptr [rax + 8], 1
        mov     dword ptr [rax + 12], 1
        pop     rbp
        ret
std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2>::_Impl::_Impl(std::allocator<cl::sycl::detail::buffer_impl>) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::_Sp_ebo_helper<0, std::allocator<cl::sycl::detail::buffer_impl>, true>::_Sp_ebo_helper(std::allocator<cl::sycl::detail::buffer_impl> const&) [base object constructor]
        jmp     .LBB164_1
.LBB164_1:
        add     rsp, 16
        pop     rbp
        ret
        mov     rdi, rax
        call    __clang_call_terminate
void std::allocator_traits<std::allocator<cl::sycl::detail::buffer_impl> >::construct<cl::sycl::detail::buffer_impl, int*&, unsigned long, unsigned long, cl::sycl::property_list const&, std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > > >(std::allocator<cl::sycl::detail::buffer_impl>&, cl::sycl::detail::buffer_impl*, int*&, unsigned long&&, unsigned long&&, cl::sycl::property_list const&, std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >&&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 112
        mov     rax, qword ptr [rbp + 16]
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        mov     qword ptr [rbp - 32], rcx
        mov     qword ptr [rbp - 40], r8
        mov     qword ptr [rbp - 48], r9
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 96], rax       # 8-byte Spill
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rbp - 88], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 24]
        call    int*& std::forward<int*&>(std::remove_reference<int*&>::type&)
        mov     qword ptr [rbp - 80], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 32]
        call    unsigned long&& std::forward<unsigned long>(std::remove_reference<unsigned long>::type&)
        mov     qword ptr [rbp - 72], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 40]
        call    unsigned long&& std::forward<unsigned long>(std::remove_reference<unsigned long>::type&)
        mov     qword ptr [rbp - 64], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 48]
        call    cl::sycl::property_list const& std::forward<cl::sycl::property_list const&>(std::remove_reference<cl::sycl::property_list const&>::type&)
        mov     qword ptr [rbp - 56], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp + 16]
        call    std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >&& std::forward<std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > > >(std::remove_reference<std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > > >::type&)
        mov     rdi, qword ptr [rbp - 96]       # 8-byte Reload
        mov     rsi, qword ptr [rbp - 88]       # 8-byte Reload
        mov     rdx, qword ptr [rbp - 80]       # 8-byte Reload
        mov     rcx, qword ptr [rbp - 72]       # 8-byte Reload
        mov     r8, qword ptr [rbp - 64]        # 8-byte Reload
        mov     r9, qword ptr [rbp - 56]        # 8-byte Reload
        mov     qword ptr [rsp], rax
        call    void __gnu_cxx::new_allocator<cl::sycl::detail::buffer_impl>::construct<cl::sycl::detail::buffer_impl, int*&, unsigned long, unsigned long, cl::sycl::property_list const&, std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > > >(cl::sycl::detail::buffer_impl*, int*&, unsigned long&&, unsigned long&&, cl::sycl::property_list const&, std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >&&)
        add     rsp, 112
        pop     rbp
        ret
std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2>::_Impl::~_Impl() [base object destructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::_Sp_ebo_helper<0, std::allocator<cl::sycl::detail::buffer_impl>, true>::~_Sp_ebo_helper() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace() [base object destructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 16], rdi       # 8-byte Spill
        add     rdi, 16
        call    std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2>::_Impl::~_Impl() [base object destructor]
        mov     rdi, qword ptr [rbp - 16]       # 8-byte Reload
        call    std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::~_Sp_counted_base() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace() [deleting destructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 16], rdi       # 8-byte Spill
        call    std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace() [base object destructor]
        mov     rdi, qword ptr [rbp - 16]       # 8-byte Reload
        call    operator delete(void*)
        add     rsp, 16
        pop     rbp
        ret
std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2>::_M_dispose(): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 24], rdi       # 8-byte Spill
        add     rdi, 16
        call    std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2>::_Impl::_M_alloc()
        mov     rdi, qword ptr [rbp - 24]       # 8-byte Reload
        mov     qword ptr [rbp - 16], rax       # 8-byte Spill
        call    std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2>::_M_ptr()
        mov     rdi, qword ptr [rbp - 16]       # 8-byte Reload
        mov     rsi, rax
        call    void std::allocator_traits<std::allocator<cl::sycl::detail::buffer_impl> >::destroy<cl::sycl::detail::buffer_impl>(std::allocator<cl::sycl::detail::buffer_impl>&, cl::sycl::detail::buffer_impl*)
        add     rsp, 32
        pop     rbp
        ret
std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2>::_M_destroy(): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 40], rdi       # 8-byte Spill
        add     rdi, 16
        call    std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2>::_Impl::_M_alloc()
        mov     rsi, rax
        lea     rdi, [rbp - 16]
        call    std::allocator<std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2> >::allocator<cl::sycl::detail::buffer_impl>(std::allocator<cl::sycl::detail::buffer_impl> const&)
        mov     rdx, qword ptr [rbp - 40]       # 8-byte Reload
        lea     rdi, [rbp - 32]
        lea     rsi, [rbp - 16]
        call    std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2> > >::__allocated_ptr(std::allocator<std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2> >&, std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2>*) [base object constructor]
        mov     rdi, qword ptr [rbp - 40]       # 8-byte Reload
        call    std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace() [base object destructor]
        lea     rdi, [rbp - 32]
        call    std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2> > >::~__allocated_ptr() [base object destructor]
        lea     rdi, [rbp - 16]
        call    std::allocator<std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2> >::~allocator() [base object destructor]
        add     rsp, 48
        pop     rbp
        ret
std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        mov     qword ptr [rbp - 16], rdi
        mov     qword ptr [rbp - 24], rsi
        mov     rdi, qword ptr [rbp - 16]
        call    std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2>::_M_ptr()
        mov     qword ptr [rbp - 32], rax
        mov     rax, qword ptr [rbp - 24]
        mov     qword ptr [rbp - 40], rax       # 8-byte Spill
        call    std::_Sp_make_shared_tag::_S_ti()
        mov     rcx, rax
        mov     rax, qword ptr [rbp - 40]       # 8-byte Reload
        cmp     rax, rcx
        je      .LBB171_2
        mov     rdi, qword ptr [rbp - 24]
        movabs  rsi, offset typeinfo for std::_Sp_make_shared_tag
        call    std::type_info::operator==(std::type_info const&) const
        test    al, 1
        jne     .LBB171_2
        jmp     .LBB171_3
.LBB171_2:
        mov     rax, qword ptr [rbp - 32]
        mov     qword ptr [rbp - 8], rax
        jmp     .LBB171_4
.LBB171_3:
        mov     qword ptr [rbp - 8], 0
.LBB171_4:
        mov     rax, qword ptr [rbp - 8]
        add     rsp, 48
        pop     rbp
        ret
std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::~_Sp_counted_base() [base object destructor]: # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        pop     rbp
        ret
std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::~_Sp_counted_base() [deleting destructor]: # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        ud2
std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_destroy(): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 16], rax       # 8-byte Spill
        cmp     rax, 0
        je      .LBB174_2
        mov     rdi, qword ptr [rbp - 16]       # 8-byte Reload
        mov     rax, qword ptr [rdi]
        call    qword ptr [rax + 8]
.LBB174_2:
        add     rsp, 16
        pop     rbp
        ret
std::_Sp_ebo_helper<0, std::allocator<cl::sycl::detail::buffer_impl>, true>::_Sp_ebo_helper(std::allocator<cl::sycl::detail::buffer_impl> const&) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     rsi, qword ptr [rbp - 16]
        call    std::allocator<cl::sycl::detail::buffer_impl>::allocator(std::allocator<cl::sycl::detail::buffer_impl> const&) [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
void __gnu_cxx::new_allocator<cl::sycl::detail::buffer_impl>::construct<cl::sycl::detail::buffer_impl, int*&, unsigned long, unsigned long, cl::sycl::property_list const&, std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > > >(cl::sycl::detail::buffer_impl*, int*&, unsigned long&&, unsigned long&&, cl::sycl::property_list const&, std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >&&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 128
        mov     rax, qword ptr [rbp + 16]
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        mov     qword ptr [rbp - 32], rcx
        mov     qword ptr [rbp - 40], r8
        mov     qword ptr [rbp - 48], r9
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rbp - 120], rax      # 8-byte Spill
        mov     rdi, qword ptr [rbp - 24]
        call    int*& std::forward<int*&>(std::remove_reference<int*&>::type&)
        mov     rax, qword ptr [rax]
        mov     qword ptr [rbp - 112], rax      # 8-byte Spill
        mov     rdi, qword ptr [rbp - 32]
        call    unsigned long&& std::forward<unsigned long>(std::remove_reference<unsigned long>::type&)
        mov     rax, qword ptr [rax]
        mov     qword ptr [rbp - 104], rax      # 8-byte Spill
        mov     rdi, qword ptr [rbp - 40]
        call    unsigned long&& std::forward<unsigned long>(std::remove_reference<unsigned long>::type&)
        mov     rax, qword ptr [rax]
        mov     qword ptr [rbp - 96], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 48]
        call    cl::sycl::property_list const& std::forward<cl::sycl::property_list const&>(std::remove_reference<cl::sycl::property_list const&>::type&)
        mov     qword ptr [rbp - 88], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp + 16]
        call    std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >&& std::forward<std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > > >(std::remove_reference<std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > > >::type&)
        mov     rsi, rax
        lea     rdi, [rbp - 56]
        mov     qword ptr [rbp - 80], rdi       # 8-byte Spill
        call    std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocator, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > >, void>(std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >&&)
        mov     rdi, qword ptr [rbp - 120]      # 8-byte Reload
        mov     rsi, qword ptr [rbp - 112]      # 8-byte Reload
        mov     rdx, qword ptr [rbp - 104]      # 8-byte Reload
        mov     rcx, qword ptr [rbp - 96]       # 8-byte Reload
        mov     r8, qword ptr [rbp - 88]        # 8-byte Reload
        mov     r9, qword ptr [rbp - 80]        # 8-byte Reload
        call    cl::sycl::detail::buffer_impl::buffer_impl(void*, unsigned long, unsigned long, cl::sycl::property_list const&, std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocator, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >) [base object constructor]
        jmp     .LBB176_1
.LBB176_1:
        lea     rdi, [rbp - 56]
        call    std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocator, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::~unique_ptr() [base object destructor]
        add     rsp, 128
        pop     rbp
        ret
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 64], rcx
        mov     dword ptr [rbp - 68], eax
        lea     rdi, [rbp - 56]
        call    std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocator, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::~unique_ptr() [base object destructor]
        mov     rdi, qword ptr [rbp - 64]
        call    _Unwind_Resume@PLT
std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocator, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > >, void>(std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >&&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 16]
        call    std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >::release()
        mov     qword ptr [rbp - 24], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 16]
        call    std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >::get_deleter()
        mov     rdi, rax
        call    std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > >&& std::forward<std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >(std::remove_reference<std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >::type&)
        mov     rdi, qword ptr [rbp - 32]       # 8-byte Reload
        mov     rsi, qword ptr [rbp - 24]       # 8-byte Reload
        mov     rdx, rax
        call    std::__uniq_ptr_data<cl::sycl::detail::SYCLMemObjAllocator, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator>, true, true>::__uniq_ptr_impl<std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >(cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > >&&)
        jmp     .LBB177_1
.LBB177_1:
        add     rsp, 32
        pop     rbp
        ret
        mov     rdi, rax
        call    __clang_call_terminate
cl::sycl::detail::buffer_impl::buffer_impl(void*, unsigned long, unsigned long, cl::sycl::property_list const&, std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocator, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 128
        mov     qword ptr [rbp - 104], r9       # 8-byte Spill
        mov     rax, rdi
        mov     rdi, qword ptr [rbp - 104]      # 8-byte Reload
        mov     qword ptr [rbp - 8], rax
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        mov     qword ptr [rbp - 32], rcx
        mov     qword ptr [rbp - 40], r8
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 96], rax       # 8-byte Spill
        mov     rax, qword ptr [rbp - 24]
        mov     qword ptr [rbp - 88], rax       # 8-byte Spill
        mov     rax, qword ptr [rbp - 40]
        mov     qword ptr [rbp - 80], rax       # 8-byte Spill
        call    std::remove_reference<std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocator, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >&>::type&& std::move<std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocator, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >&>(std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocator, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >&)
        mov     rsi, rax
        lea     rdi, [rbp - 48]
        mov     qword ptr [rbp - 72], rdi       # 8-byte Spill
        call    std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocator, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::unique_ptr(std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocator, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >&&) [base object constructor]
        mov     rdi, qword ptr [rbp - 96]       # 8-byte Reload
        mov     rsi, qword ptr [rbp - 88]       # 8-byte Reload
        mov     rdx, qword ptr [rbp - 80]       # 8-byte Reload
        mov     rcx, qword ptr [rbp - 72]       # 8-byte Reload
        call    cl::sycl::detail::SYCLMemObjT::SYCLMemObjT(unsigned long, cl::sycl::property_list const&, std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocator, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >) [base object constructor]
        jmp     .LBB178_1
.LBB178_1:
        lea     rdi, [rbp - 48]
        call    std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocator, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::~unique_ptr() [base object destructor]
        mov     rax, qword ptr [rbp - 96]       # 8-byte Reload
        mov     qword ptr [rax], offset vtable for cl::sycl::detail::buffer_impl+16
        mov     rdi, qword ptr [rbp - 40]
        call    bool cl::sycl::property_list::has_property<cl::sycl::ext::oneapi::property::buffer::use_pinned_host_memory>() const
        mov     byte ptr [rbp - 105], al        # 1-byte Spill
        jmp     .LBB178_2
.LBB178_2:
        mov     al, byte ptr [rbp - 105]        # 1-byte Reload
        test    al, 1
        jne     .LBB178_3
        jmp     .LBB178_8
.LBB178_3:
        mov     edi, 64
        call    __cxa_allocate_exception
        mov     rdi, rax
        mov     rax, rdi
        mov     qword ptr [rbp - 120], rax      # 8-byte Spill
        mov     esi, offset .L.str.11
        mov     edx, -59
        call    cl::sycl::invalid_object_error::invalid_object_error(char const*, int) [base object constructor]
        jmp     .LBB178_4
.LBB178_4:
        mov     rdi, qword ptr [rbp - 120]      # 8-byte Reload
        mov     esi, offset typeinfo for cl::sycl::invalid_object_error
        mov     edx, offset cl::sycl::invalid_object_error::~invalid_object_error() [base object destructor]
        call    __cxa_throw
        jmp     .LBB178_12
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 56], rcx
        mov     dword ptr [rbp - 60], eax
        lea     rdi, [rbp - 48]
        call    std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocator, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::~unique_ptr() [base object destructor]
        jmp     .LBB178_11
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 56], rcx
        mov     dword ptr [rbp - 60], eax
        jmp     .LBB178_10
        mov     rdi, qword ptr [rbp - 120]      # 8-byte Reload
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 56], rcx
        mov     dword ptr [rbp - 60], eax
        call    __cxa_free_exception
        jmp     .LBB178_10
.LBB178_8:
        mov     rdi, qword ptr [rbp - 96]       # 8-byte Reload
        mov     rsi, qword ptr [rbp - 16]
        mov     rdx, qword ptr [rbp - 32]
        call    cl::sycl::detail::SYCLMemObjT::handleHostData(void*, unsigned long)
        jmp     .LBB178_9
.LBB178_9:
        add     rsp, 128
        pop     rbp
        ret
.LBB178_10:
        mov     rdi, qword ptr [rbp - 96]       # 8-byte Reload
        call    cl::sycl::detail::SYCLMemObjT::~SYCLMemObjT() [base object destructor]
.LBB178_11:
        mov     rdi, qword ptr [rbp - 56]
        call    _Unwind_Resume@PLT
.LBB178_12:
std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocator, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::~unique_ptr() [base object destructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 24], rdi       # 8-byte Spill
        call    std::__uniq_ptr_impl<cl::sycl::detail::SYCLMemObjAllocator, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::_M_ptr()
        mov     qword ptr [rbp - 16], rax
        mov     rax, qword ptr [rbp - 16]
        cmp     qword ptr [rax], 0
        je      .LBB179_3
        mov     rdi, qword ptr [rbp - 24]       # 8-byte Reload
        call    std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocator, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::get_deleter()
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 16]
        call    std::remove_reference<cl::sycl::detail::SYCLMemObjAllocator*&>::type&& std::move<cl::sycl::detail::SYCLMemObjAllocator*&>(cl::sycl::detail::SYCLMemObjAllocator*&)
        mov     rdi, qword ptr [rbp - 32]       # 8-byte Reload
        mov     rsi, qword ptr [rax]
        call    std::default_delete<cl::sycl::detail::SYCLMemObjAllocator>::operator()(cl::sycl::detail::SYCLMemObjAllocator*) const
        jmp     .LBB179_2
.LBB179_2:
        jmp     .LBB179_3
.LBB179_3:
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rax], 0
        add     rsp, 32
        pop     rbp
        ret
        mov     rdi, rax
        call    __clang_call_terminate
std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >::release(): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::__uniq_ptr_impl<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >::release()
        add     rsp, 16
        pop     rbp
        ret
std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > >&& std::forward<std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >(std::remove_reference<std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >::type&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >::get_deleter(): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::__uniq_ptr_impl<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >::_M_deleter()
        mov     qword ptr [rbp - 16], rax       # 8-byte Spill
        jmp     .LBB182_1
.LBB182_1:
        mov     rax, qword ptr [rbp - 16]       # 8-byte Reload
        add     rsp, 16
        pop     rbp
        ret
        mov     rdi, rax
        call    __clang_call_terminate
std::__uniq_ptr_data<cl::sycl::detail::SYCLMemObjAllocator, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator>, true, true>::__uniq_ptr_impl<std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >(cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > >&&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        mov     rdi, qword ptr [rbp - 8]
        mov     rsi, qword ptr [rbp - 16]
        mov     rdx, qword ptr [rbp - 24]
        call    std::__uniq_ptr_impl<cl::sycl::detail::SYCLMemObjAllocator, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::__uniq_ptr_impl<std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >(cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > >&&)
        add     rsp, 32
        pop     rbp
        ret
std::__uniq_ptr_impl<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >::release(): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 32], rdi       # 8-byte Spill
        call    std::__uniq_ptr_impl<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >::_M_ptr()
        mov     qword ptr [rbp - 24], rax       # 8-byte Spill
        jmp     .LBB184_1
.LBB184_1:
        mov     rdi, qword ptr [rbp - 32]       # 8-byte Reload
        mov     rax, qword ptr [rbp - 24]       # 8-byte Reload
        mov     rax, qword ptr [rax]
        mov     qword ptr [rbp - 16], rax
        call    std::__uniq_ptr_impl<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >::_M_ptr()
        mov     qword ptr [rbp - 40], rax       # 8-byte Spill
        jmp     .LBB184_2
.LBB184_2:
        mov     rax, qword ptr [rbp - 40]       # 8-byte Reload
        mov     qword ptr [rax], 0
        mov     rax, qword ptr [rbp - 16]
        add     rsp, 48
        pop     rbp
        ret
        mov     rdi, rax
        call    __clang_call_terminate
std::__uniq_ptr_impl<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >::_M_ptr(): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::tuple_element<0ul, std::tuple<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > > >::type& std::get<0ul, cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >(std::tuple<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >&)
        add     rsp, 16
        pop     rbp
        ret
std::tuple_element<0ul, std::tuple<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > > >::type& std::get<0ul, cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >(std::tuple<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >*& std::__get_helper<0ul, cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >(std::_Tuple_impl<0ul, cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >&)
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >*& std::__get_helper<0ul, cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >(std::_Tuple_impl<0ul, cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::_Tuple_impl<0ul, cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >::_M_head(std::_Tuple_impl<0ul, cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >&)
        add     rsp, 16
        pop     rbp
        ret
std::_Tuple_impl<0ul, cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >::_M_head(std::_Tuple_impl<0ul, cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::_Head_base<0ul, cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >*, false>::_M_head(std::_Head_base<0ul, cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >*, false>&)
        add     rsp, 16
        pop     rbp
        ret
std::_Head_base<0ul, cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >*, false>::_M_head(std::_Head_base<0ul, cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >*, false>&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
std::__uniq_ptr_impl<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >::_M_deleter(): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::tuple_element<1ul, std::tuple<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > > >::type& std::get<1ul, cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >(std::tuple<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >&)
        add     rsp, 16
        pop     rbp
        ret
std::tuple_element<1ul, std::tuple<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > > >::type& std::get<1ul, cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >(std::tuple<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > >& std::__get_helper<1ul, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > >>(std::_Tuple_impl<1ul, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > >>&)
        add     rsp, 16
        pop     rbp
        ret
std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > >& std::__get_helper<1ul, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > >>(std::_Tuple_impl<1ul, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > >>&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::_Tuple_impl<1ul, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >::_M_head(std::_Tuple_impl<1ul, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >&)
        add     rsp, 16
        pop     rbp
        ret
std::_Tuple_impl<1ul, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >::_M_head(std::_Tuple_impl<1ul, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::_Head_base<1ul, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > >, true>::_M_head(std::_Head_base<1ul, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > >, true>&)
        add     rsp, 16
        pop     rbp
        ret
std::_Head_base<1ul, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > >, true>::_M_head(std::_Head_base<1ul, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > >, true>&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
std::__uniq_ptr_impl<cl::sycl::detail::SYCLMemObjAllocator, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::__uniq_ptr_impl<std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >(cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > >&&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 24]
        call    std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > >&& std::forward<std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >(std::remove_reference<std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >::type&)
        mov     rdi, qword ptr [rbp - 32]       # 8-byte Reload
        mov     rdx, rax
        lea     rsi, [rbp - 16]
        call    std::tuple<cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::tuple<cl::sycl::detail::SYCLMemObjAllocator*&, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > >, true>(cl::sycl::detail::SYCLMemObjAllocator*&, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > >&&)
        add     rsp, 32
        pop     rbp
        ret
std::tuple<cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::tuple<cl::sycl::detail::SYCLMemObjAllocator*&, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > >, true>(cl::sycl::detail::SYCLMemObjAllocator*&, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > >&&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 40], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 16]
        call    cl::sycl::detail::SYCLMemObjAllocator*& std::forward<cl::sycl::detail::SYCLMemObjAllocator*&>(std::remove_reference<cl::sycl::detail::SYCLMemObjAllocator*&>::type&)
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 24]
        call    std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > >&& std::forward<std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >(std::remove_reference<std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >::type&)
        mov     rdi, qword ptr [rbp - 40]       # 8-byte Reload
        mov     rsi, qword ptr [rbp - 32]       # 8-byte Reload
        mov     rdx, rax
        call    std::_Tuple_impl<0ul, cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::_Tuple_impl<cl::sycl::detail::SYCLMemObjAllocator*&, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > >, void>(cl::sycl::detail::SYCLMemObjAllocator*&, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > >&&)
        jmp     .LBB196_1
.LBB196_1:
        add     rsp, 48
        pop     rbp
        ret
        mov     rdi, rax
        call    __clang_call_terminate
cl::sycl::detail::SYCLMemObjAllocator*& std::forward<cl::sycl::detail::SYCLMemObjAllocator*&>(std::remove_reference<cl::sycl::detail::SYCLMemObjAllocator*&>::type&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
std::_Tuple_impl<0ul, cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::_Tuple_impl<cl::sycl::detail::SYCLMemObjAllocator*&, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > >, void>(cl::sycl::detail::SYCLMemObjAllocator*&, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > >&&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 40], rax       # 8-byte Spill
        mov     qword ptr [rbp - 48], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 24]
        call    std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > >&& std::forward<std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >(std::remove_reference<std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >::type&)
        mov     rdi, qword ptr [rbp - 48]       # 8-byte Reload
        mov     rsi, rax
        call    std::_Tuple_impl<1ul, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::_Tuple_impl<std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >(std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > >&&)
        mov     rax, qword ptr [rbp - 40]       # 8-byte Reload
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 16]
        call    cl::sycl::detail::SYCLMemObjAllocator*& std::forward<cl::sycl::detail::SYCLMemObjAllocator*&>(std::remove_reference<cl::sycl::detail::SYCLMemObjAllocator*&>::type&)
        mov     rdi, qword ptr [rbp - 32]       # 8-byte Reload
        mov     rsi, rax
        call    std::_Head_base<0ul, cl::sycl::detail::SYCLMemObjAllocator*, false>::_Head_base<cl::sycl::detail::SYCLMemObjAllocator*&>(cl::sycl::detail::SYCLMemObjAllocator*&)
        add     rsp, 48
        pop     rbp
        ret
std::_Tuple_impl<1ul, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::_Tuple_impl<std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >(std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > >&&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 24], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 16]
        call    std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > >&& std::forward<std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >(std::remove_reference<std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >::type&)
        mov     rdi, qword ptr [rbp - 24]       # 8-byte Reload
        mov     rsi, rax
        call    std::_Head_base<1ul, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator>, true>::_Head_base<std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >(std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > >&&)
        add     rsp, 32
        pop     rbp
        ret
std::_Head_base<0ul, cl::sycl::detail::SYCLMemObjAllocator*, false>::_Head_base<cl::sycl::detail::SYCLMemObjAllocator*&>(cl::sycl::detail::SYCLMemObjAllocator*&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 24], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 16]
        call    cl::sycl::detail::SYCLMemObjAllocator*& std::forward<cl::sycl::detail::SYCLMemObjAllocator*&>(std::remove_reference<cl::sycl::detail::SYCLMemObjAllocator*&>::type&)
        mov     rcx, rax
        mov     rax, qword ptr [rbp - 24]       # 8-byte Reload
        mov     rcx, qword ptr [rcx]
        mov     qword ptr [rax], rcx
        add     rsp, 32
        pop     rbp
        ret
std::_Head_base<1ul, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator>, true>::_Head_base<std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >(std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > >&&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 24], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 16]
        call    std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > >&& std::forward<std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >(std::remove_reference<std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >::type&)
        mov     rdi, qword ptr [rbp - 24]       # 8-byte Reload
        mov     rsi, rax
        call    std::default_delete<cl::sycl::detail::SYCLMemObjAllocator>::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, void>(std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > const&)
        add     rsp, 32
        pop     rbp
        ret
std::default_delete<cl::sycl::detail::SYCLMemObjAllocator>::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, void>(std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > const&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        pop     rbp
        ret
std::remove_reference<std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocator, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >&>::type&& std::move<std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocator, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >&>(std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocator, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocator, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::unique_ptr(std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocator, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >&&) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     rsi, qword ptr [rbp - 16]
        call    std::__uniq_ptr_data<cl::sycl::detail::SYCLMemObjAllocator, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator>, true, true>::__uniq_ptr_data(std::__uniq_ptr_data<cl::sycl::detail::SYCLMemObjAllocator, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator>, true, true>&&) [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::detail::SYCLMemObjT::SYCLMemObjT(unsigned long, cl::sycl::property_list const&, std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocator, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 64
        mov     qword ptr [rbp - 64], rcx       # 8-byte Spill
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 48], rdi       # 8-byte Spill
        call    cl::sycl::detail::SYCLMemObjI::SYCLMemObjI() [base object constructor]
        mov     rdi, qword ptr [rbp - 64]       # 8-byte Reload
        mov     rax, qword ptr [rbp - 48]       # 8-byte Reload
        mov     qword ptr [rax], offset vtable for cl::sycl::detail::SYCLMemObjT+16
        add     rax, 24
        mov     qword ptr [rbp - 56], rax       # 8-byte Spill
        call    std::remove_reference<std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocator, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >&>::type&& std::move<std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocator, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >&>(std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocator, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >&)
        mov     rdi, qword ptr [rbp - 56]       # 8-byte Reload
        mov     rsi, rax
        call    std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocator, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::unique_ptr(std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocator, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >&&) [base object constructor]
        mov     rdi, qword ptr [rbp - 48]       # 8-byte Reload
        add     rdi, 32
        mov     rsi, qword ptr [rbp - 24]
        call    cl::sycl::property_list::property_list(cl::sycl::property_list const&) [base object constructor]
        jmp     .LBB205_1
.LBB205_1:
        mov     rdi, qword ptr [rbp - 48]       # 8-byte Reload
        add     rdi, 64
        xor     eax, eax
        mov     esi, eax
        call    std::shared_ptr<cl::sycl::detail::event_impl>::shared_ptr(decltype(nullptr)) [base object constructor]
        mov     rdi, qword ptr [rbp - 48]       # 8-byte Reload
        add     rdi, 80
        xor     eax, eax
        mov     esi, eax
        call    std::shared_ptr<cl::sycl::detail::context_impl>::shared_ptr(decltype(nullptr)) [base object constructor]
        mov     rdi, qword ptr [rbp - 48]       # 8-byte Reload
        mov     qword ptr [rdi + 96], 0
        mov     byte ptr [rdi + 104], 0
        mov     byte ptr [rdi + 105], 0
        mov     byte ptr [rdi + 106], 1
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rdi + 112], rax
        mov     qword ptr [rdi + 120], 0
        mov     qword ptr [rdi + 128], 0
        add     rdi, 136
        xor     eax, eax
        mov     esi, eax
        call    std::function<void ()>::function(decltype(nullptr)) [base object constructor]
        mov     rdi, qword ptr [rbp - 48]       # 8-byte Reload
        add     rdi, 168
        xor     eax, eax
        mov     esi, eax
        call    std::shared_ptr<void const>::shared_ptr(decltype(nullptr)) [base object constructor]
        add     rsp, 64
        pop     rbp
        ret
        mov     rdi, qword ptr [rbp - 56]       # 8-byte Reload
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 32], rcx
        mov     dword ptr [rbp - 36], eax
        call    std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocator, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::~unique_ptr() [base object destructor]
        mov     rdi, qword ptr [rbp - 48]       # 8-byte Reload
        call    cl::sycl::detail::SYCLMemObjI::~SYCLMemObjI() [base object destructor]
        mov     rdi, qword ptr [rbp - 32]
        call    _Unwind_Resume@PLT
bool cl::sycl::property_list::has_property<cl::sycl::ext::oneapi::property::buffer::use_pinned_host_memory>() const: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::enable_if<std::is_base_of<cl::sycl::detail::DataLessPropertyBase, cl::sycl::ext::oneapi::property::buffer::use_pinned_host_memory>::value, bool>::type cl::sycl::detail::PropertyListBase::has_property_helper<cl::sycl::ext::oneapi::property::buffer::use_pinned_host_memory>() const
        and     al, 1
        movzx   eax, al
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::invalid_object_error::invalid_object_error(char const*, int) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 112
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     dword ptr [rbp - 20], edx
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 104], rax      # 8-byte Spill
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rbp - 96], rax       # 8-byte Spill
        lea     rdi, [rbp - 64]
        mov     qword ptr [rbp - 88], rdi       # 8-byte Spill
        call    std::allocator<char>::allocator() [complete object constructor]
        mov     rsi, qword ptr [rbp - 96]       # 8-byte Reload
        mov     rdx, qword ptr [rbp - 88]       # 8-byte Reload
        lea     rdi, [rbp - 56]
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&)
        jmp     .LBB207_1
.LBB207_1:
        mov     rdi, qword ptr [rbp - 104]      # 8-byte Reload
        mov     edx, dword ptr [rbp - 20]
        lea     rsi, [rbp - 56]
        call    cl::sycl::invalid_object_error::invalid_object_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int) [base object constructor]
        jmp     .LBB207_2
.LBB207_2:
        lea     rdi, [rbp - 56]
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() [complete object destructor]
        lea     rdi, [rbp - 64]
        call    std::allocator<char>::~allocator() [complete object destructor]
        add     rsp, 112
        pop     rbp
        ret
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 72], rcx
        mov     dword ptr [rbp - 76], eax
        jmp     .LBB207_5
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 72], rcx
        mov     dword ptr [rbp - 76], eax
        lea     rdi, [rbp - 56]
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() [complete object destructor]
.LBB207_5:
        lea     rdi, [rbp - 64]
        call    std::allocator<char>::~allocator() [complete object destructor]
        mov     rdi, qword ptr [rbp - 72]
        call    _Unwind_Resume@PLT
cl::sycl::invalid_object_error::~invalid_object_error() [base object destructor]:  # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    cl::sycl::device_error::~device_error() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::detail::SYCLMemObjT::handleHostData(void*, unsigned long): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        test    byte ptr [rax + 105], 1
        jne     .LBB209_2
        mov     rdi, qword ptr [rbp - 32]       # 8-byte Reload
        mov     rsi, qword ptr [rbp - 16]
        call    std::enable_if<std::is_pointer<char*>::value, void>::type cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)
.LBB209_2:
        mov     rdi, qword ptr [rbp - 32]       # 8-byte Reload
        mov     rsi, qword ptr [rbp - 16]
        mov     rdx, qword ptr [rbp - 24]
        call    cl::sycl::detail::SYCLMemObjT::canReuseHostPtr(void*, unsigned long)
        test    al, 1
        jne     .LBB209_3
        jmp     .LBB209_4
.LBB209_3:
        mov     rax, qword ptr [rbp - 32]       # 8-byte Reload
        mov     rcx, qword ptr [rbp - 16]
        mov     qword ptr [rax + 120], rcx
        jmp     .LBB209_5
.LBB209_4:
        mov     rdi, qword ptr [rbp - 32]       # 8-byte Reload
        mov     rsi, qword ptr [rbp - 24]
        call    cl::sycl::detail::SYCLMemObjT::setAlign(unsigned long)
        mov     rdi, qword ptr [rbp - 32]       # 8-byte Reload
        mov     rax, qword ptr [rdi]
        call    qword ptr [rax + 32]
        mov     rcx, rax
        mov     rax, qword ptr [rbp - 32]       # 8-byte Reload
        mov     qword ptr [rax + 128], rcx
        mov     rcx, qword ptr [rax + 128]
        mov     qword ptr [rax + 120], rcx
        mov     rdi, qword ptr [rax + 120]
        mov     rsi, qword ptr [rbp - 16]
        mov     rdx, qword ptr [rax + 112]
        call    memcpy@PLT
.LBB209_5:
        add     rsp, 32
        pop     rbp
        ret
cl::sycl::detail::SYCLMemObjT::~SYCLMemObjT() [base object destructor]:    # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 16], rdi       # 8-byte Spill
        movabs  rax, offset vtable for cl::sycl::detail::SYCLMemObjT
        add     rax, 16
        mov     qword ptr [rdi], rax
        add     rdi, 168
        call    std::shared_ptr<void const>::~shared_ptr() [base object destructor]
        mov     rdi, qword ptr [rbp - 16]       # 8-byte Reload
        add     rdi, 136
        call    std::function<void ()>::~function() [base object destructor]
        mov     rdi, qword ptr [rbp - 16]       # 8-byte Reload
        add     rdi, 80
        call    std::shared_ptr<cl::sycl::detail::context_impl>::~shared_ptr() [base object destructor]
        mov     rdi, qword ptr [rbp - 16]       # 8-byte Reload
        add     rdi, 64
        call    std::shared_ptr<cl::sycl::detail::event_impl>::~shared_ptr() [base object destructor]
        mov     rdi, qword ptr [rbp - 16]       # 8-byte Reload
        add     rdi, 32
        call    cl::sycl::property_list::~property_list() [base object destructor]
        mov     rdi, qword ptr [rbp - 16]       # 8-byte Reload
        add     rdi, 24
        call    std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocator, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::~unique_ptr() [base object destructor]
        mov     rdi, qword ptr [rbp - 16]       # 8-byte Reload
        call    cl::sycl::detail::SYCLMemObjI::~SYCLMemObjI() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
std::__uniq_ptr_data<cl::sycl::detail::SYCLMemObjAllocator, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator>, true, true>::__uniq_ptr_data(std::__uniq_ptr_data<cl::sycl::detail::SYCLMemObjAllocator, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator>, true, true>&&) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     rsi, qword ptr [rbp - 16]
        call    std::__uniq_ptr_impl<cl::sycl::detail::SYCLMemObjAllocator, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::__uniq_ptr_impl(std::__uniq_ptr_impl<cl::sycl::detail::SYCLMemObjAllocator, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >&&) [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
std::__uniq_ptr_impl<cl::sycl::detail::SYCLMemObjAllocator, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::__uniq_ptr_impl(std::__uniq_ptr_impl<cl::sycl::detail::SYCLMemObjAllocator, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >&&) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 16]
        call    std::remove_reference<std::tuple<cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >&>::type&& std::move<std::tuple<cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >&>(std::tuple<cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >&)
        mov     rdi, qword ptr [rbp - 32]       # 8-byte Reload
        mov     rsi, rax
        call    std::tuple<cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::tuple(std::tuple<cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >&&) [base object constructor]
        mov     rdi, qword ptr [rbp - 16]
        call    std::__uniq_ptr_impl<cl::sycl::detail::SYCLMemObjAllocator, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::_M_ptr()
        mov     qword ptr [rbp - 24], rax       # 8-byte Spill
        jmp     .LBB212_1
.LBB212_1:
        mov     rax, qword ptr [rbp - 24]       # 8-byte Reload
        mov     qword ptr [rax], 0
        add     rsp, 32
        pop     rbp
        ret
        mov     rdi, rax
        call    __clang_call_terminate
std::remove_reference<std::tuple<cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >&>::type&& std::move<std::tuple<cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >&>(std::tuple<cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
std::tuple<cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::tuple(std::tuple<cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >&&) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     rsi, qword ptr [rbp - 16]
        call    std::_Tuple_impl<0ul, cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::_Tuple_impl(std::_Tuple_impl<0ul, cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >&&) [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
std::__uniq_ptr_impl<cl::sycl::detail::SYCLMemObjAllocator, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::_M_ptr(): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::tuple_element<0ul, std::tuple<cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> > >::type& std::get<0ul, cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >(std::tuple<cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >&)
        add     rsp, 16
        pop     rbp
        ret
std::_Tuple_impl<0ul, cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::_Tuple_impl(std::_Tuple_impl<0ul, cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >&&) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 24], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 16]
        call    std::_Tuple_impl<0ul, cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::_M_tail(std::_Tuple_impl<0ul, cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >&)
        mov     rdi, rax
        call    std::remove_reference<std::_Tuple_impl<1ul, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >&>::type&& std::move<std::_Tuple_impl<1ul, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >&>(std::_Tuple_impl<1ul, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >&)
        mov     rdi, qword ptr [rbp - 24]       # 8-byte Reload
        mov     rsi, rax
        call    std::_Tuple_impl<1ul, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::_Tuple_impl(std::_Tuple_impl<1ul, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >&&) [base object constructor]
        mov     rdi, qword ptr [rbp - 16]
        call    std::_Tuple_impl<0ul, cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::_M_head(std::_Tuple_impl<0ul, cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >&)
        mov     rdi, rax
        call    cl::sycl::detail::SYCLMemObjAllocator*&& std::forward<cl::sycl::detail::SYCLMemObjAllocator*>(std::remove_reference<cl::sycl::detail::SYCLMemObjAllocator*>::type&)
        mov     rdi, qword ptr [rbp - 24]       # 8-byte Reload
        mov     rsi, rax
        call    std::_Head_base<0ul, cl::sycl::detail::SYCLMemObjAllocator*, false>::_Head_base<cl::sycl::detail::SYCLMemObjAllocator*>(cl::sycl::detail::SYCLMemObjAllocator*&&)
        jmp     .LBB216_1
.LBB216_1:
        add     rsp, 32
        pop     rbp
        ret
        mov     rdi, rax
        call    __clang_call_terminate
std::remove_reference<std::_Tuple_impl<1ul, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >&>::type&& std::move<std::_Tuple_impl<1ul, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >&>(std::_Tuple_impl<1ul, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
std::_Tuple_impl<0ul, cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::_M_tail(std::_Tuple_impl<0ul, cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
std::_Tuple_impl<1ul, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::_Tuple_impl(std::_Tuple_impl<1ul, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >&&) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 24], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 16]
        call    std::_Tuple_impl<1ul, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::_M_head(std::_Tuple_impl<1ul, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >&)
        mov     rdi, rax
        call    std::default_delete<cl::sycl::detail::SYCLMemObjAllocator>&& std::forward<std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >(std::remove_reference<std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::type&)
        mov     rdi, qword ptr [rbp - 24]       # 8-byte Reload
        mov     rsi, rax
        call    std::_Head_base<1ul, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator>, true>::_Head_base<std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >(std::default_delete<cl::sycl::detail::SYCLMemObjAllocator>&&)
        jmp     .LBB219_1
.LBB219_1:
        add     rsp, 32
        pop     rbp
        ret
        mov     rdi, rax
        call    __clang_call_terminate
cl::sycl::detail::SYCLMemObjAllocator*&& std::forward<cl::sycl::detail::SYCLMemObjAllocator*>(std::remove_reference<cl::sycl::detail::SYCLMemObjAllocator*>::type&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
std::_Tuple_impl<0ul, cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::_M_head(std::_Tuple_impl<0ul, cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::_Head_base<0ul, cl::sycl::detail::SYCLMemObjAllocator*, false>::_M_head(std::_Head_base<0ul, cl::sycl::detail::SYCLMemObjAllocator*, false>&)
        add     rsp, 16
        pop     rbp
        ret
std::_Head_base<0ul, cl::sycl::detail::SYCLMemObjAllocator*, false>::_Head_base<cl::sycl::detail::SYCLMemObjAllocator*>(cl::sycl::detail::SYCLMemObjAllocator*&&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 24], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 16]
        call    cl::sycl::detail::SYCLMemObjAllocator*&& std::forward<cl::sycl::detail::SYCLMemObjAllocator*>(std::remove_reference<cl::sycl::detail::SYCLMemObjAllocator*>::type&)
        mov     rcx, rax
        mov     rax, qword ptr [rbp - 24]       # 8-byte Reload
        mov     rcx, qword ptr [rcx]
        mov     qword ptr [rax], rcx
        add     rsp, 32
        pop     rbp
        ret
std::default_delete<cl::sycl::detail::SYCLMemObjAllocator>&& std::forward<std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >(std::remove_reference<std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::type&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
std::_Tuple_impl<1ul, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::_M_head(std::_Tuple_impl<1ul, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::_Head_base<1ul, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator>, true>::_M_head(std::_Head_base<1ul, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator>, true>&)
        add     rsp, 16
        pop     rbp
        ret
std::_Head_base<1ul, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator>, true>::_Head_base<std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >(std::default_delete<cl::sycl::detail::SYCLMemObjAllocator>&&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 16]
        call    std::default_delete<cl::sycl::detail::SYCLMemObjAllocator>&& std::forward<std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >(std::remove_reference<std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::type&)
        add     rsp, 16
        pop     rbp
        ret
std::_Head_base<1ul, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator>, true>::_M_head(std::_Head_base<1ul, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator>, true>&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
std::_Head_base<0ul, cl::sycl::detail::SYCLMemObjAllocator*, false>::_M_head(std::_Head_base<0ul, cl::sycl::detail::SYCLMemObjAllocator*, false>&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
std::tuple_element<0ul, std::tuple<cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> > >::type& std::get<0ul, cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >(std::tuple<cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    cl::sycl::detail::SYCLMemObjAllocator*& std::__get_helper<0ul, cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >(std::_Tuple_impl<0ul, cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >&)
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::detail::SYCLMemObjAllocator*& std::__get_helper<0ul, cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >(std::_Tuple_impl<0ul, cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::_Tuple_impl<0ul, cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::_M_head(std::_Tuple_impl<0ul, cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >&)
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::detail::SYCLMemObjI::SYCLMemObjI() [base object constructor]:    # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        movabs  rax, offset vtable for cl::sycl::detail::SYCLMemObjI
        add     rax, 16
        mov     qword ptr [rdi], rax
        add     rdi, 8
        call    std::shared_ptr<cl::sycl::detail::MemObjRecord>::shared_ptr() [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::property_list::property_list(cl::sycl::property_list const&) [base object constructor]:     # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     rsi, qword ptr [rbp - 16]
        call    cl::sycl::detail::PropertyListBase::PropertyListBase(cl::sycl::detail::PropertyListBase const&) [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
std::shared_ptr<cl::sycl::detail::event_impl>::shared_ptr(decltype(nullptr)) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        call    std::shared_ptr<cl::sycl::detail::event_impl>::shared_ptr() [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
std::shared_ptr<cl::sycl::detail::context_impl>::shared_ptr(decltype(nullptr)) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        call    std::shared_ptr<cl::sycl::detail::context_impl>::shared_ptr() [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
std::function<void ()>::function(decltype(nullptr)) [base object constructor]:              # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        call    std::_Function_base::_Function_base() [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
std::shared_ptr<void const>::shared_ptr(decltype(nullptr)) [base object constructor]:             # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        call    std::shared_ptr<void const>::shared_ptr() [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
std::shared_ptr<cl::sycl::detail::MemObjRecord>::shared_ptr() [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::__shared_ptr<cl::sycl::detail::MemObjRecord, (__gnu_cxx::_Lock_policy)2>::__shared_ptr() [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::detail::SYCLMemObjI::~SYCLMemObjI() [base object destructor]:    # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        movabs  rax, offset vtable for cl::sycl::detail::SYCLMemObjI
        add     rax, 16
        mov     qword ptr [rdi], rax
        add     rdi, 8
        call    std::shared_ptr<cl::sycl::detail::MemObjRecord>::~shared_ptr() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::detail::SYCLMemObjI::~SYCLMemObjI() [deleting destructor]:    # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        ud2
std::__shared_ptr<cl::sycl::detail::MemObjRecord, (__gnu_cxx::_Lock_policy)2>::__shared_ptr() [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rdi], 0
        add     rdi, 8
        call    std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count() [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::detail::PropertyListBase::PropertyListBase(cl::sycl::detail::PropertyListBase const&) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     rax, qword ptr [rbp - 16]
        mov     rax, qword ptr [rax]
        mov     qword ptr [rdi], rax
        add     rdi, 8
        mov     rsi, qword ptr [rbp - 16]
        add     rsi, 8
        call    std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::vector(std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > > const&) [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::vector(std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > > const&) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 96
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 80], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 16]
        call    std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::size() const
        mov     qword ptr [rbp - 72], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 16]
        call    std::_Vector_base<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::_M_get_Tp_allocator() const
        mov     rsi, rax
        lea     rdi, [rbp - 24]
        mov     qword ptr [rbp - 64], rdi       # 8-byte Spill
        call    __gnu_cxx::__alloc_traits<std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> >, std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> >::_S_select_on_copy(std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > const&)
        mov     rdi, qword ptr [rbp - 80]       # 8-byte Reload
        mov     rsi, qword ptr [rbp - 72]       # 8-byte Reload
        mov     rdx, qword ptr [rbp - 64]       # 8-byte Reload
        call    std::_Vector_base<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::_Vector_base(unsigned long, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > const&) [base object constructor]
        jmp     .LBB241_1
.LBB241_1:
        lea     rdi, [rbp - 24]
        call    std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> >::~allocator() [base object destructor]
        mov     rdi, qword ptr [rbp - 16]
        call    std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::begin() const
        mov     qword ptr [rbp - 48], rax
        mov     rdi, qword ptr [rbp - 16]
        call    std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::end() const
        mov     rdi, qword ptr [rbp - 80]       # 8-byte Reload
        mov     qword ptr [rbp - 56], rax
        mov     rax, qword ptr [rdi]
        mov     qword ptr [rbp - 96], rax       # 8-byte Spill
        call    std::_Vector_base<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::_M_get_Tp_allocator()
        mov     rdx, qword ptr [rbp - 96]       # 8-byte Reload
        mov     rcx, rax
        mov     rdi, qword ptr [rbp - 48]
        mov     rsi, qword ptr [rbp - 56]
        call    std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>* std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> const*, std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > > >, std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>*, std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> >(__gnu_cxx::__normal_iterator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> const*, std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > > >, __gnu_cxx::__normal_iterator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> const*, std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > > >, std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>*, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> >&)
        mov     qword ptr [rbp - 88], rax       # 8-byte Spill
        jmp     .LBB241_2
.LBB241_2:
        mov     rax, qword ptr [rbp - 80]       # 8-byte Reload
        mov     rcx, qword ptr [rbp - 88]       # 8-byte Reload
        mov     qword ptr [rax + 8], rcx
        add     rsp, 96
        pop     rbp
        ret
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 32], rcx
        mov     dword ptr [rbp - 36], eax
        lea     rdi, [rbp - 24]
        call    std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> >::~allocator() [base object destructor]
        jmp     .LBB241_5
        mov     rdi, qword ptr [rbp - 80]       # 8-byte Reload
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 32], rcx
        mov     dword ptr [rbp - 36], eax
        call    std::_Vector_base<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::~_Vector_base() [base object destructor]
.LBB241_5:
        mov     rdi, qword ptr [rbp - 32]
        call    _Unwind_Resume@PLT
std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::size() const: # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rcx, qword ptr [rbp - 8]
        mov     rax, qword ptr [rcx + 8]
        mov     rcx, qword ptr [rcx]
        sub     rax, rcx
        sar     rax, 4
        pop     rbp
        ret
__gnu_cxx::__alloc_traits<std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> >, std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> >::_S_select_on_copy(std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > const&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     rax, rdi
        mov     qword ptr [rbp - 24], rax       # 8-byte Spill
        mov     rax, rdi
        mov     qword ptr [rbp - 8], rax
        mov     qword ptr [rbp - 16], rsi
        mov     rsi, qword ptr [rbp - 16]
        call    std::allocator_traits<std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::select_on_container_copy_construction(std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > const&)
        mov     rax, qword ptr [rbp - 24]       # 8-byte Reload
        add     rsp, 32
        pop     rbp
        ret
std::_Vector_base<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::_M_get_Tp_allocator() const: # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
std::_Vector_base<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::_Vector_base(unsigned long, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > const&) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 48], rdi       # 8-byte Spill
        mov     rsi, qword ptr [rbp - 24]
        call    std::_Vector_base<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::_Vector_impl::_Vector_impl(std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > const&) [base object constructor]
        mov     rdi, qword ptr [rbp - 48]       # 8-byte Reload
        mov     rsi, qword ptr [rbp - 16]
        call    std::_Vector_base<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::_M_create_storage(unsigned long)
        jmp     .LBB245_1
.LBB245_1:
        add     rsp, 48
        pop     rbp
        ret
        mov     rdi, qword ptr [rbp - 48]       # 8-byte Reload
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 32], rcx
        mov     dword ptr [rbp - 36], eax
        call    std::_Vector_base<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::_Vector_impl::~_Vector_impl() [base object destructor]
        mov     rdi, qword ptr [rbp - 32]
        call    _Unwind_Resume@PLT
std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> >::~allocator() [base object destructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    __gnu_cxx::new_allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> >::~new_allocator() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>* std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> const*, std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > > >, std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>*, std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> >(__gnu_cxx::__normal_iterator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> const*, std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > > >, __gnu_cxx::__normal_iterator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> const*, std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > > >, std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>*, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> >&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        mov     qword ptr [rbp - 32], rcx
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 40], rax
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rbp - 48], rax
        mov     rdx, qword ptr [rbp - 24]
        mov     rdi, qword ptr [rbp - 40]
        mov     rsi, qword ptr [rbp - 48]
        call    std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>* std::uninitialized_copy<__gnu_cxx::__normal_iterator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> const*, std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > > >, std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>*>(__gnu_cxx::__normal_iterator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> const*, std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > > >, __gnu_cxx::__normal_iterator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> const*, std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > > >, std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>*)
        add     rsp, 48
        pop     rbp
        ret
std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::begin() const: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 16], rdi
        mov     rsi, qword ptr [rbp - 16]
        lea     rdi, [rbp - 8]
        call    __gnu_cxx::__normal_iterator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> const*, std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > > >::__normal_iterator(std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> const* const&) [base object constructor]
        mov     rax, qword ptr [rbp - 8]
        add     rsp, 16
        pop     rbp
        ret
std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::end() const: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 16], rdi
        mov     rsi, qword ptr [rbp - 16]
        add     rsi, 8
        lea     rdi, [rbp - 8]
        call    __gnu_cxx::__normal_iterator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> const*, std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > > >::__normal_iterator(std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> const* const&) [base object constructor]
        mov     rax, qword ptr [rbp - 8]
        add     rsp, 16
        pop     rbp
        ret
std::allocator_traits<std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::select_on_container_copy_construction(std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > const&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     rax, rdi
        mov     qword ptr [rbp - 24], rax       # 8-byte Spill
        mov     rax, rdi
        mov     qword ptr [rbp - 8], rax
        mov     qword ptr [rbp - 16], rsi
        mov     rsi, qword ptr [rbp - 16]
        call    std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> >::allocator(std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > const&) [base object constructor]
        mov     rax, qword ptr [rbp - 24]       # 8-byte Reload
        add     rsp, 32
        pop     rbp
        ret
std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> >::allocator(std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > const&) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     rsi, qword ptr [rbp - 16]
        call    __gnu_cxx::new_allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> >::new_allocator(__gnu_cxx::new_allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > const&) [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
__gnu_cxx::new_allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> >::new_allocator(__gnu_cxx::new_allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > const&) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        pop     rbp
        ret
std::_Vector_base<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::_Vector_impl::_Vector_impl(std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > const&) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 24], rdi       # 8-byte Spill
        mov     rsi, qword ptr [rbp - 16]
        call    std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> >::allocator(std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > const&) [base object constructor]
        mov     rdi, qword ptr [rbp - 24]       # 8-byte Reload
        call    std::_Vector_base<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::_Vector_impl_data::_Vector_impl_data() [base object constructor]
        add     rsp, 32
        pop     rbp
        ret
std::_Vector_base<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::_M_create_storage(unsigned long): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 24], rdi       # 8-byte Spill
        mov     rsi, qword ptr [rbp - 16]
        call    std::_Vector_base<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::_M_allocate(unsigned long)
        mov     rcx, rax
        mov     rax, qword ptr [rbp - 24]       # 8-byte Reload
        mov     qword ptr [rax], rcx
        mov     rcx, qword ptr [rax]
        mov     qword ptr [rax + 8], rcx
        mov     rcx, qword ptr [rax]
        mov     rdx, qword ptr [rbp - 16]
        shl     rdx, 4
        add     rcx, rdx
        mov     qword ptr [rax + 16], rcx
        add     rsp, 32
        pop     rbp
        ret
std::_Vector_base<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::_M_allocate(unsigned long): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 24], rax       # 8-byte Spill
        cmp     qword ptr [rbp - 16], 0
        je      .LBB255_2
        mov     rdi, qword ptr [rbp - 24]       # 8-byte Reload
        mov     rsi, qword ptr [rbp - 16]
        call    std::allocator_traits<std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::allocate(std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> >&, unsigned long)
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        jmp     .LBB255_3
.LBB255_2:
        xor     eax, eax
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        jmp     .LBB255_3
.LBB255_3:
        mov     rax, qword ptr [rbp - 32]       # 8-byte Reload
        add     rsp, 32
        pop     rbp
        ret
std::allocator_traits<std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::allocate(std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> >&, unsigned long): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     rsi, qword ptr [rbp - 16]
        xor     eax, eax
        mov     edx, eax
        call    __gnu_cxx::new_allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> >::allocate(unsigned long, void const*)
        add     rsp, 16
        pop     rbp
        ret
__gnu_cxx::new_allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> >::allocate(unsigned long, void const*): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        mov     rdi, qword ptr [rbp - 8]
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        call    __gnu_cxx::new_allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> >::_M_max_size() const
        mov     rcx, rax
        mov     rax, qword ptr [rbp - 32]       # 8-byte Reload
        cmp     rax, rcx
        jbe     .LBB257_2
        call    std::__throw_bad_alloc()
.LBB257_2:
        mov     rdi, qword ptr [rbp - 16]
        shl     rdi, 4
        call    operator new(unsigned long)
        add     rsp, 32
        pop     rbp
        ret
__gnu_cxx::new_allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> >::_M_max_size() const: # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        movabs  rax, 576460752303423487
        pop     rbp
        ret
std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>* std::uninitialized_copy<__gnu_cxx::__normal_iterator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> const*, std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > > >, std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>*>(__gnu_cxx::__normal_iterator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> const*, std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > > >, __gnu_cxx::__normal_iterator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> const*, std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > > >, std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>*): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        mov     byte ptr [rbp - 25], 1
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 40], rax
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rbp - 48], rax
        mov     rdx, qword ptr [rbp - 24]
        mov     rdi, qword ptr [rbp - 40]
        mov     rsi, qword ptr [rbp - 48]
        call    std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>* std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> const*, std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > > >, std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>*>(__gnu_cxx::__normal_iterator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> const*, std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > > >, __gnu_cxx::__normal_iterator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> const*, std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > > >, std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>*)
        add     rsp, 48
        pop     rbp
        ret
std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>* std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> const*, std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > > >, std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>*>(__gnu_cxx::__normal_iterator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> const*, std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > > >, __gnu_cxx::__normal_iterator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> const*, std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > > >, std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>*): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 64
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        mov     rax, qword ptr [rbp - 24]
        mov     qword ptr [rbp - 32], rax
.LBB260_1:                              # =>This Inner Loop Header: Depth=1
        lea     rdi, [rbp - 8]
        lea     rsi, [rbp - 16]
        call    bool __gnu_cxx::operator!=<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> const*, std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > > >(__gnu_cxx::__normal_iterator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> const*, std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > > > const&, __gnu_cxx::__normal_iterator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> const*, std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > > > const&)
        test    al, 1
        jne     .LBB260_2
        jmp     .LBB260_8
.LBB260_2:                              #   in Loop: Header=BB260_1 Depth=1
        mov     rdi, qword ptr [rbp - 32]
        call    std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>* std::__addressof<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> >(std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>&)
        mov     qword ptr [rbp - 56], rax       # 8-byte Spill
        lea     rdi, [rbp - 8]
        call    __gnu_cxx::__normal_iterator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> const*, std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > > >::operator*() const
        mov     rdi, qword ptr [rbp - 56]       # 8-byte Reload
        mov     rsi, rax
        call    void std::_Construct<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> const&>(std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>*, std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> const&)
        jmp     .LBB260_3
.LBB260_3:                              #   in Loop: Header=BB260_1 Depth=1
        jmp     .LBB260_4
.LBB260_4:                              #   in Loop: Header=BB260_1 Depth=1
        lea     rdi, [rbp - 8]
        call    __gnu_cxx::__normal_iterator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> const*, std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > > >::operator++()
        mov     rax, qword ptr [rbp - 32]
        add     rax, 16
        mov     qword ptr [rbp - 32], rax
        jmp     .LBB260_1
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 40], rcx
        mov     dword ptr [rbp - 44], eax
        mov     rdi, qword ptr [rbp - 40]
        call    __cxa_begin_catch
        mov     rdi, qword ptr [rbp - 24]
        mov     rsi, qword ptr [rbp - 32]
        call    void std::_Destroy<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>*>(std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>*, std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>*)
        jmp     .LBB260_7
.LBB260_7:
        call    __cxa_rethrow
        jmp     .LBB260_14
.LBB260_8:
        mov     rax, qword ptr [rbp - 32]
        mov     qword ptr [rbp - 64], rax       # 8-byte Spill
        jmp     .LBB260_11
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 40], rcx
        mov     dword ptr [rbp - 44], eax
        call    __cxa_end_catch
        jmp     .LBB260_10
.LBB260_10:
        jmp     .LBB260_12
.LBB260_11:
        mov     rax, qword ptr [rbp - 64]       # 8-byte Reload
        add     rsp, 64
        pop     rbp
        ret
.LBB260_12:
        mov     rdi, qword ptr [rbp - 40]
        call    _Unwind_Resume@PLT
        mov     rdi, rax
        call    __clang_call_terminate
.LBB260_14:
bool __gnu_cxx::operator!=<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> const*, std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > > >(__gnu_cxx::__normal_iterator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> const*, std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > > > const&, __gnu_cxx::__normal_iterator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> const*, std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > > > const&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        call    __gnu_cxx::__normal_iterator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> const*, std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > > >::base() const
        mov     rax, qword ptr [rax]
        mov     qword ptr [rbp - 24], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 16]
        call    __gnu_cxx::__normal_iterator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> const*, std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > > >::base() const
        mov     rcx, rax
        mov     rax, qword ptr [rbp - 24]       # 8-byte Reload
        cmp     rax, qword ptr [rcx]
        setne   al
        and     al, 1
        movzx   eax, al
        add     rsp, 32
        pop     rbp
        ret
void std::_Construct<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> const&>(std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>*, std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> const&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 24], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 16]
        call    std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> const& std::forward<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> const&>(std::remove_reference<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> const&>::type&)
        mov     rdi, qword ptr [rbp - 24]       # 8-byte Reload
        mov     rsi, rax
        call    std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>::shared_ptr(std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> const&) [base object constructor]
        add     rsp, 32
        pop     rbp
        ret
__gnu_cxx::__normal_iterator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> const*, std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > > >::operator*() const: # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        mov     rax, qword ptr [rax]
        pop     rbp
        ret
__gnu_cxx::__normal_iterator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> const*, std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > > >::operator++(): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        mov     rcx, qword ptr [rax]
        add     rcx, 16
        mov     qword ptr [rax], rcx
        pop     rbp
        ret
__gnu_cxx::__normal_iterator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> const*, std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > > >::base() const: # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> const& std::forward<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> const&>(std::remove_reference<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> const&>::type&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>::shared_ptr(std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> const&) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     rsi, qword ptr [rbp - 16]
        call    std::__shared_ptr<cl::sycl::detail::PropertyWithDataBase, (__gnu_cxx::_Lock_policy)2>::__shared_ptr(std::__shared_ptr<cl::sycl::detail::PropertyWithDataBase, (__gnu_cxx::_Lock_policy)2> const&) [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
std::__shared_ptr<cl::sycl::detail::PropertyWithDataBase, (__gnu_cxx::_Lock_policy)2>::__shared_ptr(std::__shared_ptr<cl::sycl::detail::PropertyWithDataBase, (__gnu_cxx::_Lock_policy)2> const&) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     rax, qword ptr [rbp - 16]
        mov     rax, qword ptr [rax]
        mov     qword ptr [rdi], rax
        add     rdi, 8
        mov     rsi, qword ptr [rbp - 16]
        add     rsi, 8
        call    std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count(std::__shared_count<(__gnu_cxx::_Lock_policy)2> const&) [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
__gnu_cxx::__normal_iterator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> const*, std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > > >::__normal_iterator(std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> const* const&) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rax, qword ptr [rbp - 8]
        mov     rcx, qword ptr [rbp - 16]
        mov     rcx, qword ptr [rcx]
        mov     qword ptr [rax], rcx
        pop     rbp
        ret
std::shared_ptr<cl::sycl::detail::event_impl>::shared_ptr() [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::__shared_ptr<cl::sycl::detail::event_impl, (__gnu_cxx::_Lock_policy)2>::__shared_ptr() [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
std::__shared_ptr<cl::sycl::detail::event_impl, (__gnu_cxx::_Lock_policy)2>::__shared_ptr() [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rdi], 0
        add     rdi, 8
        call    std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count() [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
std::shared_ptr<cl::sycl::detail::context_impl>::shared_ptr() [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::__shared_ptr<cl::sycl::detail::context_impl, (__gnu_cxx::_Lock_policy)2>::__shared_ptr() [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
std::__shared_ptr<cl::sycl::detail::context_impl, (__gnu_cxx::_Lock_policy)2>::__shared_ptr() [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rdi], 0
        add     rdi, 8
        call    std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count() [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
std::shared_ptr<void const>::shared_ptr() [base object constructor]:              # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::__shared_ptr<void const, (__gnu_cxx::_Lock_policy)2>::__shared_ptr() [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
std::__shared_ptr<void const, (__gnu_cxx::_Lock_policy)2>::__shared_ptr() [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rdi], 0
        add     rdi, 8
        call    std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count() [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
std::shared_ptr<cl::sycl::detail::MemObjRecord>::~shared_ptr() [base object destructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::__shared_ptr<cl::sycl::detail::MemObjRecord, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
std::__shared_ptr<cl::sycl::detail::MemObjRecord, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() [base object destructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        add     rdi, 8
        call    std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
std::enable_if<std::is_base_of<cl::sycl::detail::DataLessPropertyBase, cl::sycl::ext::oneapi::property::buffer::use_pinned_host_memory>::value, bool>::type cl::sycl::detail::PropertyListBase::has_property_helper<cl::sycl::ext::oneapi::property::buffer::use_pinned_host_memory>() const: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        mov     dword ptr [rbp - 12], 5
        mov     esi, 5
        call    std::bitset<32ul>::operator[](unsigned long) const
        and     al, 1
        movzx   eax, al
        add     rsp, 16
        pop     rbp
        ret
std::bitset<32ul>::operator[](unsigned long) const:               # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     rsi, qword ptr [rbp - 16]
        call    std::bitset<32ul>::_Unchecked_test(unsigned long) const
        and     al, 1
        movzx   eax, al
        add     rsp, 16
        pop     rbp
        ret
std::bitset<32ul>::_Unchecked_test(unsigned long) const: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     rsi, qword ptr [rbp - 16]
        call    std::_Base_bitset<1ul>::_M_getword(unsigned long) const
        mov     qword ptr [rbp - 24], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 16]
        call    std::_Base_bitset<1ul>::_S_maskbit(unsigned long)
        mov     rcx, rax
        mov     rax, qword ptr [rbp - 24]       # 8-byte Reload
        and     rax, rcx
        cmp     rax, 0
        setne   al
        and     al, 1
        movzx   eax, al
        add     rsp, 32
        pop     rbp
        ret
std::_Base_bitset<1ul>::_M_getword(unsigned long) const: # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rax, qword ptr [rbp - 8]
        mov     rax, qword ptr [rax]
        pop     rbp
        ret
std::_Base_bitset<1ul>::_S_maskbit(unsigned long): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::_Base_bitset<1ul>::_S_whichbit(unsigned long)
        mov     rcx, rax
        mov     eax, 1
        shl     rax, cl
        add     rsp, 16
        pop     rbp
        ret
std::_Base_bitset<1ul>::_S_whichbit(unsigned long): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        and     rax, 63
        pop     rbp
        ret
cl::sycl::invalid_object_error::invalid_object_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 64
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     dword ptr [rbp - 20], edx
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 48], rax       # 8-byte Spill
        mov     qword ptr [rbp - 56], rax       # 8-byte Spill
        mov     edi, 8
        call    cl::sycl::make_error_code(cl::sycl::errc)
        mov     rdi, qword ptr [rbp - 56]       # 8-byte Reload
        mov     dword ptr [rbp - 40], eax
        mov     qword ptr [rbp - 32], rdx
        mov     rcx, qword ptr [rbp - 16]
        mov     r8d, dword ptr [rbp - 20]
        mov     esi, dword ptr [rbp - 40]
        mov     rdx, qword ptr [rbp - 32]
        call    cl::sycl::device_error::device_error(std::error_code, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int) [base object constructor]
        mov     rax, qword ptr [rbp - 48]       # 8-byte Reload
        movabs  rcx, offset vtable for cl::sycl::invalid_object_error
        add     rcx, 16
        mov     qword ptr [rax], rcx
        add     rsp, 64
        pop     rbp
        ret
cl::sycl::device_error::device_error(std::error_code, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 128
        mov     dword ptr [rbp - 16], esi
        mov     qword ptr [rbp - 8], rdx
        mov     qword ptr [rbp - 24], rdi
        mov     qword ptr [rbp - 32], rcx
        mov     dword ptr [rbp - 36], r8d
        mov     rax, qword ptr [rbp - 24]
        mov     qword ptr [rbp - 128], rax      # 8-byte Spill
        movups  xmm0, xmmword ptr [rbp - 16]
        movaps  xmmword ptr [rbp - 64], xmm0
        mov     rax, qword ptr [rbp - 32]
        mov     qword ptr [rbp - 120], rax      # 8-byte Spill
        mov     eax, dword ptr [rbp - 36]
        mov     dword ptr [rbp - 108], eax      # 4-byte Spill
        xor     eax, eax
        mov     esi, eax
        lea     rdi, [rbp - 80]
        mov     qword ptr [rbp - 104], rdi      # 8-byte Spill
        call    std::shared_ptr<cl::sycl::context>::shared_ptr(decltype(nullptr)) [base object constructor]
        mov     rdi, qword ptr [rbp - 128]      # 8-byte Reload
        mov     rcx, qword ptr [rbp - 120]      # 8-byte Reload
        mov     r8d, dword ptr [rbp - 108]      # 4-byte Reload
        mov     r9, qword ptr [rbp - 104]       # 8-byte Reload
        mov     esi, dword ptr [rbp - 64]
        mov     rdx, qword ptr [rbp - 56]
        call    cl::sycl::exception::exception(std::error_code, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, std::shared_ptr<cl::sycl::context>) [base object constructor]
        jmp     .LBB285_1
.LBB285_1:
        lea     rdi, [rbp - 80]
        call    std::shared_ptr<cl::sycl::context>::~shared_ptr() [base object destructor]
        mov     rax, qword ptr [rbp - 128]      # 8-byte Reload
        movabs  rcx, offset vtable for cl::sycl::device_error
        add     rcx, 16
        mov     qword ptr [rax], rcx
        add     rsp, 128
        pop     rbp
        ret
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 88], rcx
        mov     dword ptr [rbp - 92], eax
        lea     rdi, [rbp - 80]
        call    std::shared_ptr<cl::sycl::context>::~shared_ptr() [base object destructor]
        mov     rdi, qword ptr [rbp - 88]
        call    _Unwind_Resume@PLT
cl::sycl::invalid_object_error::~invalid_object_error() [deleting destructor]:  # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 16], rdi       # 8-byte Spill
        call    cl::sycl::invalid_object_error::~invalid_object_error() [base object destructor]
        mov     rdi, qword ptr [rbp - 16]       # 8-byte Reload
        call    operator delete(void*)
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::device_error::~device_error() [base object destructor]:          # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    cl::sycl::exception::~exception() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::device_error::~device_error() [deleting destructor]:          # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 16], rdi       # 8-byte Spill
        call    cl::sycl::device_error::~device_error() [base object destructor]
        mov     rdi, qword ptr [rbp - 16]       # 8-byte Reload
        call    operator delete(void*)
        add     rsp, 16
        pop     rbp
        ret
std::enable_if<std::is_pointer<char*>::value, void>::type cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 40], rax       # 8-byte Spill
        cmp     qword ptr [rbp - 16], 0
        jne     .LBB289_2
        mov     rdi, qword ptr [rbp - 40]       # 8-byte Reload
        add     rdi, 136
        xor     eax, eax
        mov     esi, eax
        call    std::function<void ()>::operator=(decltype(nullptr))
        jmp     .LBB289_3
.LBB289_2:
        mov     rdi, qword ptr [rbp - 40]       # 8-byte Reload
        mov     qword ptr [rbp - 32], rdi
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rbp - 24], rax
        add     rdi, 136
        lea     rsi, [rbp - 32]
        call    std::enable_if<std::function<void ()>::_Callable<std::decay<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}>::type, std::__invoke_result<std::decay<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}>::type&> >::value, std::function<void ()>&>::type std::function<void ()>::operator=<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}>(cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}&&)
.LBB289_3:
        add     rsp, 48
        pop     rbp
        ret
cl::sycl::detail::SYCLMemObjT::canReuseHostPtr(void*, unsigned long): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 40], rax       # 8-byte Spill
        mov     rax, qword ptr [rbp - 16]
        xor     ecx, ecx
        mov     edx, ecx
        div     qword ptr [rbp - 24]
        cmp     rdx, 0
        sete    al
        and     al, 1
        mov     byte ptr [rbp - 25], al
        mov     al, 1
        test    byte ptr [rbp - 25], 1
        mov     byte ptr [rbp - 26], al         # 1-byte Spill
        jne     .LBB290_2
        mov     rdi, qword ptr [rbp - 40]       # 8-byte Reload
        call    cl::sycl::detail::SYCLMemObjT::useHostPtr()
        mov     byte ptr [rbp - 26], al         # 1-byte Spill
.LBB290_2:
        mov     al, byte ptr [rbp - 26]         # 1-byte Reload
        and     al, 1
        movzx   eax, al
        add     rsp, 48
        pop     rbp
        ret
cl::sycl::detail::SYCLMemObjT::setAlign(unsigned long): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        add     rdi, 24
        call    std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocator, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::operator->() const
        mov     rdi, rax
        mov     rsi, qword ptr [rbp - 16]
        mov     rax, qword ptr [rdi]
        call    qword ptr [rax + 48]
        add     rsp, 16
        pop     rbp
        ret
std::function<void ()>::operator=(decltype(nullptr)):              # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 24], rax       # 8-byte Spill
        cmp     qword ptr [rax + 16], 0
        je      .LBB292_3
        mov     rsi, qword ptr [rbp - 24]       # 8-byte Reload
        mov     rax, qword ptr [rsi + 16]
        mov     edx, 3
        mov     rdi, rsi
        call    rax
        jmp     .LBB292_2
.LBB292_2:
        mov     rax, qword ptr [rbp - 24]       # 8-byte Reload
        mov     qword ptr [rax + 16], 0
        mov     qword ptr [rax + 24], 0
.LBB292_3:
        mov     rax, qword ptr [rbp - 24]       # 8-byte Reload
        add     rsp, 32
        pop     rbp
        ret
        mov     rdi, rax
        call    __clang_call_terminate
std::enable_if<std::function<void ()>::_Callable<std::decay<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}>::type, std::__invoke_result<std::decay<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}>::type&> >::value, std::function<void ()>&>::type std::function<void ()>::operator=<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}>(cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}&&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 80
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 72], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 16]
        call    cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}&& std::forward<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}>(std::remove_reference<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}>::type&)
        mov     rcx, qword ptr [rax]
        mov     qword ptr [rbp - 64], rcx
        mov     rax, qword ptr [rax + 8]
        mov     qword ptr [rbp - 56], rax
        mov     rsi, qword ptr [rbp - 64]
        mov     rdx, qword ptr [rbp - 56]
        lea     rdi, [rbp - 48]
        call    std::function<void ()>::function<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}, void, void>(cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1})
        mov     rsi, qword ptr [rbp - 72]       # 8-byte Reload
        lea     rdi, [rbp - 48]
        call    std::function<void ()>::swap(std::function<void ()>&)
        lea     rdi, [rbp - 48]
        call    std::function<void ()>::~function() [base object destructor]
        mov     rax, qword ptr [rbp - 72]       # 8-byte Reload
        add     rsp, 80
        pop     rbp
        ret
cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}&& std::forward<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}>(std::remove_reference<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}>::type&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
std::function<void ()>::function<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}, void, void>(cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 8], rdx
        mov     qword ptr [rbp - 24], rdi
        mov     rdi, qword ptr [rbp - 24]
        mov     qword ptr [rbp - 48], rdi       # 8-byte Spill
        call    std::_Function_base::_Function_base() [base object constructor]
        lea     rdi, [rbp - 16]
        call    bool std::_Function_base::_Base_manager<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}>::_M_not_empty_function<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}>(cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1} const&)
        mov     byte ptr [rbp - 37], al         # 1-byte Spill
        jmp     .LBB295_1
.LBB295_1:
        mov     al, byte ptr [rbp - 37]         # 1-byte Reload
        test    al, 1
        jne     .LBB295_2
        jmp     .LBB295_5
.LBB295_2:
        lea     rdi, [rbp - 16]
        call    std::remove_reference<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}&>::type&& std::move<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}&>(cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}&)
        mov     rdi, qword ptr [rbp - 48]       # 8-byte Reload
        mov     rsi, rax
        call    std::_Function_base::_Base_manager<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}>::_M_init_functor(std::_Any_data&, cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}&&)
        jmp     .LBB295_3
.LBB295_3:
        mov     rax, qword ptr [rbp - 48]       # 8-byte Reload
        movabs  rcx, offset std::_Function_handler<void (), cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
        mov     qword ptr [rax + 24], rcx
        movabs  rcx, offset std::_Function_handler<void (), cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
        mov     qword ptr [rax + 16], rcx
        jmp     .LBB295_5
        mov     rdi, qword ptr [rbp - 48]       # 8-byte Reload
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 32], rcx
        mov     dword ptr [rbp - 36], eax
        call    std::_Function_base::~_Function_base() [base object destructor]
        jmp     .LBB295_6
.LBB295_5:
        add     rsp, 48
        pop     rbp
        ret
.LBB295_6:
        mov     rdi, qword ptr [rbp - 32]
        call    _Unwind_Resume@PLT
std::function<void ()>::swap(std::function<void ()>&):         # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 24], rdi       # 8-byte Spill
        mov     rsi, qword ptr [rbp - 16]
        call    std::enable_if<__and_<std::__not_<std::__is_tuple_like<std::_Any_data> >, std::is_move_constructible<std::_Any_data>, std::is_move_assignable<std::_Any_data> >::value, void>::type std::swap<std::_Any_data>(std::_Any_data&, std::_Any_data&)
        mov     rdi, qword ptr [rbp - 24]       # 8-byte Reload
        add     rdi, 16
        mov     rsi, qword ptr [rbp - 16]
        add     rsi, 16
        call    std::enable_if<__and_<std::__not_<std::__is_tuple_like<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >, std::is_move_constructible<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>, std::is_move_assignable<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >::value, void>::type std::swap<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation), bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))
        mov     rdi, qword ptr [rbp - 24]       # 8-byte Reload
        add     rdi, 24
        mov     rsi, qword ptr [rbp - 16]
        add     rsi, 24
        call    std::enable_if<__and_<std::__not_<std::__is_tuple_like<void (*)(std::_Any_data const&)> >, std::is_move_constructible<void (*)(std::_Any_data const&)>, std::is_move_assignable<void (*)(std::_Any_data const&)> >::value, void>::type std::swap<void (*)(std::_Any_data const&)>(void (*&)(std::_Any_data const&), void (*&)(std::_Any_data const&))
        add     rsp, 32
        pop     rbp
        ret
std::function<void ()>::~function() [base object destructor]:               # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::_Function_base::~_Function_base() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
bool std::_Function_base::_Base_manager<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}>::_M_not_empty_function<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}>(cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1} const&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     al, 1
        and     al, 1
        movzx   eax, al
        pop     rbp
        ret
std::_Function_base::_Base_manager<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}>::_M_init_functor(std::_Any_data&, cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}&&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 16]
        call    std::remove_reference<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}&>::type&& std::move<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}&>(cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}&)
        mov     rdi, qword ptr [rbp - 32]       # 8-byte Reload
        mov     rsi, rax
        call    std::_Function_base::_Base_manager<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}>::_M_init_functor(std::_Any_data&, cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}&&, std::integral_constant<bool, true>)
        add     rsp, 32
        pop     rbp
        ret
std::remove_reference<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}&>::type&& std::move<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}&>(cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
std::_Function_handler<void (), cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}>::_M_invoke(std::_Any_data const&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::_Function_base::_Base_manager<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}>::_M_get_pointer(std::_Any_data const&)
        mov     rdi, rax
        call    std::enable_if<is_invocable_r_v<void, cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}&>, void>::type std::__invoke_r<void, cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}&>(cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}&)
        add     rsp, 16
        pop     rbp
        ret
std::_Function_handler<void (), cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     dword ptr [rbp - 20], edx
        mov     eax, dword ptr [rbp - 20]
        mov     dword ptr [rbp - 24], eax       # 4-byte Spill
        test    eax, eax
        je      .LBB302_1
        jmp     .LBB302_5
.LBB302_5:
        mov     eax, dword ptr [rbp - 24]       # 4-byte Reload
        sub     eax, 1
        je      .LBB302_2
        jmp     .LBB302_3
.LBB302_1:
        mov     rdi, qword ptr [rbp - 8]
        call    std::type_info const*& std::_Any_data::_M_access<std::type_info const*>()
        movabs  rcx, offset typeinfo for cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}
        mov     qword ptr [rax], rcx
        jmp     .LBB302_4
.LBB302_2:
        mov     rdi, qword ptr [rbp - 16]
        call    std::_Function_base::_Base_manager<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}>::_M_get_pointer(std::_Any_data const&)
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 8]
        call    cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}*& std::_Any_data::_M_access<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}*>()
        mov     rcx, qword ptr [rbp - 32]       # 8-byte Reload
        mov     qword ptr [rax], rcx
        jmp     .LBB302_4
.LBB302_3:
        mov     rdi, qword ptr [rbp - 8]
        mov     rsi, qword ptr [rbp - 16]
        mov     edx, dword ptr [rbp - 20]
        call    std::_Function_base::_Base_manager<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
.LBB302_4:
        xor     eax, eax
        and     al, 1
        movzx   eax, al
        add     rsp, 32
        pop     rbp
        ret
std::_Function_base::_Base_manager<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}>::_M_init_functor(std::_Any_data&, cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}&&, std::integral_constant<bool, true>): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 16], rdi
        mov     qword ptr [rbp - 24], rsi
        mov     rdi, qword ptr [rbp - 16]
        call    std::_Any_data::_M_access()
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 24]
        call    std::remove_reference<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}&>::type&& std::move<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}&>(cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}&)
        mov     rcx, rax
        mov     rax, qword ptr [rbp - 32]       # 8-byte Reload
        mov     rdx, qword ptr [rcx]
        mov     qword ptr [rax], rdx
        mov     rcx, qword ptr [rcx + 8]
        mov     qword ptr [rax + 8], rcx
        add     rsp, 32
        pop     rbp
        ret
std::_Any_data::_M_access():            # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
std::enable_if<is_invocable_r_v<void, cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}&>, void>::type std::__invoke_r<void, cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}&>(cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}& std::forward<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}&>(std::remove_reference<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}&>::type&)
        mov     rdi, rax
        call    void std::__invoke_impl<void, cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}&>(std::__invoke_other, cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}&)
        add     rsp, 16
        pop     rbp
        ret
std::_Function_base::_Base_manager<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}>::_M_get_pointer(std::_Any_data const&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1} const& std::_Any_data::_M_access<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}>() const
        mov     qword ptr [rbp - 16], rax
        mov     rdi, qword ptr [rbp - 16]
        call    cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1} const* std::__addressof<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1} const>(cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1} const&)
        add     rsp, 16
        pop     rbp
        ret
void std::__invoke_impl<void, cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}&>(std::__invoke_other, cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 16], rdi
        mov     rdi, qword ptr [rbp - 16]
        call    cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}& std::forward<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}&>(std::remove_reference<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}&>::type&)
        mov     rdi, rax
        call    cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}::operator()() const
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}& std::forward<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}&>(std::remove_reference<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}&>::type&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}::operator()() const: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        mov     rdi, qword ptr [rax]
        mov     rsi, qword ptr [rax + 8]
        call    cl::sycl::detail::SYCLMemObjT::updateHostMemory(void*)
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1} const& std::_Any_data::_M_access<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}>() const: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::_Any_data::_M_access() const
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1} const* std::__addressof<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1} const>(cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1} const&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
std::_Any_data::_M_access() const:           # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
std::type_info const*& std::_Any_data::_M_access<std::type_info const*>(): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::_Any_data::_M_access()
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}*& std::_Any_data::_M_access<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}*>(): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::_Any_data::_M_access()
        add     rsp, 16
        pop     rbp
        ret
std::_Function_base::_Base_manager<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     dword ptr [rbp - 20], edx
        mov     eax, dword ptr [rbp - 20]
        mov     qword ptr [rbp - 40], rax       # 8-byte Spill
        sub     rax, 3
        ja      .LBB315_5
        mov     rax, qword ptr [rbp - 40]       # 8-byte Reload
        mov     rax, qword ptr [8*rax + .LJTI315_0]
        jmp     rax
.LBB315_1:
        mov     rdi, qword ptr [rbp - 8]
        call    std::type_info const*& std::_Any_data::_M_access<std::type_info const*>()
        movabs  rcx, offset typeinfo for cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}
        mov     qword ptr [rax], rcx
        jmp     .LBB315_5
.LBB315_2:
        mov     rdi, qword ptr [rbp - 16]
        call    std::_Function_base::_Base_manager<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}>::_M_get_pointer(std::_Any_data const&)
        mov     qword ptr [rbp - 48], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 8]
        call    cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}*& std::_Any_data::_M_access<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}*>()
        mov     rcx, qword ptr [rbp - 48]       # 8-byte Reload
        mov     qword ptr [rax], rcx
        jmp     .LBB315_5
.LBB315_3:
        mov     rdi, qword ptr [rbp - 8]
        mov     rsi, qword ptr [rbp - 16]
        call    std::_Function_base::_Base_manager<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}>::_M_clone(std::_Any_data&, std::_Any_data const&, std::integral_constant<bool, true>)
        jmp     .LBB315_5
.LBB315_4:
        mov     rdi, qword ptr [rbp - 8]
        call    std::_Function_base::_Base_manager<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>)
.LBB315_5:
        xor     eax, eax
        and     al, 1
        movzx   eax, al
        add     rsp, 48
        pop     rbp
        ret
.LJTI315_0:
        .quad   .LBB315_1
        .quad   .LBB315_2
        .quad   .LBB315_3
        .quad   .LBB315_4
        .intel_syntax noprefix
std::_Function_base::_Base_manager<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}>::_M_clone(std::_Any_data&, std::_Any_data const&, std::integral_constant<bool, true>): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 16], rdi
        mov     qword ptr [rbp - 24], rsi
        mov     rdi, qword ptr [rbp - 16]
        call    std::_Any_data::_M_access()
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 24]
        call    cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1} const& std::_Any_data::_M_access<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}>() const
        mov     rcx, rax
        mov     rax, qword ptr [rbp - 32]       # 8-byte Reload
        mov     rdx, qword ptr [rcx]
        mov     qword ptr [rax], rdx
        mov     rcx, qword ptr [rcx + 8]
        mov     qword ptr [rax + 8], rcx
        add     rsp, 32
        pop     rbp
        ret
std::_Function_base::_Base_manager<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 16], rdi
        mov     rdi, qword ptr [rbp - 16]
        call    cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}& std::_Any_data::_M_access<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}>()
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}& std::_Any_data::_M_access<cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}>(): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::_Any_data::_M_access()
        add     rsp, 16
        pop     rbp
        ret
std::enable_if<__and_<std::__not_<std::__is_tuple_like<std::_Any_data> >, std::is_move_constructible<std::_Any_data>, std::is_move_assignable<std::_Any_data> >::value, void>::type std::swap<std::_Any_data>(std::_Any_data&, std::_Any_data&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        call    std::remove_reference<std::_Any_data&>::type&& std::move<std::_Any_data&>(std::_Any_data&)
        mov     rcx, qword ptr [rax]
        mov     qword ptr [rbp - 32], rcx
        mov     rax, qword ptr [rax + 8]
        mov     qword ptr [rbp - 24], rax
        mov     rdi, qword ptr [rbp - 16]
        call    std::remove_reference<std::_Any_data&>::type&& std::move<std::_Any_data&>(std::_Any_data&)
        mov     rcx, rax
        mov     rax, qword ptr [rbp - 8]
        mov     rdx, qword ptr [rcx]
        mov     qword ptr [rax], rdx
        mov     rcx, qword ptr [rcx + 8]
        mov     qword ptr [rax + 8], rcx
        lea     rdi, [rbp - 32]
        call    std::remove_reference<std::_Any_data&>::type&& std::move<std::_Any_data&>(std::_Any_data&)
        mov     rcx, rax
        mov     rax, qword ptr [rbp - 16]
        mov     rdx, qword ptr [rcx]
        mov     qword ptr [rax], rdx
        mov     rcx, qword ptr [rcx + 8]
        mov     qword ptr [rax + 8], rcx
        add     rsp, 32
        pop     rbp
        ret
std::enable_if<__and_<std::__not_<std::__is_tuple_like<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >, std::is_move_constructible<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>, std::is_move_assignable<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >::value, void>::type std::swap<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation), bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        call    std::remove_reference<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>::type&& std::move<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))
        mov     rax, qword ptr [rax]
        mov     qword ptr [rbp - 24], rax
        mov     rdi, qword ptr [rbp - 16]
        call    std::remove_reference<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>::type&& std::move<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))
        mov     rcx, qword ptr [rax]
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rax], rcx
        lea     rdi, [rbp - 24]
        call    std::remove_reference<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>::type&& std::move<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))
        mov     rcx, qword ptr [rax]
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rax], rcx
        add     rsp, 32
        pop     rbp
        ret
std::enable_if<__and_<std::__not_<std::__is_tuple_like<void (*)(std::_Any_data const&)> >, std::is_move_constructible<void (*)(std::_Any_data const&)>, std::is_move_assignable<void (*)(std::_Any_data const&)> >::value, void>::type std::swap<void (*)(std::_Any_data const&)>(void (*&)(std::_Any_data const&), void (*&)(std::_Any_data const&)): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        call    std::remove_reference<void (*&)(std::_Any_data const&)>::type&& std::move<void (*&)(std::_Any_data const&)>(void (*&)(std::_Any_data const&))
        mov     rax, qword ptr [rax]
        mov     qword ptr [rbp - 24], rax
        mov     rdi, qword ptr [rbp - 16]
        call    std::remove_reference<void (*&)(std::_Any_data const&)>::type&& std::move<void (*&)(std::_Any_data const&)>(void (*&)(std::_Any_data const&))
        mov     rcx, qword ptr [rax]
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rax], rcx
        lea     rdi, [rbp - 24]
        call    std::remove_reference<void (*&)(std::_Any_data const&)>::type&& std::move<void (*&)(std::_Any_data const&)>(void (*&)(std::_Any_data const&))
        mov     rcx, qword ptr [rax]
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rax], rcx
        add     rsp, 32
        pop     rbp
        ret
std::remove_reference<std::_Any_data&>::type&& std::move<std::_Any_data&>(std::_Any_data&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
std::remove_reference<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>::type&& std::move<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
std::remove_reference<void (*&)(std::_Any_data const&)>::type&& std::move<void (*&)(std::_Any_data const&)>(void (*&)(std::_Any_data const&)): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
cl::sycl::detail::SYCLMemObjT::useHostPtr(): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 24], rdi       # 8-byte Spill
        call    bool cl::sycl::detail::SYCLMemObjT::has_property<cl::sycl::property::buffer::use_host_ptr>() const
        mov     cl, al
        mov     al, 1
        test    cl, 1
        mov     byte ptr [rbp - 9], al          # 1-byte Spill
        jne     .LBB325_2
        mov     rdi, qword ptr [rbp - 24]       # 8-byte Reload
        call    bool cl::sycl::detail::SYCLMemObjT::has_property<cl::sycl::property::image::use_host_ptr>() const
        mov     byte ptr [rbp - 9], al          # 1-byte Spill
.LBB325_2:
        mov     al, byte ptr [rbp - 9]          # 1-byte Reload
        and     al, 1
        movzx   eax, al
        add     rsp, 32
        pop     rbp
        ret
bool cl::sycl::detail::SYCLMemObjT::has_property<cl::sycl::property::buffer::use_host_ptr>() const: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        add     rdi, 32
        call    bool cl::sycl::property_list::has_property<cl::sycl::property::buffer::use_host_ptr>() const
        and     al, 1
        movzx   eax, al
        add     rsp, 16
        pop     rbp
        ret
bool cl::sycl::detail::SYCLMemObjT::has_property<cl::sycl::property::image::use_host_ptr>() const: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        add     rdi, 32
        call    bool cl::sycl::property_list::has_property<cl::sycl::property::image::use_host_ptr>() const
        and     al, 1
        movzx   eax, al
        add     rsp, 16
        pop     rbp
        ret
bool cl::sycl::property_list::has_property<cl::sycl::property::buffer::use_host_ptr>() const: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::enable_if<std::is_base_of<cl::sycl::detail::DataLessPropertyBase, cl::sycl::property::buffer::use_host_ptr>::value, bool>::type cl::sycl::detail::PropertyListBase::has_property_helper<cl::sycl::property::buffer::use_host_ptr>() const
        and     al, 1
        movzx   eax, al
        add     rsp, 16
        pop     rbp
        ret
std::enable_if<std::is_base_of<cl::sycl::detail::DataLessPropertyBase, cl::sycl::property::buffer::use_host_ptr>::value, bool>::type cl::sycl::detail::PropertyListBase::has_property_helper<cl::sycl::property::buffer::use_host_ptr>() const: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        mov     dword ptr [rbp - 12], 0
        xor     eax, eax
        mov     esi, eax
        call    std::bitset<32ul>::operator[](unsigned long) const
        and     al, 1
        movzx   eax, al
        add     rsp, 16
        pop     rbp
        ret
bool cl::sycl::property_list::has_property<cl::sycl::property::image::use_host_ptr>() const: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::enable_if<std::is_base_of<cl::sycl::detail::DataLessPropertyBase, cl::sycl::property::image::use_host_ptr>::value, bool>::type cl::sycl::detail::PropertyListBase::has_property_helper<cl::sycl::property::image::use_host_ptr>() const
        and     al, 1
        movzx   eax, al
        add     rsp, 16
        pop     rbp
        ret
std::enable_if<std::is_base_of<cl::sycl::detail::DataLessPropertyBase, cl::sycl::property::image::use_host_ptr>::value, bool>::type cl::sycl::detail::PropertyListBase::has_property_helper<cl::sycl::property::image::use_host_ptr>() const: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        mov     dword ptr [rbp - 12], 1
        mov     esi, 1
        call    std::bitset<32ul>::operator[](unsigned long) const
        and     al, 1
        movzx   eax, al
        add     rsp, 16
        pop     rbp
        ret
std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocator, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::operator->() const: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocator, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::get() const
        add     rsp, 16
        pop     rbp
        ret
std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocator, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::get() const: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::__uniq_ptr_impl<cl::sycl::detail::SYCLMemObjAllocator, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::_M_ptr() const
        mov     qword ptr [rbp - 16], rax       # 8-byte Spill
        jmp     .LBB333_1
.LBB333_1:
        mov     rax, qword ptr [rbp - 16]       # 8-byte Reload
        add     rsp, 16
        pop     rbp
        ret
        mov     rdi, rax
        call    __clang_call_terminate
std::__uniq_ptr_impl<cl::sycl::detail::SYCLMemObjAllocator, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::_M_ptr() const: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::tuple_element<0ul, std::tuple<cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> > >::type const& std::get<0ul, cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >(std::tuple<cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> > const&)
        mov     rax, qword ptr [rax]
        add     rsp, 16
        pop     rbp
        ret
std::tuple_element<0ul, std::tuple<cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> > >::type const& std::get<0ul, cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >(std::tuple<cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> > const&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    cl::sycl::detail::SYCLMemObjAllocator* const& std::__get_helper<0ul, cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >(std::_Tuple_impl<0ul, cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> > const&)
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::detail::SYCLMemObjAllocator* const& std::__get_helper<0ul, cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >(std::_Tuple_impl<0ul, cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> > const&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::_Tuple_impl<0ul, cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::_M_head(std::_Tuple_impl<0ul, cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> > const&)
        add     rsp, 16
        pop     rbp
        ret
std::_Tuple_impl<0ul, cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::_M_head(std::_Tuple_impl<0ul, cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> > const&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::_Head_base<0ul, cl::sycl::detail::SYCLMemObjAllocator*, false>::_M_head(std::_Head_base<0ul, cl::sycl::detail::SYCLMemObjAllocator*, false> const&)
        add     rsp, 16
        pop     rbp
        ret
std::_Head_base<0ul, cl::sycl::detail::SYCLMemObjAllocator*, false>::_M_head(std::_Head_base<0ul, cl::sycl::detail::SYCLMemObjAllocator*, false> const&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
std::shared_ptr<void const>::~shared_ptr() [base object destructor]:              # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::__shared_ptr<void const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
std::__shared_ptr<void const, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() [base object destructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        add     rdi, 8
        call    std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocator, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::get_deleter(): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::__uniq_ptr_impl<cl::sycl::detail::SYCLMemObjAllocator, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::_M_deleter()
        mov     qword ptr [rbp - 16], rax       # 8-byte Spill
        jmp     .LBB341_1
.LBB341_1:
        mov     rax, qword ptr [rbp - 16]       # 8-byte Reload
        add     rsp, 16
        pop     rbp
        ret
        mov     rdi, rax
        call    __clang_call_terminate
std::default_delete<cl::sycl::detail::SYCLMemObjAllocator>::operator()(cl::sycl::detail::SYCLMemObjAllocator*) const: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rbp - 24], rax       # 8-byte Spill
        cmp     rax, 0
        je      .LBB342_2
        mov     rdi, qword ptr [rbp - 24]       # 8-byte Reload
        mov     rax, qword ptr [rdi]
        call    qword ptr [rax + 16]
.LBB342_2:
        add     rsp, 32
        pop     rbp
        ret
std::remove_reference<cl::sycl::detail::SYCLMemObjAllocator*&>::type&& std::move<cl::sycl::detail::SYCLMemObjAllocator*&>(cl::sycl::detail::SYCLMemObjAllocator*&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
std::__uniq_ptr_impl<cl::sycl::detail::SYCLMemObjAllocator, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::_M_deleter(): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::tuple_element<1ul, std::tuple<cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> > >::type& std::get<1ul, cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >(std::tuple<cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >&)
        add     rsp, 16
        pop     rbp
        ret
std::tuple_element<1ul, std::tuple<cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> > >::type& std::get<1ul, cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >(std::tuple<cl::sycl::detail::SYCLMemObjAllocator*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::default_delete<cl::sycl::detail::SYCLMemObjAllocator>& std::__get_helper<1ul, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator>>(std::_Tuple_impl<1ul, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator>>&)
        add     rsp, 16
        pop     rbp
        ret
std::default_delete<cl::sycl::detail::SYCLMemObjAllocator>& std::__get_helper<1ul, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator>>(std::_Tuple_impl<1ul, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator>>&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::_Tuple_impl<1ul, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >::_M_head(std::_Tuple_impl<1ul, std::default_delete<cl::sycl::detail::SYCLMemObjAllocator> >&)
        add     rsp, 16
        pop     rbp
        ret
std::_Sp_ebo_helper<0, std::allocator<cl::sycl::detail::buffer_impl>, true>::~_Sp_ebo_helper() [base object destructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::allocator<cl::sycl::detail::buffer_impl>::~allocator() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
__gnu_cxx::new_allocator<cl::sycl::detail::buffer_impl>::~new_allocator() [base object destructor]: # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        pop     rbp
        ret
void std::allocator_traits<std::allocator<cl::sycl::detail::buffer_impl> >::destroy<cl::sycl::detail::buffer_impl>(std::allocator<cl::sycl::detail::buffer_impl>&, cl::sycl::detail::buffer_impl*): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     rsi, qword ptr [rbp - 16]
        call    void __gnu_cxx::new_allocator<cl::sycl::detail::buffer_impl>::destroy<cl::sycl::detail::buffer_impl>(cl::sycl::detail::buffer_impl*)
        add     rsp, 16
        pop     rbp
        ret
std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2>::_Impl::_M_alloc(): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::_Sp_ebo_helper<0, std::allocator<cl::sycl::detail::buffer_impl>, true>::_S_get(std::_Sp_ebo_helper<0, std::allocator<cl::sycl::detail::buffer_impl>, true>&)
        mov     qword ptr [rbp - 16], rax       # 8-byte Spill
        jmp     .LBB350_1
.LBB350_1:
        mov     rax, qword ptr [rbp - 16]       # 8-byte Reload
        add     rsp, 16
        pop     rbp
        ret
        mov     rdi, rax
        call    __clang_call_terminate
void __gnu_cxx::new_allocator<cl::sycl::detail::buffer_impl>::destroy<cl::sycl::detail::buffer_impl>(cl::sycl::detail::buffer_impl*): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 16]
        call    cl::sycl::detail::buffer_impl::~buffer_impl() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::detail::buffer_impl::~buffer_impl() [base object destructor]:    # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 32], rdi       # 8-byte Spill
        call    cl::sycl::detail::SYCLMemObjT::updateHostMemory()
        jmp     .LBB352_1
.LBB352_1:
        jmp     .LBB352_5
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 16], rcx
        mov     dword ptr [rbp - 20], eax
        mov     rdi, qword ptr [rbp - 16]
        call    __cxa_begin_catch
        call    __cxa_end_catch
        jmp     .LBB352_4
.LBB352_4:
        jmp     .LBB352_5
.LBB352_5:
        mov     rsi, qword ptr [rbp - 32]       # 8-byte Reload
        mov     rdi, rsi
        call    cl::sycl::detail::buffer_impl::destructorNotification(void*)
        jmp     .LBB352_6
.LBB352_6:
        mov     rdi, qword ptr [rbp - 32]       # 8-byte Reload
        call    cl::sycl::detail::SYCLMemObjT::~SYCLMemObjT() [base object destructor]
        add     rsp, 32
        pop     rbp
        ret
        mov     rdi, qword ptr [rbp - 32]       # 8-byte Reload
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 16], rcx
        mov     dword ptr [rbp - 20], eax
        call    cl::sycl::detail::SYCLMemObjT::~SYCLMemObjT() [base object destructor]
        mov     rdi, qword ptr [rbp - 16]
        call    __clang_call_terminate
std::_Sp_ebo_helper<0, std::allocator<cl::sycl::detail::buffer_impl>, true>::_S_get(std::_Sp_ebo_helper<0, std::allocator<cl::sycl::detail::buffer_impl>, true>&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
std::_Sp_make_shared_tag::_S_ti():     # 
        push    rbp
        mov     rbp, rsp
        movabs  rax, offset std::_Sp_make_shared_tag::_S_ti()::__tag
        pop     rbp
        ret
std::type_info::operator==(std::type_info const&) const:                # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        mov     rcx, qword ptr [rax + 8]
        mov     rdx, qword ptr [rbp - 16]
        mov     al, 1
        cmp     rcx, qword ptr [rdx + 8]
        mov     byte ptr [rbp - 17], al         # 1-byte Spill
        je      .LBB355_4
        mov     rax, qword ptr [rbp - 32]       # 8-byte Reload
        mov     rax, qword ptr [rax + 8]
        movsx   ecx, byte ptr [rax]
        xor     eax, eax
        cmp     ecx, 42
        mov     byte ptr [rbp - 33], al         # 1-byte Spill
        je      .LBB355_3
        mov     rax, qword ptr [rbp - 32]       # 8-byte Reload
        mov     rdi, qword ptr [rax + 8]
        mov     rax, qword ptr [rbp - 16]
        mov     rsi, qword ptr [rax + 8]
        call    strcmp
        cmp     eax, 0
        sete    al
        mov     byte ptr [rbp - 33], al         # 1-byte Spill
.LBB355_3:
        mov     al, byte ptr [rbp - 33]         # 1-byte Reload
        mov     byte ptr [rbp - 17], al         # 1-byte Spill
.LBB355_4:
        mov     al, byte ptr [rbp - 17]         # 1-byte Reload
        and     al, 1
        movzx   eax, al
        add     rsp, 48
        pop     rbp
        ret
__gnu_cxx::__aligned_buffer<cl::sycl::detail::buffer_impl>::_M_ptr(): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    __gnu_cxx::__aligned_buffer<cl::sycl::detail::buffer_impl>::_M_addr()
        add     rsp, 16
        pop     rbp
        ret
__gnu_cxx::__aligned_buffer<cl::sycl::detail::buffer_impl>::_M_addr(): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2> > >::deallocate(std::allocator<std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2> >&, std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2>*, unsigned long): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        mov     rdi, qword ptr [rbp - 8]
        mov     rsi, qword ptr [rbp - 16]
        mov     rdx, qword ptr [rbp - 24]
        call    __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2> >::deallocate(std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2>*, unsigned long)
        add     rsp, 32
        pop     rbp
        ret
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2> >::deallocate(std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2>*, unsigned long): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        mov     rdi, qword ptr [rbp - 16]
        call    operator delete(void*)
        add     rsp, 32
        pop     rbp
        ret
__gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2> >::~new_allocator() [base object destructor]: # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        pop     rbp
        ret
__gnu_cxx::new_allocator<cl::sycl::detail::buffer_impl>::new_allocator() [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        pop     rbp
        ret
cl::sycl::range<1>::size() const:        # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        mov     qword ptr [rbp - 16], 1
        mov     dword ptr [rbp - 20], 0
.LBB362_1:                              # =>This Inner Loop Header: Depth=1
        cmp     dword ptr [rbp - 20], 1
        jge     .LBB362_4
        mov     rdi, qword ptr [rbp - 32]       # 8-byte Reload
        mov     esi, dword ptr [rbp - 20]
        call    cl::sycl::detail::array<1>::get(int) const
        imul    rax, qword ptr [rbp - 16]
        mov     qword ptr [rbp - 16], rax
        mov     eax, dword ptr [rbp - 20]
        add     eax, 1
        mov     dword ptr [rbp - 20], eax
        jmp     .LBB362_1
.LBB362_4:
        mov     rax, qword ptr [rbp - 16]
        add     rsp, 32
        pop     rbp
        ret
cl::sycl::detail::array<1>::get(int) const:  # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 64
        mov     qword ptr [rbp - 40], rdi
        mov     dword ptr [rbp - 44], esi
        mov     rcx, qword ptr [rbp - 40]
        mov     qword ptr [rbp - 56], rcx       # 8-byte Spill
        mov     eax, dword ptr [rbp - 44]
        mov     qword ptr [rbp - 8], rcx
        mov     dword ptr [rbp - 12], eax
        cmp     dword ptr [rbp - 12], 1
        jge     .LBB363_2
        cmp     dword ptr [rbp - 12], 0
        jge     .LBB363_5
.LBB363_2:
        mov     edi, 64
        call    __cxa_allocate_exception
        mov     rdi, rax
        mov     rax, rdi
        mov     qword ptr [rbp - 64], rax       # 8-byte Spill
        mov     esi, offset .L.str.5
        mov     edx, -30
        call    cl::sycl::invalid_parameter_error::invalid_parameter_error(char const*, int) [base object constructor]
        jmp     .LBB363_3
.LBB363_3:
        mov     rdi, qword ptr [rbp - 64]       # 8-byte Reload
        movabs  rsi, offset typeinfo for cl::sycl::invalid_parameter_error
        movabs  rdx, offset cl::sycl::invalid_parameter_error::~invalid_parameter_error() [base object destructor]
        call    __cxa_throw
        mov     rdi, qword ptr [rbp - 64]       # 8-byte Reload
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 24], rcx
        mov     dword ptr [rbp - 28], eax
        call    __cxa_free_exception
        mov     rdi, qword ptr [rbp - 24]
        call    _Unwind_Resume@PLT
.LBB363_5:
        mov     rax, qword ptr [rbp - 56]       # 8-byte Reload
        movsxd  rcx, dword ptr [rbp - 44]
        mov     rax, qword ptr [rax + 8*rcx]
        add     rsp, 64
        pop     rbp
        ret
cl::sycl::detail::getNextPowerOfTwoHelper(unsigned long, unsigned long): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        cmp     qword ptr [rbp - 16], 64
        je      .LBB364_2
        mov     rdi, qword ptr [rbp - 8]
        mov     rax, qword ptr [rbp - 8]
        mov     rcx, qword ptr [rbp - 16]
        shr     rax, cl
        or      rdi, rax
        mov     rsi, qword ptr [rbp - 16]
        shl     rsi, 1
        call    cl::sycl::detail::getNextPowerOfTwoHelper(unsigned long, unsigned long)
        mov     qword ptr [rbp - 24], rax       # 8-byte Spill
        jmp     .LBB364_3
.LBB364_2:
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 24], rax       # 8-byte Spill
.LBB364_3:
        mov     rax, qword ptr [rbp - 24]       # 8-byte Reload
        add     rsp, 32
        pop     rbp
        ret
cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >::SYCLMemObjAllocatorHolder() [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 16], rdi       # 8-byte Spill
        call    cl::sycl::detail::SYCLMemObjAllocator::SYCLMemObjAllocator() [base object constructor]
        mov     rdi, qword ptr [rbp - 16]       # 8-byte Reload
        movabs  rax, offset vtable for cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >
        add     rax, 16
        mov     qword ptr [rdi], rax
        add     rdi, 8
        mov     qword ptr [rbp - 24], rdi       # 8-byte Spill
        xor     esi, esi
        mov     edx, 8
        call    memset@PLT
        mov     rdi, qword ptr [rbp - 24]       # 8-byte Reload
        call    cl::sycl::detail::aligned_allocator<char>::aligned_allocator() [base object constructor]
        mov     rax, qword ptr [rbp - 16]       # 8-byte Reload
        mov     qword ptr [rax + 16], 1
        add     rsp, 32
        pop     rbp
        ret
std::unique_ptr<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >::unique_ptr<std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > >, void>(cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >*): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     rsi, qword ptr [rbp - 16]
        call    std::__uniq_ptr_data<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > >, true, true>::__uniq_ptr_impl(cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >*)
        jmp     .LBB366_1
.LBB366_1:
        add     rsp, 16
        pop     rbp
        ret
        mov     rdi, rax
        call    __clang_call_terminate
cl::sycl::detail::SYCLMemObjAllocator::SYCLMemObjAllocator() [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        movabs  rcx, offset vtable for cl::sycl::detail::SYCLMemObjAllocator
        add     rcx, 16
        mov     qword ptr [rax], rcx
        pop     rbp
        ret
cl::sycl::detail::aligned_allocator<char>::aligned_allocator() [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rax], 128
        pop     rbp
        ret
cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >::getAllocatorImpl(): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        add     rax, 8
        pop     rbp
        ret
cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >::~SYCLMemObjAllocatorHolder() [base object destructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    cl::sycl::detail::SYCLMemObjAllocator::~SYCLMemObjAllocator() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >::~SYCLMemObjAllocatorHolder() [deleting destructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 16], rdi       # 8-byte Spill
        call    cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >::~SYCLMemObjAllocatorHolder() [base object destructor]
        mov     rdi, qword ptr [rbp - 16]       # 8-byte Reload
        call    operator delete(void*)
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >::allocate(unsigned long): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        add     rdi, 8
        mov     rsi, qword ptr [rbp - 16]
        call    cl::sycl::detail::aligned_allocator<char>::allocate(unsigned long)
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >::deallocate(void*, unsigned long): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        mov     rdi, qword ptr [rbp - 8]
        add     rdi, 8
        mov     rsi, qword ptr [rbp - 16]
        mov     rdx, qword ptr [rbp - 24]
        call    cl::sycl::detail::aligned_allocator<char>::deallocate(char*, unsigned long)
        add     rsp, 32
        pop     rbp
        ret
cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >::getValueSize() const: # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        mov     rax, qword ptr [rax + 16]
        pop     rbp
        ret
cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >::setAlignment(unsigned long): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     rsi, qword ptr [rbp - 16]
        call    std::enable_if<std::is_same<cl::sycl::detail::aligned_allocator<char>, cl::sycl::detail::aligned_allocator<char> >::value, void>::type cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >::setAlignImpl<cl::sycl::detail::aligned_allocator<char> >(unsigned long)
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::detail::SYCLMemObjAllocator::~SYCLMemObjAllocator() [base object destructor]: # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        pop     rbp
        ret
cl::sycl::detail::SYCLMemObjAllocator::~SYCLMemObjAllocator() [deleting destructor]: # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        ud2
cl::sycl::detail::aligned_allocator<char>::allocate(unsigned long): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 64
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rcx, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 40], rcx       # 8-byte Spill
        mov     rax, qword ptr [rbp - 16]
        shl     rax, 0
        mov     qword ptr [rbp - 24], rax
        mov     rax, qword ptr [rbp - 24]
        sub     rax, 1
        mov     rcx, qword ptr [rcx]
        sub     rcx, 1
        or      rax, rcx
        add     rax, 1
        mov     qword ptr [rbp - 24], rax
        mov     rax, qword ptr [rbp - 16]
        cmp     rax, qword ptr [rbp - 24]
        jbe     .LBB378_2
        mov     edi, 8
        call    __cxa_allocate_exception
        mov     rdi, rax
        mov     qword ptr [rbp - 48], rdi       # 8-byte Spill
        call    std::bad_alloc::bad_alloc() [base object constructor]
        mov     rdi, qword ptr [rbp - 48]       # 8-byte Reload
        movabs  rsi, offset typeinfo for std::bad_alloc
        movabs  rdx, offset std::bad_alloc::~bad_alloc() [complete object destructor]
        call    __cxa_throw
.LBB378_2:
        mov     rax, qword ptr [rbp - 40]       # 8-byte Reload
        mov     rdi, qword ptr [rax]
        mov     rsi, qword ptr [rbp - 24]
        call    cl::sycl::detail::OSUtil::alignedAlloc(unsigned long, unsigned long)
        mov     qword ptr [rbp - 32], rax
        cmp     qword ptr [rbp - 32], 0
        jne     .LBB378_4
        mov     edi, 8
        call    __cxa_allocate_exception
        mov     rdi, rax
        mov     qword ptr [rbp - 56], rdi       # 8-byte Spill
        call    std::bad_alloc::bad_alloc() [base object constructor]
        mov     rdi, qword ptr [rbp - 56]       # 8-byte Reload
        movabs  rsi, offset typeinfo for std::bad_alloc
        movabs  rdx, offset std::bad_alloc::~bad_alloc() [complete object destructor]
        call    __cxa_throw
.LBB378_4:
        mov     rax, qword ptr [rbp - 32]
        add     rsp, 64
        pop     rbp
        ret
std::bad_alloc::bad_alloc() [base object constructor]:                    # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 16], rdi       # 8-byte Spill
        call    std::exception::exception() [base object constructor]
        mov     rax, qword ptr [rbp - 16]       # 8-byte Reload
        movabs  rcx, offset vtable for std::bad_alloc
        add     rcx, 16
        mov     qword ptr [rax], rcx
        add     rsp, 16
        pop     rbp
        ret
std::exception::exception() [base object constructor]:                    # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        movabs  rcx, offset vtable for std::exception
        add     rcx, 16
        mov     qword ptr [rax], rcx
        pop     rbp
        ret
cl::sycl::detail::aligned_allocator<char>::deallocate(char*, unsigned long): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        cmp     qword ptr [rbp - 16], 0
        je      .LBB381_2
        mov     rdi, qword ptr [rbp - 16]
        call    cl::sycl::detail::OSUtil::alignedFree(void*)
.LBB381_2:
        add     rsp, 32
        pop     rbp
        ret
std::enable_if<std::is_same<cl::sycl::detail::aligned_allocator<char>, cl::sycl::detail::aligned_allocator<char> >::value, void>::type cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >::setAlignImpl<cl::sycl::detail::aligned_allocator<char> >(unsigned long): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rax, qword ptr [rbp - 8]
        add     rax, 8
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        mov     qword ptr [rbp - 24], 64
        lea     rdi, [rbp - 16]
        lea     rsi, [rbp - 24]
        call    unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)
        mov     rdi, qword ptr [rbp - 32]       # 8-byte Reload
        mov     rsi, qword ptr [rax]
        call    cl::sycl::detail::aligned_allocator<char>::setAlignment(unsigned long)
        add     rsp, 32
        pop     rbp
        ret
cl::sycl::detail::aligned_allocator<char>::setAlignment(unsigned long): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rax, qword ptr [rbp - 8]
        mov     rcx, qword ptr [rbp - 16]
        mov     qword ptr [rax], rcx
        pop     rbp
        ret
unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&):                  # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 16], rdi
        mov     qword ptr [rbp - 24], rsi
        mov     rax, qword ptr [rbp - 16]
        mov     rax, qword ptr [rax]
        mov     rcx, qword ptr [rbp - 24]
        cmp     rax, qword ptr [rcx]
        jae     .LBB384_2
        mov     rax, qword ptr [rbp - 24]
        mov     qword ptr [rbp - 8], rax
        jmp     .LBB384_3
.LBB384_2:
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rbp - 8], rax
.LBB384_3:
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
std::__uniq_ptr_data<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > >, true, true>::__uniq_ptr_impl(cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >*): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     rsi, qword ptr [rbp - 16]
        call    std::__uniq_ptr_impl<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >::__uniq_ptr_impl(cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >*) [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
std::__uniq_ptr_impl<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >::__uniq_ptr_impl(cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >*) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 32], rdi       # 8-byte Spill
        call    std::tuple<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >::tuple<true, true>()
        mov     rdi, qword ptr [rbp - 32]       # 8-byte Reload
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rbp - 24], rax       # 8-byte Spill
        call    std::__uniq_ptr_impl<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >::_M_ptr()
        mov     rcx, qword ptr [rbp - 24]       # 8-byte Reload
        mov     qword ptr [rax], rcx
        add     rsp, 32
        pop     rbp
        ret
std::tuple<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >::tuple<true, true>(): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::_Tuple_impl<0ul, cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >::_Tuple_impl() [base object constructor]
        jmp     .LBB387_1
.LBB387_1:
        add     rsp, 16
        pop     rbp
        ret
        mov     rdi, rax
        call    __clang_call_terminate
std::_Tuple_impl<0ul, cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >*, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >::_Tuple_impl() [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 16], rdi       # 8-byte Spill
        call    std::_Tuple_impl<1ul, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >::_Tuple_impl() [base object constructor]
        mov     rdi, qword ptr [rbp - 16]       # 8-byte Reload
        call    std::_Head_base<0ul, cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >*, false>::_Head_base() [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
std::_Tuple_impl<1ul, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > > >::_Tuple_impl() [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::_Head_base<1ul, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > >, true>::_Head_base() [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
std::_Head_base<0ul, cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >*, false>::_Head_base() [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rax], 0
        pop     rbp
        ret
std::_Head_base<1ul, std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > >, true>::_Head_base() [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        pop     rbp
        ret
std::__shared_ptr<cl::sycl::detail::buffer_impl, (__gnu_cxx::_Lock_policy)2>::operator=(std::__shared_ptr<cl::sycl::detail::buffer_impl, (__gnu_cxx::_Lock_policy)2>&&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 40], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 16]
        call    std::remove_reference<std::__shared_ptr<cl::sycl::detail::buffer_impl, (__gnu_cxx::_Lock_policy)2>&>::type&& std::move<std::__shared_ptr<cl::sycl::detail::buffer_impl, (__gnu_cxx::_Lock_policy)2>&>(std::__shared_ptr<cl::sycl::detail::buffer_impl, (__gnu_cxx::_Lock_policy)2>&)
        mov     rsi, rax
        lea     rdi, [rbp - 32]
        call    std::__shared_ptr<cl::sycl::detail::buffer_impl, (__gnu_cxx::_Lock_policy)2>::__shared_ptr(std::__shared_ptr<cl::sycl::detail::buffer_impl, (__gnu_cxx::_Lock_policy)2>&&) [base object constructor]
        mov     rsi, qword ptr [rbp - 40]       # 8-byte Reload
        lea     rdi, [rbp - 32]
        call    std::__shared_ptr<cl::sycl::detail::buffer_impl, (__gnu_cxx::_Lock_policy)2>::swap(std::__shared_ptr<cl::sycl::detail::buffer_impl, (__gnu_cxx::_Lock_policy)2>&)
        lea     rdi, [rbp - 32]
        call    std::__shared_ptr<cl::sycl::detail::buffer_impl, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() [base object destructor]
        mov     rax, qword ptr [rbp - 40]       # 8-byte Reload
        add     rsp, 48
        pop     rbp
        ret
std::remove_reference<std::shared_ptr<cl::sycl::detail::buffer_impl>&>::type&& std::move<std::shared_ptr<cl::sycl::detail::buffer_impl>&>(std::shared_ptr<cl::sycl::detail::buffer_impl>&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
std::remove_reference<std::__shared_ptr<cl::sycl::detail::buffer_impl, (__gnu_cxx::_Lock_policy)2>&>::type&& std::move<std::__shared_ptr<cl::sycl::detail::buffer_impl, (__gnu_cxx::_Lock_policy)2>&>(std::__shared_ptr<cl::sycl::detail::buffer_impl, (__gnu_cxx::_Lock_policy)2>&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
std::__shared_ptr<cl::sycl::detail::buffer_impl, (__gnu_cxx::_Lock_policy)2>::__shared_ptr(std::__shared_ptr<cl::sycl::detail::buffer_impl, (__gnu_cxx::_Lock_policy)2>&&) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 24], rdi       # 8-byte Spill
        mov     rax, qword ptr [rbp - 16]
        mov     rax, qword ptr [rax]
        mov     qword ptr [rdi], rax
        add     rdi, 8
        call    std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count() [base object constructor]
        mov     rdi, qword ptr [rbp - 24]       # 8-byte Reload
        add     rdi, 8
        mov     rsi, qword ptr [rbp - 16]
        add     rsi, 8
        call    std::__shared_count<(__gnu_cxx::_Lock_policy)2>::_M_swap(std::__shared_count<(__gnu_cxx::_Lock_policy)2>&)
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rax], 0
        add     rsp, 32
        pop     rbp
        ret
std::__shared_ptr<cl::sycl::detail::buffer_impl, (__gnu_cxx::_Lock_policy)2>::swap(std::__shared_ptr<cl::sycl::detail::buffer_impl, (__gnu_cxx::_Lock_policy)2>&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 24], rdi       # 8-byte Spill
        mov     rsi, qword ptr [rbp - 16]
        call    std::enable_if<__and_<std::__not_<std::__is_tuple_like<cl::sycl::detail::buffer_impl*> >, std::is_move_constructible<cl::sycl::detail::buffer_impl*>, std::is_move_assignable<cl::sycl::detail::buffer_impl*> >::value, void>::type std::swap<cl::sycl::detail::buffer_impl*>(cl::sycl::detail::buffer_impl*&, cl::sycl::detail::buffer_impl*&)
        mov     rdi, qword ptr [rbp - 24]       # 8-byte Reload
        add     rdi, 8
        mov     rsi, qword ptr [rbp - 16]
        add     rsi, 8
        call    std::__shared_count<(__gnu_cxx::_Lock_policy)2>::_M_swap(std::__shared_count<(__gnu_cxx::_Lock_policy)2>&)
        add     rsp, 32
        pop     rbp
        ret
std::__shared_ptr<cl::sycl::detail::buffer_impl, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() [base object destructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        add     rdi, 8
        call    std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
std::__shared_count<(__gnu_cxx::_Lock_policy)2>::_M_swap(std::__shared_count<(__gnu_cxx::_Lock_policy)2>&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rax, qword ptr [rbp - 8]
        mov     rcx, qword ptr [rbp - 16]
        mov     rcx, qword ptr [rcx]
        mov     qword ptr [rbp - 24], rcx
        mov     rdx, qword ptr [rax]
        mov     rcx, qword ptr [rbp - 16]
        mov     qword ptr [rcx], rdx
        mov     rcx, qword ptr [rbp - 24]
        mov     qword ptr [rax], rcx
        pop     rbp
        ret
std::enable_if<__and_<std::__not_<std::__is_tuple_like<cl::sycl::detail::buffer_impl*> >, std::is_move_constructible<cl::sycl::detail::buffer_impl*>, std::is_move_assignable<cl::sycl::detail::buffer_impl*> >::value, void>::type std::swap<cl::sycl::detail::buffer_impl*>(cl::sycl::detail::buffer_impl*&, cl::sycl::detail::buffer_impl*&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        call    std::remove_reference<cl::sycl::detail::buffer_impl*&>::type&& std::move<cl::sycl::detail::buffer_impl*&>(cl::sycl::detail::buffer_impl*&)
        mov     rax, qword ptr [rax]
        mov     qword ptr [rbp - 24], rax
        mov     rdi, qword ptr [rbp - 16]
        call    std::remove_reference<cl::sycl::detail::buffer_impl*&>::type&& std::move<cl::sycl::detail::buffer_impl*&>(cl::sycl::detail::buffer_impl*&)
        mov     rcx, qword ptr [rax]
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rax], rcx
        lea     rdi, [rbp - 24]
        call    std::remove_reference<cl::sycl::detail::buffer_impl*&>::type&& std::move<cl::sycl::detail::buffer_impl*&>(cl::sycl::detail::buffer_impl*&)
        mov     rcx, qword ptr [rax]
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rax], rcx
        add     rsp, 32
        pop     rbp
        ret
std::remove_reference<cl::sycl::detail::buffer_impl*&>::type&& std::move<cl::sycl::detail::buffer_impl*&>(cl::sycl::detail::buffer_impl*&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
std::default_delete<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> > >::operator()(cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >*) const: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rbp - 24], rax       # 8-byte Spill
        cmp     rax, 0
        je      .LBB401_2
        mov     rdi, qword ptr [rbp - 24]       # 8-byte Reload
        mov     rax, qword ptr [rdi]
        call    qword ptr [rax + 16]
.LBB401_2:
        add     rsp, 32
        pop     rbp
        ret
std::remove_reference<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >*&>::type&& std::move<cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >*&>(cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >*&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
std::__shared_ptr_access<cl::sycl::detail::buffer_impl, (__gnu_cxx::_Lock_policy)2, false, false>::_M_get() const: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::__shared_ptr<cl::sycl::detail::buffer_impl, (__gnu_cxx::_Lock_policy)2>::get() const
        add     rsp, 16
        pop     rbp
        ret
std::__array_traits<unsigned long, 3ul>::_S_ptr(unsigned long const (&) [3]): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
std::function<void (cl::sycl::handler&)>::function<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}, void, void>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        mov     qword ptr [rbp - 8], rsi
        mov     qword ptr [rbp - 16], rdi
        mov     rdi, qword ptr [rbp - 16]
        mov     qword ptr [rbp - 40], rdi       # 8-byte Spill
        call    std::_Function_base::_Function_base() [base object constructor]
        lea     rdi, [rbp - 8]
        call    bool std::_Function_base::_Base_manager<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}>::_M_not_empty_function<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1} const&)
        mov     byte ptr [rbp - 29], al         # 1-byte Spill
        jmp     .LBB405_1
.LBB405_1:
        mov     al, byte ptr [rbp - 29]         # 1-byte Reload
        test    al, 1
        jne     .LBB405_2
        jmp     .LBB405_5
.LBB405_2:
        lea     rdi, [rbp - 8]
        call    std::remove_reference<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}&>::type&& std::move<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}&>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}&)
        mov     rdi, qword ptr [rbp - 40]       # 8-byte Reload
        mov     rsi, rax
        call    std::_Function_base::_Base_manager<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}>::_M_init_functor(std::_Any_data&, call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}&&)
        jmp     .LBB405_3
.LBB405_3:
        mov     rax, qword ptr [rbp - 40]       # 8-byte Reload
        movabs  rcx, offset std::_Function_handler<void (cl::sycl::handler&), call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}>::_M_invoke(std::_Any_data const&, cl::sycl::handler&)
        mov     qword ptr [rax + 24], rcx
        movabs  rcx, offset std::_Function_handler<void (cl::sycl::handler&), call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
        mov     qword ptr [rax + 16], rcx
        jmp     .LBB405_5
        mov     rdi, qword ptr [rbp - 40]       # 8-byte Reload
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 24], rcx
        mov     dword ptr [rbp - 28], eax
        call    std::_Function_base::~_Function_base() [base object destructor]
        jmp     .LBB405_6
.LBB405_5:
        add     rsp, 48
        pop     rbp
        ret
.LBB405_6:
        mov     rdi, qword ptr [rbp - 24]
        call    _Unwind_Resume@PLT
std::function<void (cl::sycl::handler&)>::~function() [base object destructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::_Function_base::~_Function_base() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
bool std::_Function_base::_Base_manager<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}>::_M_not_empty_function<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1} const&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     al, 1
        and     al, 1
        movzx   eax, al
        pop     rbp
        ret
std::_Function_base::_Base_manager<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}>::_M_init_functor(std::_Any_data&, call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}&&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 16]
        call    std::remove_reference<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}&>::type&& std::move<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}&>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}&)
        mov     rdi, qword ptr [rbp - 32]       # 8-byte Reload
        mov     rsi, rax
        call    std::_Function_base::_Base_manager<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}>::_M_init_functor(std::_Any_data&, call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}&&, std::integral_constant<bool, true>)
        add     rsp, 32
        pop     rbp
        ret
std::remove_reference<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}&>::type&& std::move<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}&>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
std::_Function_handler<void (cl::sycl::handler&), call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}>::_M_invoke(std::_Any_data const&, cl::sycl::handler&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        call    std::_Function_base::_Base_manager<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}>::_M_get_pointer(std::_Any_data const&)
        mov     qword ptr [rbp - 24], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 16]
        call    cl::sycl::handler& std::forward<cl::sycl::handler&>(std::remove_reference<cl::sycl::handler&>::type&)
        mov     rdi, qword ptr [rbp - 24]       # 8-byte Reload
        mov     rsi, rax
        call    std::enable_if<is_invocable_r_v<void, call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}&, cl::sycl::handler&>, void>::type std::__invoke_r<void, call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}&, cl::sycl::handler&>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}&, cl::sycl::handler&)
        add     rsp, 32
        pop     rbp
        ret
std::_Function_handler<void (cl::sycl::handler&), call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     dword ptr [rbp - 20], edx
        mov     eax, dword ptr [rbp - 20]
        mov     dword ptr [rbp - 24], eax       # 4-byte Spill
        test    eax, eax
        je      .LBB411_1
        jmp     .LBB411_5
.LBB411_5:
        mov     eax, dword ptr [rbp - 24]       # 4-byte Reload
        sub     eax, 1
        je      .LBB411_2
        jmp     .LBB411_3
.LBB411_1:
        mov     rdi, qword ptr [rbp - 8]
        call    std::type_info const*& std::_Any_data::_M_access<std::type_info const*>()
        movabs  rcx, offset typeinfo for call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}
        mov     qword ptr [rax], rcx
        jmp     .LBB411_4
.LBB411_2:
        mov     rdi, qword ptr [rbp - 16]
        call    std::_Function_base::_Base_manager<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}>::_M_get_pointer(std::_Any_data const&)
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 8]
        call    call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}*& std::_Any_data::_M_access<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}*>()
        mov     rcx, qword ptr [rbp - 32]       # 8-byte Reload
        mov     qword ptr [rax], rcx
        jmp     .LBB411_4
.LBB411_3:
        mov     rdi, qword ptr [rbp - 8]
        mov     rsi, qword ptr [rbp - 16]
        mov     edx, dword ptr [rbp - 20]
        call    std::_Function_base::_Base_manager<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
.LBB411_4:
        xor     eax, eax
        and     al, 1
        movzx   eax, al
        add     rsp, 32
        pop     rbp
        ret
std::_Function_base::_Base_manager<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}>::_M_init_functor(std::_Any_data&, call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}&&, std::integral_constant<bool, true>): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 16], rdi
        mov     qword ptr [rbp - 24], rsi
        mov     rdi, qword ptr [rbp - 16]
        call    std::_Any_data::_M_access()
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 24]
        call    std::remove_reference<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}&>::type&& std::move<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}&>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}&)
        mov     rcx, rax
        mov     rax, qword ptr [rbp - 32]       # 8-byte Reload
        mov     rcx, qword ptr [rcx]
        mov     qword ptr [rax], rcx
        add     rsp, 32
        pop     rbp
        ret
std::enable_if<is_invocable_r_v<void, call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}&, cl::sycl::handler&>, void>::type std::__invoke_r<void, call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}&, cl::sycl::handler&>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}&, cl::sycl::handler&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        call    call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}& std::forward<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}&>(std::remove_reference<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}&>::type&)
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 16]
        call    cl::sycl::handler& std::forward<cl::sycl::handler&>(std::remove_reference<cl::sycl::handler&>::type&)
        mov     rdi, qword ptr [rbp - 32]       # 8-byte Reload
        mov     rsi, rax
        call    void std::__invoke_impl<void, call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}&, cl::sycl::handler&>(std::__invoke_other, call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}&, cl::sycl::handler&)
        add     rsp, 32
        pop     rbp
        ret
std::_Function_base::_Base_manager<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}>::_M_get_pointer(std::_Any_data const&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    call_command_queue(int*)::{lambda(cl::sycl::handler&)#1} const& std::_Any_data::_M_access<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}>() const
        mov     qword ptr [rbp - 16], rax
        mov     rdi, qword ptr [rbp - 16]
        call    call_command_queue(int*)::{lambda(cl::sycl::handler&)#1} const* std::__addressof<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1} const>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1} const&)
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::handler& std::forward<cl::sycl::handler&>(std::remove_reference<cl::sycl::handler&>::type&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
void std::__invoke_impl<void, call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}&, cl::sycl::handler&>(std::__invoke_other, call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}&, cl::sycl::handler&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 16], rdi
        mov     qword ptr [rbp - 24], rsi
        mov     rdi, qword ptr [rbp - 16]
        call    call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}& std::forward<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}&>(std::remove_reference<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}&>::type&)
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 24]
        call    cl::sycl::handler& std::forward<cl::sycl::handler&>(std::remove_reference<cl::sycl::handler&>::type&)
        mov     rdi, qword ptr [rbp - 32]       # 8-byte Reload
        mov     rsi, rax
        call    call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const
        add     rsp, 32
        pop     rbp
        ret
call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}& std::forward<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}&>(std::remove_reference<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}&>::type&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 352
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rax, qword ptr [rbp - 8]
        mov     rax, qword ptr [rax]
        mov     qword ptr [rbp - 272], rax      # 8-byte Spill
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rbp - 264], rax      # 8-byte Spill
        mov     esi, offset .L.str.2
        mov     edx, offset .L.str.12
        lea     rdi, [rbp - 80]
        mov     ecx, 41
        mov     r8d, 22
        call    cl::sycl::detail::code_location::current(char const*, char const*, unsigned long, unsigned long)
        mov     rsi, qword ptr [rbp - 272]      # 8-byte Reload
        mov     rdx, qword ptr [rbp - 264]      # 8-byte Reload
        movups  xmm0, xmmword ptr [rbp - 80]
        movups  xmm1, xmmword ptr [rbp - 64]
        mov     rax, rsp
        movups  xmmword ptr [rax + 16], xmm1
        movups  xmmword ptr [rax], xmm0
        lea     rdi, [rbp - 48]
        call    cl::sycl::accessor<int, 1, (cl::sycl::access::mode)1026, (cl::sycl::access::target)2014, (cl::sycl::access::placeholder)0, cl::sycl::ext::oneapi::accessor_property_list<> > cl::sycl::buffer<int, 1, cl::sycl::detail::aligned_allocator<char>, void>::get_access<(cl::sycl::access::mode)1026, (cl::sycl::access::target)2014>(cl::sycl::handler&, cl::sycl::detail::code_location)
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rbp - 256], rax      # 8-byte Spill
        lea     rdi, [rbp - 176]
        mov     edx, 1
        mov     ecx, 128
        mov     rsi, rdx
        call    cl::sycl::range<3>::range<3>(std::enable_if<(3)==(3), unsigned long>::type, unsigned long, unsigned long)
        jmp     .LBB418_1
.LBB418_1:
        lea     rdi, [rbp - 216]
        mov     edx, 1
        mov     ecx, 128
        mov     rsi, rdx
        call    cl::sycl::range<3>::range<3>(std::enable_if<(3)==(3), unsigned long>::type, unsigned long, unsigned long)
        jmp     .LBB418_2
.LBB418_2:
        mov     rcx, qword ptr [rbp - 200]
        mov     rax, rsp
        mov     qword ptr [rax + 40], rcx
        movups  xmm0, xmmword ptr [rbp - 216]
        movups  xmmword ptr [rax + 24], xmm0
        mov     rcx, qword ptr [rbp - 160]
        mov     qword ptr [rax + 16], rcx
        movups  xmm0, xmmword ptr [rbp - 176]
        movups  xmmword ptr [rax], xmm0
        lea     rdi, [rbp - 152]
        call    cl::sycl::nd_range<3>::nd_range(cl::sycl::range<3>, cl::sycl::range<3>) [base object constructor]
        jmp     .LBB418_3
.LBB418_3:
        lea     rdi, [rbp - 248]
        mov     qword ptr [rbp - 280], rdi      # 8-byte Spill
        lea     rsi, [rbp - 48]
        call    cl::sycl::accessor<int, 1, (cl::sycl::access::mode)1026, (cl::sycl::access::target)2014, (cl::sycl::access::placeholder)0, cl::sycl::ext::oneapi::accessor_property_list<> >::accessor(cl::sycl::accessor<int, 1, (cl::sycl::access::mode)1026, (cl::sycl::access::target)2014, (cl::sycl::access::placeholder)0, cl::sycl::ext::oneapi::accessor_property_list<> > const&) [base object constructor]
        mov     rdi, qword ptr [rbp - 256]      # 8-byte Reload
        mov     rsi, qword ptr [rbp - 280]      # 8-byte Reload
        mov     rcx, qword ptr [rbp - 88]
        mov     rax, rsp
        mov     qword ptr [rax + 64], rcx
        movups  xmm0, xmmword ptr [rbp - 152]
        movups  xmm1, xmmword ptr [rbp - 136]
        movups  xmm2, xmmword ptr [rbp - 120]
        movups  xmm3, xmmword ptr [rbp - 104]
        movups  xmmword ptr [rax + 48], xmm3
        movups  xmmword ptr [rax + 32], xmm2
        movups  xmmword ptr [rax + 16], xmm1
        movups  xmmword ptr [rax], xmm0
        call    void cl::sycl::handler::parallel_for<cl::sycl::detail::auto_name, call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, 3>(cl::sycl::nd_range<3>, call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)
        jmp     .LBB418_4
.LBB418_4:
        lea     rdi, [rbp - 248]
        call    call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}::~nd_item() [base object destructor]
        lea     rdi, [rbp - 48]
        call    cl::sycl::accessor<int, 1, (cl::sycl::access::mode)1026, (cl::sycl::access::target)2014, (cl::sycl::access::placeholder)0, cl::sycl::ext::oneapi::accessor_property_list<> >::~accessor() [base object destructor]
        add     rsp, 352
        pop     rbp
        ret
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 184], rcx
        mov     dword ptr [rbp - 188], eax
        jmp     .LBB418_7
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 184], rcx
        mov     dword ptr [rbp - 188], eax
        lea     rdi, [rbp - 248]
        call    call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}::~nd_item() [base object destructor]
.LBB418_7:
        lea     rdi, [rbp - 48]
        call    cl::sycl::accessor<int, 1, (cl::sycl::access::mode)1026, (cl::sycl::access::target)2014, (cl::sycl::access::placeholder)0, cl::sycl::ext::oneapi::accessor_property_list<> >::~accessor() [base object destructor]
        mov     rdi, qword ptr [rbp - 184]
        call    _Unwind_Resume@PLT
cl::sycl::accessor<int, 1, (cl::sycl::access::mode)1026, (cl::sycl::access::target)2014, (cl::sycl::access::placeholder)0, cl::sycl::ext::oneapi::accessor_property_list<> > cl::sycl::buffer<int, 1, cl::sycl::detail::aligned_allocator<char>, void>::get_access<(cl::sycl::access::mode)1026, (cl::sycl::access::target)2014>(cl::sycl::handler&, cl::sycl::detail::code_location): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 192
        mov     qword ptr [rbp - 144], rdi      # 8-byte Spill
        mov     rax, rdi
        mov     qword ptr [rbp - 160], rax      # 8-byte Spill
        lea     rax, [rbp + 16]
        mov     qword ptr [rbp - 152], rax      # 8-byte Spill
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rbp - 136], rax      # 8-byte Spill
        mov     rax, qword ptr [rbp - 24]
        mov     qword ptr [rbp - 128], rax      # 8-byte Spill
        lea     rdi, [rbp - 56]
        mov     qword ptr [rbp - 120], rdi      # 8-byte Spill
        call    cl::sycl::property_list::property_list<, void>()
        mov     rax, qword ptr [rbp - 152]      # 8-byte Reload
        mov     rdi, qword ptr [rbp - 144]      # 8-byte Reload
        mov     rsi, qword ptr [rbp - 136]      # 8-byte Reload
        mov     rdx, qword ptr [rbp - 128]      # 8-byte Reload
        mov     rcx, qword ptr [rbp - 120]      # 8-byte Reload
        movups  xmm0, xmmword ptr [rax]
        movups  xmm1, xmmword ptr [rax + 16]
        movaps  xmmword ptr [rbp - 80], xmm1
        movaps  xmmword ptr [rbp - 96], xmm0
        movaps  xmm0, xmmword ptr [rbp - 96]
        movaps  xmm1, xmmword ptr [rbp - 80]
        mov     rax, rsp
        movups  xmmword ptr [rax + 16], xmm1
        movups  xmmword ptr [rax], xmm0
        call    cl::sycl::accessor<int, 1, (cl::sycl::access::mode)1026, (cl::sycl::access::target)2014, (cl::sycl::access::placeholder)0, cl::sycl::ext::oneapi::accessor_property_list<> >::accessor<int, 1, cl::sycl::detail::aligned_allocator<char>, void>(cl::sycl::buffer<int, 1, cl::sycl::detail::aligned_allocator<char>, std::enable_if<(((1)>(0)))&&((1)<=(3)), void>::type>&, cl::sycl::handler&, cl::sycl::property_list const&, cl::sycl::detail::code_location)
        jmp     .LBB419_1
.LBB419_1:
        lea     rdi, [rbp - 56]
        call    cl::sycl::property_list::~property_list() [base object destructor]
        mov     rax, qword ptr [rbp - 160]      # 8-byte Reload
        add     rsp, 192
        pop     rbp
        ret
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 104], rcx
        mov     dword ptr [rbp - 108], eax
        lea     rdi, [rbp - 56]
        call    cl::sycl::property_list::~property_list() [base object destructor]
        mov     rdi, qword ptr [rbp - 104]
        call    _Unwind_Resume@PLT
void cl::sycl::handler::parallel_for<cl::sycl::detail::auto_name, call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, 3>(cl::sycl::nd_range<3>, call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 304
        lea     rax, [rbp + 16]
        mov     qword ptr [rbp - 208], rax      # 8-byte Spill
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 200], rdi      # 8-byte Spill
        call    cl::sycl::handler::throwIfActionIsCreated()
        call    cl::sycl::detail::KernelInfo<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}>::getName()
        mov     qword ptr [rbp - 192], rax      # 8-byte Spill
        lea     rdi, [rbp - 56]
        mov     qword ptr [rbp - 184], rdi      # 8-byte Spill
        call    std::allocator<char>::allocator() [complete object constructor]
        mov     rsi, qword ptr [rbp - 192]      # 8-byte Reload
        mov     rdx, qword ptr [rbp - 184]      # 8-byte Reload
        lea     rdi, [rbp - 48]
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&)
        jmp     .LBB420_1
.LBB420_1:
        mov     rdi, qword ptr [rbp - 200]      # 8-byte Reload
        lea     rsi, [rbp - 48]
        call    cl::sycl::handler::verifyUsedKernelBundle(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
        jmp     .LBB420_2
.LBB420_2:
        lea     rdi, [rbp - 48]
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() [complete object destructor]
        lea     rdi, [rbp - 56]
        call    std::allocator<char>::~allocator() [complete object destructor]
        mov     rdi, qword ptr [rbp - 200]      # 8-byte Reload
        mov     rsi, qword ptr [rbp - 16]
        call    std::enable_if<!detail::KernelLambdaHasKernelHandlerArgT<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3> >::value, void>::type cl::sycl::handler::kernel_parallel_for_wrapper<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)
        mov     rdi, qword ptr [rbp - 208]      # 8-byte Reload
        call    std::enable_if<std::is_same<cl::sycl::nd_range<3>, cl::sycl::nd_range<3> >::value, void>::type cl::sycl::detail::checkValueRange<3, cl::sycl::nd_range<3> >(cl::sycl::nd_range<3> const&)
        mov     rdi, qword ptr [rbp - 208]      # 8-byte Reload
        mov     rax, qword ptr [rbp - 200]      # 8-byte Reload
        add     rax, 208
        mov     qword ptr [rbp - 224], rax      # 8-byte Spill
        call    std::remove_reference<cl::sycl::nd_range<3>&>::type&& std::move<cl::sycl::nd_range<3>&>(cl::sycl::nd_range<3>&)
        mov     rdi, qword ptr [rbp - 224]      # 8-byte Reload
        mov     rcx, qword ptr [rax + 64]
        mov     qword ptr [rbp - 80], rcx
        movups  xmm0, xmmword ptr [rax]
        movups  xmm1, xmmword ptr [rax + 16]
        movups  xmm2, xmmword ptr [rax + 32]
        movups  xmm3, xmmword ptr [rax + 48]
        movaps  xmmword ptr [rbp - 96], xmm3
        movaps  xmmword ptr [rbp - 112], xmm2
        movaps  xmmword ptr [rbp - 128], xmm1
        movaps  xmmword ptr [rbp - 144], xmm0
        mov     rcx, qword ptr [rbp - 80]
        mov     rax, rsp
        mov     qword ptr [rax + 64], rcx
        movaps  xmm0, xmmword ptr [rbp - 144]
        movaps  xmm1, xmmword ptr [rbp - 128]
        movaps  xmm2, xmmword ptr [rbp - 112]
        movaps  xmm3, xmmword ptr [rbp - 96]
        movups  xmmword ptr [rax + 48], xmm3
        movups  xmmword ptr [rax + 32], xmm2
        movups  xmmword ptr [rax + 16], xmm1
        movups  xmmword ptr [rax], xmm0
        call    void cl::sycl::detail::NDRDescT::set<3>(cl::sycl::nd_range<3>)
        mov     rdi, qword ptr [rbp - 16]
        call    std::remove_reference<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&>::type&& std::move<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)
        mov     rsi, rax
        lea     rdi, [rbp - 176]
        mov     qword ptr [rbp - 216], rdi      # 8-byte Spill
        call    call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}::nd_item({lambda(cl::sycl::nd_item<3>)#1} const&) [base object constructor]
        mov     rdi, qword ptr [rbp - 200]      # 8-byte Reload
        mov     rsi, qword ptr [rbp - 216]      # 8-byte Reload
        call    void cl::sycl::handler::StoreLambda<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, 3, cl::sycl::nd_item<3> >(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1})
        jmp     .LBB420_3
.LBB420_3:
        lea     rdi, [rbp - 176]
        call    call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}::~nd_item() [base object destructor]
        mov     rdi, qword ptr [rbp - 200]      # 8-byte Reload
        mov     esi, 1
        call    cl::sycl::handler::setType(cl::sycl::detail::CG::CGTYPE)
        add     rsp, 304
        pop     rbp
        ret
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 64], rcx
        mov     dword ptr [rbp - 68], eax
        jmp     .LBB420_6
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 64], rcx
        mov     dword ptr [rbp - 68], eax
        lea     rdi, [rbp - 48]
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() [complete object destructor]
.LBB420_6:
        lea     rdi, [rbp - 56]
        call    std::allocator<char>::~allocator() [complete object destructor]
        jmp     .LBB420_8
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 64], rcx
        mov     dword ptr [rbp - 68], eax
        lea     rdi, [rbp - 176]
        call    call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}::~nd_item() [base object destructor]
.LBB420_8:
        mov     rdi, qword ptr [rbp - 64]
        call    _Unwind_Resume@PLT
cl::sycl::range<3>::range<3>(std::enable_if<(3)==(3), unsigned long>::type, unsigned long, unsigned long): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        mov     qword ptr [rbp - 32], rcx
        mov     rdi, qword ptr [rbp - 8]
        mov     rsi, qword ptr [rbp - 16]
        mov     rdx, qword ptr [rbp - 24]
        mov     rcx, qword ptr [rbp - 32]
        call    cl::sycl::detail::array<3>::array<3>(std::enable_if<(3)==(3), unsigned long>::type, unsigned long, unsigned long)
        add     rsp, 32
        pop     rbp
        ret
cl::sycl::nd_range<3>::nd_range(cl::sycl::range<3>, cl::sycl::range<3>) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        lea     rax, [rbp + 40]
        lea     rcx, [rbp + 16]
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        mov     rdx, qword ptr [rcx]
        mov     qword ptr [rdi], rdx
        mov     rdx, qword ptr [rcx + 8]
        mov     qword ptr [rdi + 8], rdx
        mov     rcx, qword ptr [rcx + 16]
        mov     qword ptr [rdi + 16], rcx
        mov     rcx, qword ptr [rax]
        mov     qword ptr [rdi + 24], rcx
        mov     rcx, qword ptr [rax + 8]
        mov     qword ptr [rdi + 32], rcx
        mov     rax, qword ptr [rax + 16]
        mov     qword ptr [rdi + 40], rax
        add     rdi, 48
        mov     qword ptr [rbp - 16], rdi       # 8-byte Spill
        xor     esi, esi
        mov     edx, 24
        call    memset@PLT
        mov     rdi, qword ptr [rbp - 16]       # 8-byte Reload
        call    cl::sycl::id<3>::id() [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::accessor<int, 1, (cl::sycl::access::mode)1026, (cl::sycl::access::target)2014, (cl::sycl::access::placeholder)0, cl::sycl::ext::oneapi::accessor_property_list<> >::accessor(cl::sycl::accessor<int, 1, (cl::sycl::access::mode)1026, (cl::sycl::access::target)2014, (cl::sycl::access::placeholder)0, cl::sycl::ext::oneapi::accessor_property_list<> > const&) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 24], rdi       # 8-byte Spill
        mov     rsi, qword ptr [rbp - 16]
        call    cl::sycl::detail::AccessorBaseHost::AccessorBaseHost(cl::sycl::detail::AccessorBaseHost const&) [base object constructor]
        mov     rax, qword ptr [rbp - 24]       # 8-byte Reload
        mov     rcx, qword ptr [rbp - 16]
        mov     rdx, qword ptr [rcx + 16]
        mov     qword ptr [rax + 16], rdx
        mov     rcx, qword ptr [rcx + 24]
        mov     qword ptr [rax + 24], rcx
        add     rsp, 32
        pop     rbp
        ret
call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}::~nd_item() [base object destructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    cl::sycl::accessor<int, 1, (cl::sycl::access::mode)1026, (cl::sycl::access::target)2014, (cl::sycl::access::placeholder)0, cl::sycl::ext::oneapi::accessor_property_list<> >::~accessor() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::accessor<int, 1, (cl::sycl::access::mode)1026, (cl::sycl::access::target)2014, (cl::sycl::access::placeholder)0, cl::sycl::ext::oneapi::accessor_property_list<> >::~accessor() [base object destructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    cl::sycl::detail::AccessorBaseHost::~AccessorBaseHost() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::accessor<int, 1, (cl::sycl::access::mode)1026, (cl::sycl::access::target)2014, (cl::sycl::access::placeholder)0, cl::sycl::ext::oneapi::accessor_property_list<> >::accessor<int, 1, cl::sycl::detail::aligned_allocator<char>, void>(cl::sycl::buffer<int, 1, cl::sycl::detail::aligned_allocator<char>, std::enable_if<(((1)>(0)))&&((1)<=(3)), void>::type>&, cl::sycl::handler&, cl::sycl::property_list const&, cl::sycl::detail::code_location): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 336
        lea     rax, [rbp + 16]
        mov     qword ptr [rbp - 240], rax      # 8-byte Spill
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        mov     qword ptr [rbp - 32], rcx
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 232], rax      # 8-byte Spill
        mov     qword ptr [rbp - 224], rax      # 8-byte Spill
        xor     eax, eax
        mov     ecx, eax
        lea     rdi, [rbp - 56]
        mov     rsi, rcx
        mov     rdx, rcx
        call    cl::sycl::id<3>::id<3>(std::enable_if<(3)==(3), unsigned long>::type, unsigned long, unsigned long)
        mov     rdi, qword ptr [rbp - 16]
        call    cl::sycl::buffer<int, 1, cl::sycl::detail::aligned_allocator<char>, void>::get_range() const
        mov     qword ptr [rbp - 88], rax
        mov     rsi, qword ptr [rbp - 88]
        lea     rdi, [rbp - 80]
        call    cl::sycl::range<3> cl::sycl::detail::convertToArrayOfN<3, 1, cl::sycl::range, 1>(cl::sycl::range<1>)
        mov     rdi, qword ptr [rbp - 16]
        call    cl::sycl::buffer<int, 1, cl::sycl::detail::aligned_allocator<char>, void>::get_range() const
        mov     qword ptr [rbp - 120], rax
        mov     rsi, qword ptr [rbp - 120]
        lea     rdi, [rbp - 112]
        call    cl::sycl::range<3> cl::sycl::detail::convertToArrayOfN<3, 1, cl::sycl::range, 1>(cl::sycl::range<1>)
        mov     rsi, qword ptr [rbp - 32]
        lea     rdi, [rbp - 152]
        mov     qword ptr [rbp - 216], rdi      # 8-byte Spill
        call    cl::sycl::ext::oneapi::accessor_property_list<>::accessor_property_list(cl::sycl::property_list const&) [base object constructor]
        mov     rdi, qword ptr [rbp - 216]      # 8-byte Reload
        call    cl::sycl::accessor<int, 1, (cl::sycl::access::mode)1026, (cl::sycl::access::target)2014, (cl::sycl::access::placeholder)0, cl::sycl::ext::oneapi::accessor_property_list<> >::getAdjustedMode(cl::sycl::ext::oneapi::accessor_property_list<> const&)
        mov     dword ptr [rbp - 204], eax      # 4-byte Spill
        jmp     .LBB426_1
.LBB426_1:
        mov     rsi, qword ptr [rbp - 16]
        lea     rdi, [rbp - 184]
        call    decltype (cl::sycl::buffer<int, 1, cl::sycl::detail::aligned_allocator<char>, void>::impl) cl::sycl::detail::getSyclObjImpl<cl::sycl::buffer<int, 1, cl::sycl::detail::aligned_allocator<char>, void> >(cl::sycl::buffer<int, 1, cl::sycl::detail::aligned_allocator<char>, void> const&)
        jmp     .LBB426_2
.LBB426_2:
        lea     rdi, [rbp - 184]
        call    std::__shared_ptr<cl::sycl::detail::buffer_impl, (__gnu_cxx::_Lock_policy)2>::get() const
        mov     rdi, qword ptr [rbp - 232]      # 8-byte Reload
        mov     esi, dword ptr [rbp - 204]      # 4-byte Reload
        mov     rdx, rax
        mov     rax, qword ptr [rbp - 16]
        mov     r9d, dword ptr [rax + 24]
        movzx   ecx, byte ptr [rax + 32]
        mov     r8, qword ptr [rbp - 96]
        mov     rax, rsp
        mov     qword ptr [rax + 64], r8
        movups  xmm0, xmmword ptr [rbp - 112]
        movups  xmmword ptr [rax + 48], xmm0
        mov     r8, qword ptr [rbp - 64]
        mov     qword ptr [rax + 40], r8
        movups  xmm0, xmmword ptr [rbp - 80]
        movups  xmmword ptr [rax + 24], xmm0
        mov     r8, qword ptr [rbp - 40]
        mov     qword ptr [rax + 16], r8
        movups  xmm0, xmmword ptr [rbp - 56]
        movups  xmmword ptr [rax], xmm0
        and     ecx, 1
        mov     dword ptr [rax + 72], ecx
        mov     ecx, 1
        mov     r8d, 4
        call    cl::sycl::detail::AccessorBaseHost::AccessorBaseHost(cl::sycl::id<3>, cl::sycl::range<3>, cl::sycl::range<3>, cl::sycl::access::mode, cl::sycl::detail::SYCLMemObjI*, int, int, int, bool) [base object constructor]
        jmp     .LBB426_3
.LBB426_3:
        lea     rdi, [rbp - 184]
        call    std::shared_ptr<cl::sycl::detail::buffer_impl>::~shared_ptr() [base object destructor]
        lea     rdi, [rbp - 152]
        call    cl::sycl::ext::oneapi::accessor_property_list<>::~accessor_property_list() [base object destructor]
        mov     rdi, qword ptr [rbp - 16]
        call    cl::sycl::buffer<int, 1, cl::sycl::detail::aligned_allocator<char>, void>::size() const
        mov     rdi, qword ptr [rbp - 224]      # 8-byte Reload
        mov     rsi, rax
        call    cl::sycl::accessor<int, 1, (cl::sycl::access::mode)1026, (cl::sycl::access::target)2014, (cl::sycl::access::placeholder)0, cl::sycl::ext::oneapi::accessor_property_list<> >::checkDeviceAccessorBufferSize(unsigned long)
        jmp     .LBB426_4
.LBB426_4:
        mov     rsi, qword ptr [rbp - 224]      # 8-byte Reload
        mov     rdi, qword ptr [rbp - 24]
        mov     edx, 2014
        call    cl::sycl::detail::associateWithHandler(cl::sycl::handler&, cl::sycl::detail::AccessorBaseHost*, cl::sycl::access::target)
        jmp     .LBB426_5
.LBB426_5:
        mov     rsi, qword ptr [rbp - 16]
        lea     rdi, [rbp - 200]
        call    decltype (cl::sycl::buffer<int, 1, cl::sycl::detail::aligned_allocator<char>, void>::impl) cl::sycl::detail::getSyclObjImpl<cl::sycl::buffer<int, 1, cl::sycl::detail::aligned_allocator<char>, void> >(cl::sycl::buffer<int, 1, cl::sycl::detail::aligned_allocator<char>, void> const&)
        jmp     .LBB426_6
.LBB426_6:
        lea     rdi, [rbp - 200]
        call    std::__shared_ptr<cl::sycl::detail::buffer_impl, (__gnu_cxx::_Lock_policy)2>::get() const
        mov     rdi, qword ptr [rbp - 224]      # 8-byte Reload
        mov     qword ptr [rbp - 248], rax      # 8-byte Spill
        call    std::__shared_ptr<cl::sycl::detail::AccessorImplHost, (__gnu_cxx::_Lock_policy)2>::get() const
        mov     rdi, qword ptr [rbp - 248]      # 8-byte Reload
        mov     r8, qword ptr [rbp - 240]       # 8-byte Reload
        mov     rsi, rax
        mov     edx, 2014
        mov     ecx, 1026
        call    cl::sycl::detail::constructorNotification(void*, void*, cl::sycl::access::target, cl::sycl::access::mode, cl::sycl::detail::code_location const&)
        jmp     .LBB426_7
.LBB426_7:
        lea     rdi, [rbp - 200]
        call    std::shared_ptr<cl::sycl::detail::buffer_impl>::~shared_ptr() [base object destructor]
        add     rsp, 336
        pop     rbp
        ret
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 160], rcx
        mov     dword ptr [rbp - 164], eax
        jmp     .LBB426_10
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 160], rcx
        mov     dword ptr [rbp - 164], eax
        lea     rdi, [rbp - 184]
        call    std::shared_ptr<cl::sycl::detail::buffer_impl>::~shared_ptr() [base object destructor]
.LBB426_10:
        lea     rdi, [rbp - 152]
        call    cl::sycl::ext::oneapi::accessor_property_list<>::~accessor_property_list() [base object destructor]
        jmp     .LBB426_14
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 160], rcx
        mov     dword ptr [rbp - 164], eax
        jmp     .LBB426_13
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 160], rcx
        mov     dword ptr [rbp - 164], eax
        lea     rdi, [rbp - 200]
        call    std::shared_ptr<cl::sycl::detail::buffer_impl>::~shared_ptr() [base object destructor]
.LBB426_13:
        mov     rdi, qword ptr [rbp - 224]      # 8-byte Reload
        call    cl::sycl::detail::AccessorBaseHost::~AccessorBaseHost() [base object destructor]
.LBB426_14:
        mov     rdi, qword ptr [rbp - 160]
        call    _Unwind_Resume@PLT
cl::sycl::id<3>::id<3>(std::enable_if<(3)==(3), unsigned long>::type, unsigned long, unsigned long): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        mov     qword ptr [rbp - 32], rcx
        mov     rdi, qword ptr [rbp - 8]
        mov     rsi, qword ptr [rbp - 16]
        mov     rdx, qword ptr [rbp - 24]
        mov     rcx, qword ptr [rbp - 32]
        call    cl::sycl::detail::array<3>::array<3>(std::enable_if<(3)==(3), unsigned long>::type, unsigned long, unsigned long)
        add     rsp, 32
        pop     rbp
        ret
cl::sycl::range<3> cl::sycl::detail::convertToArrayOfN<3, 1, cl::sycl::range, 1>(cl::sycl::range<1>): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        mov     qword ptr [rbp - 40], rdi       # 8-byte Spill
        mov     rax, rdi
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        mov     qword ptr [rbp - 8], rsi
        call    cl::sycl::range<3> cl::sycl::detail::InitializedVal<3, cl::sycl::range>::get<0>()
        mov     dword ptr [rbp - 12], 1
        mov     dword ptr [rbp - 16], 0
.LBB428_1:                              # =>This Inner Loop Header: Depth=1
        cmp     dword ptr [rbp - 16], 1
        jge     .LBB428_4
        lea     rdi, [rbp - 8]
        mov     esi, dword ptr [rbp - 16]
        call    cl::sycl::detail::array<1>::operator[](int)
        mov     rdi, qword ptr [rbp - 40]       # 8-byte Reload
        mov     rax, qword ptr [rax]
        mov     qword ptr [rbp - 48], rax       # 8-byte Spill
        mov     esi, dword ptr [rbp - 16]
        call    cl::sycl::detail::array<3>::operator[](int)
        mov     rcx, qword ptr [rbp - 48]       # 8-byte Reload
        mov     qword ptr [rax], rcx
        mov     eax, dword ptr [rbp - 16]
        add     eax, 1
        mov     dword ptr [rbp - 16], eax
        jmp     .LBB428_1
.LBB428_4:
        mov     dword ptr [rbp - 20], 1
.LBB428_5:                              # =>This Inner Loop Header: Depth=1
        cmp     dword ptr [rbp - 20], 3
        jge     .LBB428_8
        mov     rdi, qword ptr [rbp - 40]       # 8-byte Reload
        mov     esi, dword ptr [rbp - 20]
        call    cl::sycl::detail::array<3>::operator[](int)
        mov     qword ptr [rax], 1
        mov     eax, dword ptr [rbp - 20]
        add     eax, 1
        mov     dword ptr [rbp - 20], eax
        jmp     .LBB428_5
.LBB428_8:
        mov     rax, qword ptr [rbp - 32]       # 8-byte Reload
        add     rsp, 48
        pop     rbp
        ret
cl::sycl::buffer<int, 1, cl::sycl::detail::aligned_allocator<char>, void>::get_range() const: # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 16], rdi
        mov     rax, qword ptr [rbp - 16]
        mov     rax, qword ptr [rax + 16]
        mov     qword ptr [rbp - 8], rax
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
cl::sycl::accessor<int, 1, (cl::sycl::access::mode)1026, (cl::sycl::access::target)2014, (cl::sycl::access::placeholder)0, cl::sycl::ext::oneapi::accessor_property_list<> >::getAdjustedMode(cl::sycl::ext::oneapi::accessor_property_list<> const&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     dword ptr [rbp - 12], 1026
        mov     rdi, qword ptr [rbp - 8]
        call    std::enable_if<!is_compile_time_property<cl::sycl::property::no_init>::value, bool>::type cl::sycl::ext::oneapi::accessor_property_list<>::has_property<cl::sycl::property::no_init>() const
        test    al, 1
        jne     .LBB430_2
        mov     rdi, qword ptr [rbp - 8]
        call    std::enable_if<!is_compile_time_property<cl::sycl::property::noinit>::value, bool>::type cl::sycl::ext::oneapi::accessor_property_list<>::has_property<cl::sycl::property::noinit>() const
        test    al, 1
        jne     .LBB430_2
        jmp     .LBB430_8
.LBB430_2:
        cmp     dword ptr [rbp - 12], 1025
        jne     .LBB430_4
        mov     dword ptr [rbp - 12], 1027
        jmp     .LBB430_7
.LBB430_4:
        cmp     dword ptr [rbp - 12], 1026
        jne     .LBB430_6
        mov     dword ptr [rbp - 12], 1028
.LBB430_6:
        jmp     .LBB430_7
.LBB430_7:
        jmp     .LBB430_8
.LBB430_8:
        mov     eax, dword ptr [rbp - 12]
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::ext::oneapi::accessor_property_list<>::accessor_property_list(cl::sycl::property_list const&) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 80
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 80], rax       # 8-byte Spill
        mov     rax, qword ptr [rbp - 16]
        mov     rax, qword ptr [rax]
        mov     qword ptr [rbp - 24], rax
        mov     rsi, qword ptr [rbp - 16]
        add     rsi, 8
        lea     rdi, [rbp - 48]
        mov     qword ptr [rbp - 72], rdi       # 8-byte Spill
        call    std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::vector(std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > > const&) [base object constructor]
        mov     rdi, qword ptr [rbp - 80]       # 8-byte Reload
        mov     rdx, qword ptr [rbp - 72]       # 8-byte Reload
        mov     rsi, qword ptr [rbp - 24]
        call    cl::sycl::detail::PropertyListBase::PropertyListBase(std::bitset<32ul>, std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >) [base object constructor]
        jmp     .LBB431_1
.LBB431_1:
        lea     rdi, [rbp - 48]
        call    std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::~vector() [base object destructor]
        add     rsp, 80
        pop     rbp
        ret
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 56], rcx
        mov     dword ptr [rbp - 60], eax
        lea     rdi, [rbp - 48]
        call    std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::~vector() [base object destructor]
        mov     rdi, qword ptr [rbp - 56]
        call    _Unwind_Resume@PLT
decltype (cl::sycl::buffer<int, 1, cl::sycl::detail::aligned_allocator<char>, void>::impl) cl::sycl::detail::getSyclObjImpl<cl::sycl::buffer<int, 1, cl::sycl::detail::aligned_allocator<char>, void> >(cl::sycl::buffer<int, 1, cl::sycl::detail::aligned_allocator<char>, void> const&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     rax, rdi
        mov     qword ptr [rbp - 24], rax       # 8-byte Spill
        mov     rax, rdi
        mov     qword ptr [rbp - 8], rax
        mov     qword ptr [rbp - 16], rsi
        mov     rsi, qword ptr [rbp - 16]
        call    std::shared_ptr<cl::sycl::detail::buffer_impl>::shared_ptr(std::shared_ptr<cl::sycl::detail::buffer_impl> const&) [base object constructor]
        mov     rax, qword ptr [rbp - 24]       # 8-byte Reload
        add     rsp, 32
        pop     rbp
        ret
cl::sycl::detail::AccessorBaseHost::AccessorBaseHost(cl::sycl::id<3>, cl::sycl::range<3>, cl::sycl::range<3>, cl::sycl::access::mode, cl::sycl::detail::SYCLMemObjI*, int, int, int, bool) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 320
        mov     al, byte ptr [rbp + 88]
        lea     r10, [rbp + 64]
        mov     qword ptr [rbp - 208], r10      # 8-byte Spill
        lea     r10, [rbp + 40]
        mov     qword ptr [rbp - 200], r10      # 8-byte Spill
        lea     r10, [rbp + 16]
        mov     qword ptr [rbp - 192], r10      # 8-byte Spill
        mov     qword ptr [rbp - 8], rdi
        mov     dword ptr [rbp - 12], esi
        mov     qword ptr [rbp - 24], rdx
        mov     dword ptr [rbp - 28], ecx
        mov     dword ptr [rbp - 32], r8d
        mov     dword ptr [rbp - 36], r9d
        and     al, 1
        mov     byte ptr [rbp - 37], al
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 184], rdi      # 8-byte Spill
        mov     rax, rdi
        mov     qword ptr [rbp - 176], rax      # 8-byte Spill
        call    std::shared_ptr<cl::sycl::detail::AccessorImplHost>::shared_ptr() [base object constructor]
        mov     edi, 128
        call    operator new(unsigned long)
        mov     qword ptr [rbp - 168], rax      # 8-byte Spill
        jmp     .LBB433_1
.LBB433_1:
        mov     rdi, qword ptr [rbp - 168]      # 8-byte Reload
        mov     rax, qword ptr [rbp - 208]      # 8-byte Reload
        mov     rcx, qword ptr [rbp - 200]      # 8-byte Reload
        mov     rdx, qword ptr [rbp - 192]      # 8-byte Reload
        mov     rsi, rdi
        mov     qword ptr [rbp - 224], rsi      # 8-byte Spill
        mov     rsi, qword ptr [rdx + 16]
        mov     qword ptr [rbp - 80], rsi
        movups  xmm0, xmmword ptr [rdx]
        movaps  xmmword ptr [rbp - 96], xmm0
        mov     rdx, qword ptr [rcx + 16]
        mov     qword ptr [rbp - 112], rdx
        movups  xmm0, xmmword ptr [rcx]
        movaps  xmmword ptr [rbp - 128], xmm0
        mov     rcx, qword ptr [rax + 16]
        mov     qword ptr [rbp - 144], rcx
        movups  xmm0, xmmword ptr [rax]
        movaps  xmmword ptr [rbp - 160], xmm0
        mov     esi, dword ptr [rbp - 12]
        mov     rdx, qword ptr [rbp - 24]
        mov     ecx, dword ptr [rbp - 28]
        mov     r8d, dword ptr [rbp - 32]
        mov     r9d, dword ptr [rbp - 36]
        movzx   r10d, byte ptr [rbp - 37]
        mov     r11, qword ptr [rbp - 144]
        mov     rax, rsp
        mov     qword ptr [rbp - 216], rax      # 8-byte Spill
        mov     qword ptr [rax + 64], r11
        movaps  xmm0, xmmword ptr [rbp - 160]
        movups  xmmword ptr [rax + 48], xmm0
        mov     r11, qword ptr [rbp - 112]
        mov     qword ptr [rax + 40], r11
        movaps  xmm0, xmmword ptr [rbp - 128]
        movups  xmmword ptr [rax + 24], xmm0
        mov     r11, qword ptr [rbp - 80]
        mov     qword ptr [rax + 16], r11
        movaps  xmm0, xmmword ptr [rbp - 96]
        movups  xmmword ptr [rax], xmm0
        and     r10d, 1
        mov     dword ptr [rax + 72], r10d
        mov     dword ptr [rax + 80], 0
        call    cl::sycl::detail::AccessorImplHost::AccessorImplHost(cl::sycl::id<3>, cl::sycl::range<3>, cl::sycl::range<3>, cl::sycl::access::mode, cl::sycl::detail::SYCLMemObjI*, int, int, int, bool, bool) [base object constructor]
        jmp     .LBB433_2
.LBB433_2:
        mov     rsi, qword ptr [rbp - 224]      # 8-byte Reload
        lea     rdi, [rbp - 56]
        call    std::shared_ptr<cl::sycl::detail::AccessorImplHost>::shared_ptr<cl::sycl::detail::AccessorImplHost, void>(cl::sycl::detail::AccessorImplHost*)
        jmp     .LBB433_3
.LBB433_3:
        mov     rdi, qword ptr [rbp - 176]      # 8-byte Reload
        lea     rsi, [rbp - 56]
        call    std::shared_ptr<cl::sycl::detail::AccessorImplHost>::operator=(std::shared_ptr<cl::sycl::detail::AccessorImplHost>&&)
        lea     rdi, [rbp - 56]
        call    std::shared_ptr<cl::sycl::detail::AccessorImplHost>::~shared_ptr() [base object destructor]
        add     rsp, 320
        pop     rbp
        ret
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 64], rcx
        mov     dword ptr [rbp - 68], eax
        jmp     .LBB433_6
        mov     rdi, qword ptr [rbp - 168]      # 8-byte Reload
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 64], rcx
        mov     dword ptr [rbp - 68], eax
        call    operator delete(void*)
.LBB433_6:
        mov     rdi, qword ptr [rbp - 184]      # 8-byte Reload
        call    std::shared_ptr<cl::sycl::detail::AccessorImplHost>::~shared_ptr() [base object destructor]
        mov     rdi, qword ptr [rbp - 64]
        call    _Unwind_Resume@PLT
cl::sycl::ext::oneapi::accessor_property_list<>::~accessor_property_list() [base object destructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    cl::sycl::detail::PropertyListBase::~PropertyListBase() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::accessor<int, 1, (cl::sycl::access::mode)1026, (cl::sycl::access::target)2014, (cl::sycl::access::placeholder)0, cl::sycl::ext::oneapi::accessor_property_list<> >::checkDeviceAccessorBufferSize(unsigned long): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        cmp     qword ptr [rbp - 16], 0
        jne     .LBB435_4
        mov     edi, 64
        call    __cxa_allocate_exception
        mov     rdi, rax
        mov     rax, rdi
        mov     qword ptr [rbp - 40], rax       # 8-byte Spill
        mov     esi, offset .L.str.13
        mov     edx, -30
        call    cl::sycl::invalid_object_error::invalid_object_error(char const*, int) [base object constructor]
        jmp     .LBB435_2
.LBB435_2:
        mov     rdi, qword ptr [rbp - 40]       # 8-byte Reload
        movabs  rsi, offset typeinfo for cl::sycl::invalid_object_error
        movabs  rdx, offset cl::sycl::invalid_object_error::~invalid_object_error() [base object destructor]
        call    __cxa_throw
        mov     rdi, qword ptr [rbp - 40]       # 8-byte Reload
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 24], rcx
        mov     dword ptr [rbp - 28], eax
        call    __cxa_free_exception
        jmp     .LBB435_5
.LBB435_4:
        add     rsp, 48
        pop     rbp
        ret
.LBB435_5:
        mov     rdi, qword ptr [rbp - 24]
        call    _Unwind_Resume@PLT
cl::sycl::detail::AccessorBaseHost::~AccessorBaseHost() [base object destructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::shared_ptr<cl::sycl::detail::AccessorImplHost>::~shared_ptr() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::detail::array<3>::array<3>(std::enable_if<(3)==(3), unsigned long>::type, unsigned long, unsigned long): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        mov     qword ptr [rbp - 32], rcx
        mov     rax, qword ptr [rbp - 8]
        mov     rcx, qword ptr [rbp - 16]
        mov     qword ptr [rax], rcx
        mov     rcx, qword ptr [rbp - 24]
        mov     qword ptr [rax + 8], rcx
        mov     rcx, qword ptr [rbp - 32]
        mov     qword ptr [rax + 16], rcx
        pop     rbp
        ret
cl::sycl::range<3> cl::sycl::detail::InitializedVal<3, cl::sycl::range>::get<0>(): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     rax, rdi
        mov     qword ptr [rbp - 8], rax        # 8-byte Spill
        xor     eax, eax
        mov     ecx, eax
        mov     rsi, rcx
        mov     rdx, rcx
        call    cl::sycl::range<3>::range<3>(std::enable_if<(3)==(3), unsigned long>::type, unsigned long, unsigned long)
        mov     rax, qword ptr [rbp - 8]        # 8-byte Reload
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::detail::array<3>::operator[](int):     # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 64
        mov     qword ptr [rbp - 40], rdi
        mov     dword ptr [rbp - 44], esi
        mov     rcx, qword ptr [rbp - 40]
        mov     qword ptr [rbp - 56], rcx       # 8-byte Spill
        mov     eax, dword ptr [rbp - 44]
        mov     qword ptr [rbp - 8], rcx
        mov     dword ptr [rbp - 12], eax
        cmp     dword ptr [rbp - 12], 3
        jge     .LBB439_2
        cmp     dword ptr [rbp - 12], 0
        jge     .LBB439_5
.LBB439_2:
        mov     edi, 64
        call    __cxa_allocate_exception
        mov     rdi, rax
        mov     rax, rdi
        mov     qword ptr [rbp - 64], rax       # 8-byte Spill
        mov     esi, offset .L.str.5
        mov     edx, -30
        call    cl::sycl::invalid_parameter_error::invalid_parameter_error(char const*, int) [base object constructor]
        jmp     .LBB439_3
.LBB439_3:
        mov     rdi, qword ptr [rbp - 64]       # 8-byte Reload
        movabs  rsi, offset typeinfo for cl::sycl::invalid_parameter_error
        movabs  rdx, offset cl::sycl::invalid_parameter_error::~invalid_parameter_error() [base object destructor]
        call    __cxa_throw
        mov     rdi, qword ptr [rbp - 64]       # 8-byte Reload
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 24], rcx
        mov     dword ptr [rbp - 28], eax
        call    __cxa_free_exception
        mov     rdi, qword ptr [rbp - 24]
        call    _Unwind_Resume@PLT
.LBB439_5:
        mov     rax, qword ptr [rbp - 56]       # 8-byte Reload
        movsxd  rcx, dword ptr [rbp - 44]
        shl     rcx, 3
        add     rax, rcx
        add     rsp, 64
        pop     rbp
        ret
std::enable_if<!is_compile_time_property<cl::sycl::property::no_init>::value, bool>::type cl::sycl::ext::oneapi::accessor_property_list<>::has_property<cl::sycl::property::no_init>() const: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::enable_if<std::is_base_of<cl::sycl::detail::DataLessPropertyBase, cl::sycl::property::no_init>::value, bool>::type cl::sycl::detail::PropertyListBase::has_property_helper<cl::sycl::property::no_init>() const
        and     al, 1
        movzx   eax, al
        add     rsp, 16
        pop     rbp
        ret
std::enable_if<!is_compile_time_property<cl::sycl::property::noinit>::value, bool>::type cl::sycl::ext::oneapi::accessor_property_list<>::has_property<cl::sycl::property::noinit>() const: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::enable_if<std::is_base_of<cl::sycl::detail::DataLessPropertyBase, cl::sycl::property::noinit>::value, bool>::type cl::sycl::detail::PropertyListBase::has_property_helper<cl::sycl::property::noinit>() const
        and     al, 1
        movzx   eax, al
        add     rsp, 16
        pop     rbp
        ret
std::enable_if<std::is_base_of<cl::sycl::detail::DataLessPropertyBase, cl::sycl::property::no_init>::value, bool>::type cl::sycl::detail::PropertyListBase::has_property_helper<cl::sycl::property::no_init>() const: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        mov     dword ptr [rbp - 12], 4
        mov     esi, 4
        call    std::bitset<32ul>::operator[](unsigned long) const
        and     al, 1
        movzx   eax, al
        add     rsp, 16
        pop     rbp
        ret
std::enable_if<std::is_base_of<cl::sycl::detail::DataLessPropertyBase, cl::sycl::property::noinit>::value, bool>::type cl::sycl::detail::PropertyListBase::has_property_helper<cl::sycl::property::noinit>() const: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        mov     dword ptr [rbp - 12], 4
        mov     esi, 4
        call    std::bitset<32ul>::operator[](unsigned long) const
        and     al, 1
        movzx   eax, al
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::detail::PropertyListBase::PropertyListBase(std::bitset<32ul>, std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 32], rdx       # 8-byte Spill
        mov     rax, rdi
        mov     rdi, qword ptr [rbp - 32]       # 8-byte Reload
        mov     qword ptr [rbp - 8], rsi
        mov     qword ptr [rbp - 16], rax
        mov     rax, qword ptr [rbp - 16]
        mov     rcx, qword ptr [rbp - 8]
        mov     qword ptr [rax], rcx
        add     rax, 8
        mov     qword ptr [rbp - 24], rax       # 8-byte Spill
        call    std::remove_reference<std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >&>::type&& std::move<std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >&>(std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >&)
        mov     rdi, qword ptr [rbp - 24]       # 8-byte Reload
        mov     rsi, rax
        call    std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::vector(std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >&&) [base object constructor]
        add     rsp, 32
        pop     rbp
        ret
std::remove_reference<std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >&>::type&& std::move<std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >&>(std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::vector(std::vector<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >&&) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     rsi, qword ptr [rbp - 16]
        call    std::_Vector_base<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::_Vector_base(std::_Vector_base<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >&&) [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
std::_Vector_base<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::_Vector_base(std::_Vector_base<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >&&) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     rsi, qword ptr [rbp - 16]
        call    std::_Vector_base<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::_Vector_impl::_Vector_impl(std::_Vector_base<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::_Vector_impl&&) [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
std::_Vector_base<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::_Vector_impl::_Vector_impl(std::_Vector_base<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::_Vector_impl&&) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        mov     qword ptr [rbp - 40], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 16]
        call    std::remove_reference<std::_Vector_base<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::_Vector_impl&>::type&& std::move<std::_Vector_base<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::_Vector_impl&>(std::_Vector_base<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::_Vector_impl&)
        mov     rdi, qword ptr [rbp - 40]       # 8-byte Reload
        mov     rsi, rax
        call    std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> >::allocator(std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > const&) [base object constructor]
        mov     rax, qword ptr [rbp - 32]       # 8-byte Reload
        mov     qword ptr [rbp - 24], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 16]
        call    std::remove_reference<std::_Vector_base<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::_Vector_impl&>::type&& std::move<std::_Vector_base<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::_Vector_impl&>(std::_Vector_base<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::_Vector_impl&)
        mov     rdi, qword ptr [rbp - 24]       # 8-byte Reload
        mov     rsi, rax
        call    std::_Vector_base<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::_Vector_impl_data::_Vector_impl_data(std::_Vector_base<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::_Vector_impl_data&&) [base object constructor]
        add     rsp, 48
        pop     rbp
        ret
std::remove_reference<std::_Vector_base<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::_Vector_impl&>::type&& std::move<std::_Vector_base<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::_Vector_impl&>(std::_Vector_base<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::_Vector_impl&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
std::_Vector_base<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::_Vector_impl_data::_Vector_impl_data(std::_Vector_base<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase>, std::allocator<std::shared_ptr<cl::sycl::detail::PropertyWithDataBase> > >::_Vector_impl_data&&) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rax, qword ptr [rbp - 8]
        mov     rcx, qword ptr [rbp - 16]
        mov     rcx, qword ptr [rcx]
        mov     qword ptr [rax], rcx
        mov     rcx, qword ptr [rbp - 16]
        mov     rcx, qword ptr [rcx + 8]
        mov     qword ptr [rax + 8], rcx
        mov     rcx, qword ptr [rbp - 16]
        mov     rcx, qword ptr [rcx + 16]
        mov     qword ptr [rax + 16], rcx
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rax + 16], 0
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rax + 8], 0
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rax], 0
        pop     rbp
        ret
std::shared_ptr<cl::sycl::detail::buffer_impl>::shared_ptr(std::shared_ptr<cl::sycl::detail::buffer_impl> const&) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     rsi, qword ptr [rbp - 16]
        call    std::__shared_ptr<cl::sycl::detail::buffer_impl, (__gnu_cxx::_Lock_policy)2>::__shared_ptr(std::__shared_ptr<cl::sycl::detail::buffer_impl, (__gnu_cxx::_Lock_policy)2> const&) [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
std::__shared_ptr<cl::sycl::detail::buffer_impl, (__gnu_cxx::_Lock_policy)2>::__shared_ptr(std::__shared_ptr<cl::sycl::detail::buffer_impl, (__gnu_cxx::_Lock_policy)2> const&) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     rax, qword ptr [rbp - 16]
        mov     rax, qword ptr [rax]
        mov     qword ptr [rdi], rax
        add     rdi, 8
        mov     rsi, qword ptr [rbp - 16]
        add     rsi, 8
        call    std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count(std::__shared_count<(__gnu_cxx::_Lock_policy)2> const&) [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
std::shared_ptr<cl::sycl::detail::AccessorImplHost>::shared_ptr() [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::__shared_ptr<cl::sycl::detail::AccessorImplHost, (__gnu_cxx::_Lock_policy)2>::__shared_ptr() [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::detail::AccessorImplHost::AccessorImplHost(cl::sycl::id<3>, cl::sycl::range<3>, cl::sycl::range<3>, cl::sycl::access::mode, cl::sycl::detail::SYCLMemObjI*, int, int, int, bool, bool) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        push    r14
        push    rbx
        mov     r10d, ecx
        mov     r11, rdx
        mov     ebx, esi
        mov     r14, rdi
        mov     al, byte ptr [rbp + 96]
        mov     dil, byte ptr [rbp + 88]
        lea     rcx, [rbp + 64]
        lea     rdx, [rbp + 40]
        lea     rsi, [rbp + 16]
        mov     qword ptr [rbp - 24], r14
        mov     dword ptr [rbp - 28], ebx
        mov     qword ptr [rbp - 40], r11
        mov     dword ptr [rbp - 44], r10d
        mov     dword ptr [rbp - 48], r8d
        mov     dword ptr [rbp - 52], r9d
        and     dil, 1
        mov     byte ptr [rbp - 53], dil
        and     al, 1
        mov     byte ptr [rbp - 54], al
        mov     rax, qword ptr [rbp - 24]
        mov     rdi, qword ptr [rsi]
        mov     qword ptr [rax], rdi
        mov     rdi, qword ptr [rsi + 8]
        mov     qword ptr [rax + 8], rdi
        mov     rsi, qword ptr [rsi + 16]
        mov     qword ptr [rax + 16], rsi
        mov     rsi, qword ptr [rdx]
        mov     qword ptr [rax + 24], rsi
        mov     rsi, qword ptr [rdx + 8]
        mov     qword ptr [rax + 32], rsi
        mov     rdx, qword ptr [rdx + 16]
        mov     qword ptr [rax + 40], rdx
        mov     rdx, qword ptr [rcx]
        mov     qword ptr [rax + 48], rdx
        mov     rdx, qword ptr [rcx + 8]
        mov     qword ptr [rax + 56], rdx
        mov     rcx, qword ptr [rcx + 16]
        mov     qword ptr [rax + 64], rcx
        mov     ecx, dword ptr [rbp - 28]
        mov     dword ptr [rax + 72], ecx
        mov     rcx, qword ptr [rbp - 40]
        mov     qword ptr [rax + 80], rcx
        mov     ecx, dword ptr [rbp - 44]
        mov     dword ptr [rax + 88], ecx
        mov     ecx, dword ptr [rbp - 48]
        mov     dword ptr [rax + 92], ecx
        mov     ecx, dword ptr [rbp - 52]
        mov     dword ptr [rax + 96], ecx
        mov     cl, byte ptr [rbp - 53]
        and     cl, 1
        mov     byte ptr [rax + 100], cl
        mov     qword ptr [rax + 104], 0
        mov     qword ptr [rax + 112], 0
        mov     byte ptr [rax + 120], 0
        mov     cl, byte ptr [rbp - 54]
        and     cl, 1
        mov     byte ptr [rax + 121], cl
        pop     rbx
        pop     r14
        pop     rbp
        ret
std::shared_ptr<cl::sycl::detail::AccessorImplHost>::shared_ptr<cl::sycl::detail::AccessorImplHost, void>(cl::sycl::detail::AccessorImplHost*): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     rsi, qword ptr [rbp - 16]
        call    std::__shared_ptr<cl::sycl::detail::AccessorImplHost, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<cl::sycl::detail::AccessorImplHost, void>(cl::sycl::detail::AccessorImplHost*)
        add     rsp, 16
        pop     rbp
        ret
std::shared_ptr<cl::sycl::detail::AccessorImplHost>::operator=(std::shared_ptr<cl::sycl::detail::AccessorImplHost>&&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 24], rax       # 8-byte Spill
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 16]
        call    std::remove_reference<std::shared_ptr<cl::sycl::detail::AccessorImplHost>&>::type&& std::move<std::shared_ptr<cl::sycl::detail::AccessorImplHost>&>(std::shared_ptr<cl::sycl::detail::AccessorImplHost>&)
        mov     rdi, qword ptr [rbp - 32]       # 8-byte Reload
        mov     rsi, rax
        call    std::__shared_ptr<cl::sycl::detail::AccessorImplHost, (__gnu_cxx::_Lock_policy)2>::operator=(std::__shared_ptr<cl::sycl::detail::AccessorImplHost, (__gnu_cxx::_Lock_policy)2>&&)
        mov     rax, qword ptr [rbp - 24]       # 8-byte Reload
        add     rsp, 32
        pop     rbp
        ret
std::shared_ptr<cl::sycl::detail::AccessorImplHost>::~shared_ptr() [base object destructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::__shared_ptr<cl::sycl::detail::AccessorImplHost, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
std::__shared_ptr<cl::sycl::detail::AccessorImplHost, (__gnu_cxx::_Lock_policy)2>::__shared_ptr() [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rdi], 0
        add     rdi, 8
        call    std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count() [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
std::__shared_ptr<cl::sycl::detail::AccessorImplHost, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<cl::sycl::detail::AccessorImplHost, void>(cl::sycl::detail::AccessorImplHost*): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 32], rdi       # 8-byte Spill
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rdi], rax
        add     rdi, 8
        mov     rsi, qword ptr [rbp - 16]
        call    std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<cl::sycl::detail::AccessorImplHost*>(cl::sycl::detail::AccessorImplHost*, std::integral_constant<bool, false>)
        mov     rdi, qword ptr [rbp - 32]       # 8-byte Reload
        mov     rsi, qword ptr [rbp - 16]
        call    std::enable_if<!__has_esft_base<cl::sycl::detail::AccessorImplHost>::value, void>::type std::__shared_ptr<cl::sycl::detail::AccessorImplHost, (__gnu_cxx::_Lock_policy)2>::_M_enable_shared_from_this_with<cl::sycl::detail::AccessorImplHost, cl::sycl::detail::AccessorImplHost>(cl::sycl::detail::AccessorImplHost*)
        add     rsp, 32
        pop     rbp
        ret
std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<cl::sycl::detail::AccessorImplHost*>(cl::sycl::detail::AccessorImplHost*, std::integral_constant<bool, false>): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 16], rdi
        mov     qword ptr [rbp - 24], rsi
        mov     rdi, qword ptr [rbp - 16]
        mov     rsi, qword ptr [rbp - 24]
        call    std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<cl::sycl::detail::AccessorImplHost*>(cl::sycl::detail::AccessorImplHost*)
        add     rsp, 32
        pop     rbp
        ret
std::enable_if<!__has_esft_base<cl::sycl::detail::AccessorImplHost>::value, void>::type std::__shared_ptr<cl::sycl::detail::AccessorImplHost, (__gnu_cxx::_Lock_policy)2>::_M_enable_shared_from_this_with<cl::sycl::detail::AccessorImplHost, cl::sycl::detail::AccessorImplHost>(cl::sycl::detail::AccessorImplHost*): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        pop     rbp
        ret
std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<cl::sycl::detail::AccessorImplHost*>(cl::sycl::detail::AccessorImplHost*): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 64
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 48], rax       # 8-byte Spill
        mov     qword ptr [rax], 0
        mov     edi, 24
        call    operator new(unsigned long)
        mov     qword ptr [rbp - 40], rax       # 8-byte Spill
        jmp     .LBB462_1
.LBB462_1:
        mov     rdi, qword ptr [rbp - 40]       # 8-byte Reload
        mov     qword ptr [rbp - 56], rdi       # 8-byte Spill
        mov     rsi, qword ptr [rbp - 16]
        call    std::_Sp_counted_ptr<cl::sycl::detail::AccessorImplHost*, (__gnu_cxx::_Lock_policy)2>::_Sp_counted_ptr(cl::sycl::detail::AccessorImplHost*) [base object constructor]
        mov     rcx, qword ptr [rbp - 56]       # 8-byte Reload
        mov     rax, qword ptr [rbp - 48]       # 8-byte Reload
        mov     qword ptr [rax], rcx
        jmp     .LBB462_8
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 24], rcx
        mov     dword ptr [rbp - 28], eax
        mov     rdi, qword ptr [rbp - 24]
        call    __cxa_begin_catch
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rbp - 64], rax       # 8-byte Spill
        cmp     rax, 0
        je      .LBB462_5
        mov     rdi, qword ptr [rbp - 64]       # 8-byte Reload
        call    cl::sycl::detail::AccessorImplHost::~AccessorImplHost() [complete object destructor]
        mov     rdi, qword ptr [rbp - 64]       # 8-byte Reload
        call    operator delete(void*)
.LBB462_5:
        call    __cxa_rethrow
        jmp     .LBB462_11
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 24], rcx
        mov     dword ptr [rbp - 28], eax
        call    __cxa_end_catch
        jmp     .LBB462_7
.LBB462_7:
        jmp     .LBB462_9
.LBB462_8:
        add     rsp, 64
        pop     rbp
        ret
.LBB462_9:
        mov     rdi, qword ptr [rbp - 24]
        call    _Unwind_Resume@PLT
        mov     rdi, rax
        call    __clang_call_terminate
.LBB462_11:
std::_Sp_counted_ptr<cl::sycl::detail::AccessorImplHost*, (__gnu_cxx::_Lock_policy)2>::_Sp_counted_ptr(cl::sycl::detail::AccessorImplHost*) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 24], rdi       # 8-byte Spill
        call    std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_Sp_counted_base() [base object constructor]
        mov     rax, qword ptr [rbp - 24]       # 8-byte Reload
        movabs  rcx, offset vtable for std::_Sp_counted_ptr<cl::sycl::detail::AccessorImplHost*, (__gnu_cxx::_Lock_policy)2>
        add     rcx, 16
        mov     qword ptr [rax], rcx
        mov     rcx, qword ptr [rbp - 16]
        mov     qword ptr [rax + 16], rcx
        add     rsp, 32
        pop     rbp
        ret
std::_Sp_counted_ptr<cl::sycl::detail::AccessorImplHost*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr() [base object destructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::~_Sp_counted_base() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
std::_Sp_counted_ptr<cl::sycl::detail::AccessorImplHost*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr() [deleting destructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 16], rdi       # 8-byte Spill
        call    std::_Sp_counted_ptr<cl::sycl::detail::AccessorImplHost*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr() [base object destructor]
        mov     rdi, qword ptr [rbp - 16]       # 8-byte Reload
        call    operator delete(void*)
        add     rsp, 16
        pop     rbp
        ret
std::_Sp_counted_ptr<cl::sycl::detail::AccessorImplHost*, (__gnu_cxx::_Lock_policy)2>::_M_dispose(): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        mov     rax, qword ptr [rax + 16]
        mov     qword ptr [rbp - 16], rax       # 8-byte Spill
        cmp     rax, 0
        je      .LBB466_2
        mov     rdi, qword ptr [rbp - 16]       # 8-byte Reload
        call    cl::sycl::detail::AccessorImplHost::~AccessorImplHost() [complete object destructor]
        mov     rdi, qword ptr [rbp - 16]       # 8-byte Reload
        call    operator delete(void*)
.LBB466_2:
        add     rsp, 16
        pop     rbp
        ret
std::_Sp_counted_ptr<cl::sycl::detail::AccessorImplHost*, (__gnu_cxx::_Lock_policy)2>::_M_destroy(): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 16], rax       # 8-byte Spill
        cmp     rax, 0
        je      .LBB467_2
        mov     rdi, qword ptr [rbp - 16]       # 8-byte Reload
        call    std::_Sp_counted_ptr<cl::sycl::detail::AccessorImplHost*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr() [base object destructor]
        mov     rdi, qword ptr [rbp - 16]       # 8-byte Reload
        call    operator delete(void*)
.LBB467_2:
        add     rsp, 16
        pop     rbp
        ret
std::_Sp_counted_ptr<cl::sycl::detail::AccessorImplHost*, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        xor     eax, eax
        pop     rbp
        ret
std::__shared_ptr<cl::sycl::detail::AccessorImplHost, (__gnu_cxx::_Lock_policy)2>::operator=(std::__shared_ptr<cl::sycl::detail::AccessorImplHost, (__gnu_cxx::_Lock_policy)2>&&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 40], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 16]
        call    std::remove_reference<std::__shared_ptr<cl::sycl::detail::AccessorImplHost, (__gnu_cxx::_Lock_policy)2>&>::type&& std::move<std::__shared_ptr<cl::sycl::detail::AccessorImplHost, (__gnu_cxx::_Lock_policy)2>&>(std::__shared_ptr<cl::sycl::detail::AccessorImplHost, (__gnu_cxx::_Lock_policy)2>&)
        mov     rsi, rax
        lea     rdi, [rbp - 32]
        call    std::__shared_ptr<cl::sycl::detail::AccessorImplHost, (__gnu_cxx::_Lock_policy)2>::__shared_ptr(std::__shared_ptr<cl::sycl::detail::AccessorImplHost, (__gnu_cxx::_Lock_policy)2>&&) [base object constructor]
        mov     rsi, qword ptr [rbp - 40]       # 8-byte Reload
        lea     rdi, [rbp - 32]
        call    std::__shared_ptr<cl::sycl::detail::AccessorImplHost, (__gnu_cxx::_Lock_policy)2>::swap(std::__shared_ptr<cl::sycl::detail::AccessorImplHost, (__gnu_cxx::_Lock_policy)2>&)
        lea     rdi, [rbp - 32]
        call    std::__shared_ptr<cl::sycl::detail::AccessorImplHost, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() [base object destructor]
        mov     rax, qword ptr [rbp - 40]       # 8-byte Reload
        add     rsp, 48
        pop     rbp
        ret
std::remove_reference<std::shared_ptr<cl::sycl::detail::AccessorImplHost>&>::type&& std::move<std::shared_ptr<cl::sycl::detail::AccessorImplHost>&>(std::shared_ptr<cl::sycl::detail::AccessorImplHost>&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
std::remove_reference<std::__shared_ptr<cl::sycl::detail::AccessorImplHost, (__gnu_cxx::_Lock_policy)2>&>::type&& std::move<std::__shared_ptr<cl::sycl::detail::AccessorImplHost, (__gnu_cxx::_Lock_policy)2>&>(std::__shared_ptr<cl::sycl::detail::AccessorImplHost, (__gnu_cxx::_Lock_policy)2>&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
std::__shared_ptr<cl::sycl::detail::AccessorImplHost, (__gnu_cxx::_Lock_policy)2>::__shared_ptr(std::__shared_ptr<cl::sycl::detail::AccessorImplHost, (__gnu_cxx::_Lock_policy)2>&&) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 24], rdi       # 8-byte Spill
        mov     rax, qword ptr [rbp - 16]
        mov     rax, qword ptr [rax]
        mov     qword ptr [rdi], rax
        add     rdi, 8
        call    std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count() [base object constructor]
        mov     rdi, qword ptr [rbp - 24]       # 8-byte Reload
        add     rdi, 8
        mov     rsi, qword ptr [rbp - 16]
        add     rsi, 8
        call    std::__shared_count<(__gnu_cxx::_Lock_policy)2>::_M_swap(std::__shared_count<(__gnu_cxx::_Lock_policy)2>&)
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rax], 0
        add     rsp, 32
        pop     rbp
        ret
std::__shared_ptr<cl::sycl::detail::AccessorImplHost, (__gnu_cxx::_Lock_policy)2>::swap(std::__shared_ptr<cl::sycl::detail::AccessorImplHost, (__gnu_cxx::_Lock_policy)2>&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 24], rdi       # 8-byte Spill
        mov     rsi, qword ptr [rbp - 16]
        call    std::enable_if<__and_<std::__not_<std::__is_tuple_like<cl::sycl::detail::AccessorImplHost*> >, std::is_move_constructible<cl::sycl::detail::AccessorImplHost*>, std::is_move_assignable<cl::sycl::detail::AccessorImplHost*> >::value, void>::type std::swap<cl::sycl::detail::AccessorImplHost*>(cl::sycl::detail::AccessorImplHost*&, cl::sycl::detail::AccessorImplHost*&)
        mov     rdi, qword ptr [rbp - 24]       # 8-byte Reload
        add     rdi, 8
        mov     rsi, qword ptr [rbp - 16]
        add     rsi, 8
        call    std::__shared_count<(__gnu_cxx::_Lock_policy)2>::_M_swap(std::__shared_count<(__gnu_cxx::_Lock_policy)2>&)
        add     rsp, 32
        pop     rbp
        ret
std::__shared_ptr<cl::sycl::detail::AccessorImplHost, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() [base object destructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        add     rdi, 8
        call    std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
std::enable_if<__and_<std::__not_<std::__is_tuple_like<cl::sycl::detail::AccessorImplHost*> >, std::is_move_constructible<cl::sycl::detail::AccessorImplHost*>, std::is_move_assignable<cl::sycl::detail::AccessorImplHost*> >::value, void>::type std::swap<cl::sycl::detail::AccessorImplHost*>(cl::sycl::detail::AccessorImplHost*&, cl::sycl::detail::AccessorImplHost*&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        call    std::remove_reference<cl::sycl::detail::AccessorImplHost*&>::type&& std::move<cl::sycl::detail::AccessorImplHost*&>(cl::sycl::detail::AccessorImplHost*&)
        mov     rax, qword ptr [rax]
        mov     qword ptr [rbp - 24], rax
        mov     rdi, qword ptr [rbp - 16]
        call    std::remove_reference<cl::sycl::detail::AccessorImplHost*&>::type&& std::move<cl::sycl::detail::AccessorImplHost*&>(cl::sycl::detail::AccessorImplHost*&)
        mov     rcx, qword ptr [rax]
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rax], rcx
        lea     rdi, [rbp - 24]
        call    std::remove_reference<cl::sycl::detail::AccessorImplHost*&>::type&& std::move<cl::sycl::detail::AccessorImplHost*&>(cl::sycl::detail::AccessorImplHost*&)
        mov     rcx, qword ptr [rax]
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rax], rcx
        add     rsp, 32
        pop     rbp
        ret
std::remove_reference<cl::sycl::detail::AccessorImplHost*&>::type&& std::move<cl::sycl::detail::AccessorImplHost*&>(cl::sycl::detail::AccessorImplHost*&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
cl::sycl::handler::throwIfActionIsCreated(): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    cl::sycl::handler::getType()
        mov     ecx, eax
        xor     eax, eax
        cmp     eax, ecx
        je      .LBB477_4
        mov     edi, 64
        call    __cxa_allocate_exception
        mov     rdi, rax
        mov     rax, rdi
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        mov     esi, offset .L.str.14
        mov     edx, -59
        call    cl::sycl::runtime_error::runtime_error(char const*, int) [base object constructor]
        jmp     .LBB477_2
.LBB477_2:
        mov     rdi, qword ptr [rbp - 32]       # 8-byte Reload
        movabs  rsi, offset typeinfo for cl::sycl::runtime_error
        movabs  rdx, offset cl::sycl::runtime_error::~runtime_error() [base object destructor]
        call    __cxa_throw
        mov     rdi, qword ptr [rbp - 32]       # 8-byte Reload
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 16], rcx
        mov     dword ptr [rbp - 20], eax
        call    __cxa_free_exception
        jmp     .LBB477_5
.LBB477_4:
        add     rsp, 32
        pop     rbp
        ret
.LBB477_5:
        mov     rdi, qword ptr [rbp - 16]
        call    _Unwind_Resume@PLT
cl::sycl::detail::KernelInfo<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}>::getName(): # 
        push    rbp
        mov     rbp, rsp
        call    cl::sycl::detail::KernelInfoData<(char)95, (char)90, (char)84, (char)83, (char)90, (char)90, (char)49, (char)56, (char)99, (char)97, (char)108, (char)108, (char)95, (char)99, (char)111, (char)109, (char)109, (char)97, (char)110, (char)100, (char)95, (char)113, (char)117, (char)101, (char)117, (char)101, (char)80, (char)105, (char)69, (char)78, (char)75, (char)85, (char)108, (char)82, (char)78, (char)50, (char)99, (char)108, (char)52, (char)115, (char)121, (char)99, (char)108, (char)55, (char)104, (char)97, (char)110, (char)100, (char)108, (char)101, (char)114, (char)69, (char)69, (char)95, (char)99, (char)108, (char)69, (char)83, (char)51, (char)95, (char)69, (char)85, (char)108, (char)78, (char)83, (char)49, (char)95, (char)55, (char)110, (char)100, (char)95, (char)105, (char)116, (char)101, (char)109, (char)73, (char)76, (char)105, (char)51, (char)69, (char)69, (char)69, (char)69, (char)95>::getName()
        pop     rbp
        ret
std::enable_if<!detail::KernelLambdaHasKernelHandlerArgT<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3> >::value, void>::type cl::sycl::handler::kernel_parallel_for_wrapper<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     rsi, qword ptr [rbp - 16]
        call    void cl::sycl::handler::kernel_parallel_for<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)
        add     rsp, 16
        pop     rbp
        ret
std::enable_if<std::is_same<cl::sycl::nd_range<3>, cl::sycl::nd_range<3> >::value, void>::type cl::sycl::detail::checkValueRange<3, cl::sycl::nd_range<3> >(cl::sycl::nd_range<3> const&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 128
        mov     qword ptr [rbp - 8], rdi
        mov     rsi, qword ptr [rbp - 8]
        lea     rdi, [rbp - 32]
        call    cl::sycl::nd_range<3>::get_global_range() const
        lea     rdi, [rbp - 32]
        call    std::enable_if<std::is_same<cl::sycl::range<3>, cl::sycl::range<3> >::value||std::is_same<cl::sycl::range<3>, cl::sycl::id<3> >::value, void>::type cl::sycl::detail::checkValueRange<3, cl::sycl::range<3> >(cl::sycl::range<3> const&)
        mov     rsi, qword ptr [rbp - 8]
        lea     rdi, [rbp - 56]
        call    cl::sycl::nd_range<3>::get_local_range() const
        lea     rdi, [rbp - 56]
        call    std::enable_if<std::is_same<cl::sycl::range<3>, cl::sycl::range<3> >::value||std::is_same<cl::sycl::range<3>, cl::sycl::id<3> >::value, void>::type cl::sycl::detail::checkValueRange<3, cl::sycl::range<3> >(cl::sycl::range<3> const&)
        mov     rsi, qword ptr [rbp - 8]
        lea     rdi, [rbp - 80]
        call    cl::sycl::nd_range<3>::get_offset() const
        lea     rdi, [rbp - 80]
        call    std::enable_if<std::is_same<cl::sycl::id<3>, cl::sycl::range<3> >::value||std::is_same<cl::sycl::id<3>, cl::sycl::id<3> >::value, void>::type cl::sycl::detail::checkValueRange<3, cl::sycl::id<3> >(cl::sycl::id<3> const&)
        mov     rsi, qword ptr [rbp - 8]
        lea     rdi, [rbp - 104]
        call    cl::sycl::nd_range<3>::get_global_range() const
        mov     rsi, qword ptr [rbp - 8]
        lea     rdi, [rbp - 128]
        call    cl::sycl::nd_range<3>::get_offset() const
        lea     rdi, [rbp - 104]
        lea     rsi, [rbp - 128]
        call    void cl::sycl::detail::checkValueRange<3>(cl::sycl::range<3> const&, cl::sycl::id<3> const&)
        add     rsp, 128
        pop     rbp
        ret
void cl::sycl::detail::NDRDescT::set<3>(cl::sycl::nd_range<3>): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 128
        lea     rax, [rbp + 16]
        mov     qword ptr [rbp - 104], rax      # 8-byte Spill
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 96], rax       # 8-byte Spill
        mov     dword ptr [rbp - 12], 0
.LBB481_1:                              # =>This Inner Loop Header: Depth=1
        cmp     dword ptr [rbp - 12], 3
        jge     .LBB481_4
        mov     rsi, qword ptr [rbp - 104]      # 8-byte Reload
        lea     rdi, [rbp - 40]
        call    cl::sycl::nd_range<3>::get_global_range() const
        lea     rdi, [rbp - 40]
        mov     esi, dword ptr [rbp - 12]
        call    cl::sycl::detail::array<3>::operator[](int)
        mov     rdi, qword ptr [rbp - 96]       # 8-byte Reload
        mov     rax, qword ptr [rax]
        mov     qword ptr [rbp - 128], rax      # 8-byte Spill
        mov     esi, dword ptr [rbp - 12]
        call    cl::sycl::detail::array<3>::operator[](int)
        mov     rcx, qword ptr [rbp - 128]      # 8-byte Reload
        mov     rsi, qword ptr [rbp - 104]      # 8-byte Reload
        mov     qword ptr [rax], rcx
        lea     rdi, [rbp - 64]
        call    cl::sycl::nd_range<3>::get_local_range() const
        lea     rdi, [rbp - 64]
        mov     esi, dword ptr [rbp - 12]
        call    cl::sycl::detail::array<3>::operator[](int)
        mov     rdi, qword ptr [rbp - 96]       # 8-byte Reload
        mov     rax, qword ptr [rax]
        mov     qword ptr [rbp - 120], rax      # 8-byte Spill
        add     rdi, 24
        mov     esi, dword ptr [rbp - 12]
        call    cl::sycl::detail::array<3>::operator[](int)
        mov     rcx, qword ptr [rbp - 120]      # 8-byte Reload
        mov     rsi, qword ptr [rbp - 104]      # 8-byte Reload
        mov     qword ptr [rax], rcx
        lea     rdi, [rbp - 88]
        call    cl::sycl::nd_range<3>::get_offset() const
        lea     rdi, [rbp - 88]
        mov     esi, dword ptr [rbp - 12]
        call    cl::sycl::detail::array<3>::operator[](int)
        mov     rdi, qword ptr [rbp - 96]       # 8-byte Reload
        mov     rax, qword ptr [rax]
        mov     qword ptr [rbp - 112], rax      # 8-byte Spill
        add     rdi, 48
        mov     esi, dword ptr [rbp - 12]
        call    cl::sycl::detail::array<3>::operator[](int)
        mov     rcx, qword ptr [rbp - 112]      # 8-byte Reload
        mov     rdi, qword ptr [rbp - 96]       # 8-byte Reload
        mov     qword ptr [rax], rcx
        add     rdi, 72
        mov     esi, dword ptr [rbp - 12]
        call    cl::sycl::detail::array<3>::operator[](int)
        mov     qword ptr [rax], 0
        mov     eax, dword ptr [rbp - 12]
        add     eax, 1
        mov     dword ptr [rbp - 12], eax
        jmp     .LBB481_1
.LBB481_4:
        mov     rdi, qword ptr [rbp - 96]       # 8-byte Reload
        mov     esi, 3
        call    cl::sycl::detail::NDRDescT::setNDRangeLeftover(int)
        mov     rax, qword ptr [rbp - 96]       # 8-byte Reload
        mov     qword ptr [rax + 96], 3
        add     rsp, 128
        pop     rbp
        ret
std::remove_reference<cl::sycl::nd_range<3>&>::type&& std::move<cl::sycl::nd_range<3>&>(cl::sycl::nd_range<3>&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
void cl::sycl::handler::StoreLambda<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, 3, cl::sycl::nd_item<3> >(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 64
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 32], rdi       # 8-byte Spill
        mov     byte ptr [rbp - 9], 0
        call    std::enable_if<std::is_same<cl::sycl::nd_item<3>, cl::sycl::nd_item<3> >::value, call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}*>::type cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)
        mov     rdi, qword ptr [rbp - 32]       # 8-byte Reload
        mov     qword ptr [rbp - 24], rax
        add     rdi, 136
        call    std::vector<cl::sycl::detail::ArgDesc, std::allocator<cl::sycl::detail::ArgDesc> >::clear()
        mov     rax, qword ptr [rbp - 24]
        mov     qword ptr [rbp - 56], rax       # 8-byte Spill
        call    cl::sycl::detail::KernelInfo<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}>::getNumParams()
        mov     eax, eax
        mov     qword ptr [rbp - 48], rax       # 8-byte Spill
        xor     edi, edi
        call    cl::sycl::detail::KernelInfo<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}>::getParamDesc(int)
        mov     qword ptr [rbp - 40], rax       # 8-byte Spill
        call    cl::sycl::detail::KernelInfo<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}>::isESIMD()
        mov     rsi, qword ptr [rbp - 56]       # 8-byte Reload
        mov     rdx, qword ptr [rbp - 48]       # 8-byte Reload
        mov     rcx, qword ptr [rbp - 40]       # 8-byte Reload
        mov     rdi, qword ptr [rbp - 32]       # 8-byte Reload
        movzx   r8d, al
        and     r8d, 1
        call    cl::sycl::handler::extractArgsAndReqsFromLambda(char*, unsigned long, cl::sycl::detail::kernel_param_desc_t const*, bool)
        call    cl::sycl::detail::KernelInfo<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}>::getName()
        mov     rdi, qword ptr [rbp - 32]       # 8-byte Reload
        mov     rsi, rax
        add     rdi, 312
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(char const*)
        call    cl::sycl::detail::KernelInfo<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}>::getName()
        mov     rdi, rax
        call    cl::sycl::detail::OSUtil::getOSModuleHandle(void const*)
        mov     rcx, rax
        mov     rax, qword ptr [rbp - 32]       # 8-byte Reload
        mov     qword ptr [rax + 432], rcx
        add     rsp, 64
        pop     rbp
        ret
std::remove_reference<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&>::type&& std::move<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}::nd_item({lambda(cl::sycl::nd_item<3>)#1} const&) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     rsi, qword ptr [rbp - 16]
        call    cl::sycl::accessor<int, 1, (cl::sycl::access::mode)1026, (cl::sycl::access::target)2014, (cl::sycl::access::placeholder)0, cl::sycl::ext::oneapi::accessor_property_list<> >::accessor(cl::sycl::accessor<int, 1, (cl::sycl::access::mode)1026, (cl::sycl::access::target)2014, (cl::sycl::access::placeholder)0, cl::sycl::ext::oneapi::accessor_property_list<> > const&) [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::handler::setType(cl::sycl::detail::CG::CGTYPE): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     dword ptr [rbp - 12], esi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 24], rax       # 8-byte Spill
        mov     byte ptr [rbp - 13], 1
        mov     edi, dword ptr [rbp - 12]
        mov     esi, 1
        call    cl::sycl::detail::getVersionedCGType(unsigned int, unsigned char)
        mov     ecx, eax
        mov     rax, qword ptr [rbp - 24]       # 8-byte Reload
        mov     dword ptr [rax + 360], ecx
        add     rsp, 32
        pop     rbp
        ret
cl::sycl::handler::getType():          # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        mov     edi, dword ptr [rax + 360]
        call    cl::sycl::detail::getUnversionedCGType(unsigned int)
        movzx   eax, al
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::detail::getUnversionedCGType(unsigned int): # 
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], edi
        mov     dword ptr [rbp - 8], -1
        mov     eax, dword ptr [rbp - 8]
        shr     eax, 8
        mov     dword ptr [rbp - 8], eax
        mov     eax, dword ptr [rbp - 4]
        and     eax, dword ptr [rbp - 8]
        movzx   eax, al
        pop     rbp
        ret
cl::sycl::detail::KernelInfoData<(char)95, (char)90, (char)84, (char)83, (char)90, (char)90, (char)49, (char)56, (char)99, (char)97, (char)108, (char)108, (char)95, (char)99, (char)111, (char)109, (char)109, (char)97, (char)110, (char)100, (char)95, (char)113, (char)117, (char)101, (char)117, (char)101, (char)80, (char)105, (char)69, (char)78, (char)75, (char)85, (char)108, (char)82, (char)78, (char)50, (char)99, (char)108, (char)52, (char)115, (char)121, (char)99, (char)108, (char)55, (char)104, (char)97, (char)110, (char)100, (char)108, (char)101, (char)114, (char)69, (char)69, (char)95, (char)99, (char)108, (char)69, (char)83, (char)51, (char)95, (char)69, (char)85, (char)108, (char)78, (char)83, (char)49, (char)95, (char)55, (char)110, (char)100, (char)95, (char)105, (char)116, (char)101, (char)109, (char)73, (char)76, (char)105, (char)51, (char)69, (char)69, (char)69, (char)69, (char)95>::getName(): # 
        push    rbp
        mov     rbp, rsp
        movabs  rax, offset .L.str.15
        pop     rbp
        ret
void cl::sycl::handler::kernel_parallel_for<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        pop     rbp
        ret
std::enable_if<std::is_same<cl::sycl::range<3>, cl::sycl::range<3> >::value||std::is_same<cl::sycl::range<3>, cl::sycl::id<3> >::value, void>::type cl::sycl::detail::checkValueRange<3, cl::sycl::range<3> >(cl::sycl::range<3> const&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], 0
.LBB491_1:                              # =>This Inner Loop Header: Depth=1
        cmp     qword ptr [rbp - 16], 3
        jae     .LBB491_4
        mov     rdi, qword ptr [rbp - 8]
        mov     rax, qword ptr [rbp - 16]
        mov     esi, eax
        call    cl::sycl::detail::array<3>::operator[](int) const
        mov     rdi, rax
        call    std::enable_if<std::is_same<unsigned long, unsigned long>::value||std::is_same<unsigned long, unsigned long long>::value, void>::type cl::sycl::detail::checkValueRangeImpl<cl::sycl::range<3>, unsigned long>(unsigned long)
        mov     rax, qword ptr [rbp - 16]
        add     rax, 1
        mov     qword ptr [rbp - 16], rax
        jmp     .LBB491_1
.LBB491_4:
        mov     qword ptr [rbp - 24], 1
        mov     qword ptr [rbp - 32], 0
.LBB491_5:                              # =>This Inner Loop Header: Depth=1
        cmp     qword ptr [rbp - 32], 3
        jae     .LBB491_8
        mov     rdi, qword ptr [rbp - 8]
        mov     rax, qword ptr [rbp - 32]
        mov     esi, eax
        call    cl::sycl::detail::array<3>::operator[](int) const
        imul    rax, qword ptr [rbp - 24]
        mov     qword ptr [rbp - 24], rax
        mov     rdi, qword ptr [rbp - 24]
        call    std::enable_if<std::is_same<unsigned long long, unsigned long>::value||std::is_same<unsigned long long, unsigned long long>::value, void>::type cl::sycl::detail::checkValueRangeImpl<cl::sycl::range<3>, unsigned long long>(unsigned long long)
        mov     rax, qword ptr [rbp - 32]
        add     rax, 1
        mov     qword ptr [rbp - 32], rax
        jmp     .LBB491_5
.LBB491_8:
        add     rsp, 32
        pop     rbp
        ret
cl::sycl::nd_range<3>::get_global_range() const: # 
        push    rbp
        mov     rbp, rsp
        mov     rax, rdi
        mov     qword ptr [rbp - 8], rsi
        mov     rcx, qword ptr [rbp - 8]
        mov     rdx, qword ptr [rcx]
        mov     qword ptr [rdi], rdx
        mov     rdx, qword ptr [rcx + 8]
        mov     qword ptr [rdi + 8], rdx
        mov     rcx, qword ptr [rcx + 16]
        mov     qword ptr [rdi + 16], rcx
        pop     rbp
        ret
cl::sycl::nd_range<3>::get_local_range() const: # 
        push    rbp
        mov     rbp, rsp
        mov     rax, rdi
        mov     qword ptr [rbp - 8], rsi
        mov     rcx, qword ptr [rbp - 8]
        mov     rdx, qword ptr [rcx + 24]
        mov     qword ptr [rdi], rdx
        mov     rdx, qword ptr [rcx + 32]
        mov     qword ptr [rdi + 8], rdx
        mov     rcx, qword ptr [rcx + 40]
        mov     qword ptr [rdi + 16], rcx
        pop     rbp
        ret
std::enable_if<std::is_same<cl::sycl::id<3>, cl::sycl::range<3> >::value||std::is_same<cl::sycl::id<3>, cl::sycl::id<3> >::value, void>::type cl::sycl::detail::checkValueRange<3, cl::sycl::id<3> >(cl::sycl::id<3> const&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], 0
.LBB494_1:                              # =>This Inner Loop Header: Depth=1
        cmp     qword ptr [rbp - 16], 3
        jae     .LBB494_4
        mov     rdi, qword ptr [rbp - 8]
        mov     rax, qword ptr [rbp - 16]
        mov     esi, eax
        call    cl::sycl::detail::array<3>::operator[](int) const
        mov     rdi, rax
        call    std::enable_if<std::is_same<unsigned long, unsigned long>::value||std::is_same<unsigned long, unsigned long long>::value, void>::type cl::sycl::detail::checkValueRangeImpl<cl::sycl::id<3>, unsigned long>(unsigned long)
        mov     rax, qword ptr [rbp - 16]
        add     rax, 1
        mov     qword ptr [rbp - 16], rax
        jmp     .LBB494_1
.LBB494_4:
        mov     qword ptr [rbp - 24], 1
        mov     qword ptr [rbp - 32], 0
.LBB494_5:                              # =>This Inner Loop Header: Depth=1
        cmp     qword ptr [rbp - 32], 3
        jae     .LBB494_8
        mov     rdi, qword ptr [rbp - 8]
        mov     rax, qword ptr [rbp - 32]
        mov     esi, eax
        call    cl::sycl::detail::array<3>::operator[](int) const
        imul    rax, qword ptr [rbp - 24]
        mov     qword ptr [rbp - 24], rax
        mov     rdi, qword ptr [rbp - 24]
        call    std::enable_if<std::is_same<unsigned long long, unsigned long>::value||std::is_same<unsigned long long, unsigned long long>::value, void>::type cl::sycl::detail::checkValueRangeImpl<cl::sycl::id<3>, unsigned long long>(unsigned long long)
        mov     rax, qword ptr [rbp - 32]
        add     rax, 1
        mov     qword ptr [rbp - 32], rax
        jmp     .LBB494_5
.LBB494_8:
        add     rsp, 32
        pop     rbp
        ret
cl::sycl::nd_range<3>::get_offset() const: # 
        push    rbp
        mov     rbp, rsp
        mov     rax, rdi
        mov     qword ptr [rbp - 8], rsi
        mov     rcx, qword ptr [rbp - 8]
        mov     rdx, qword ptr [rcx + 48]
        mov     qword ptr [rdi], rdx
        mov     rdx, qword ptr [rcx + 56]
        mov     qword ptr [rdi + 8], rdx
        mov     rcx, qword ptr [rcx + 64]
        mov     qword ptr [rdi + 16], rcx
        pop     rbp
        ret
void cl::sycl::detail::checkValueRange<3>(cl::sycl::range<3> const&, cl::sycl::id<3> const&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        call    std::enable_if<std::is_same<cl::sycl::range<3>, cl::sycl::range<3> >::value||std::is_same<cl::sycl::range<3>, cl::sycl::id<3> >::value, void>::type cl::sycl::detail::checkValueRange<3, cl::sycl::range<3> >(cl::sycl::range<3> const&)
        mov     rdi, qword ptr [rbp - 16]
        call    std::enable_if<std::is_same<cl::sycl::id<3>, cl::sycl::range<3> >::value||std::is_same<cl::sycl::id<3>, cl::sycl::id<3> >::value, void>::type cl::sycl::detail::checkValueRange<3, cl::sycl::id<3> >(cl::sycl::id<3> const&)
        mov     qword ptr [rbp - 24], 0
.LBB496_1:                              # =>This Inner Loop Header: Depth=1
        cmp     qword ptr [rbp - 24], 3
        jae     .LBB496_4
        mov     rdi, qword ptr [rbp - 8]
        mov     rax, qword ptr [rbp - 24]
        mov     esi, eax
        call    cl::sycl::detail::array<3>::operator[](int) const
        mov     qword ptr [rbp - 40], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 16]
        mov     rax, qword ptr [rbp - 24]
        mov     esi, eax
        call    cl::sycl::detail::array<3>::operator[](int) const
        mov     rcx, rax
        mov     rax, qword ptr [rbp - 40]       # 8-byte Reload
        add     rax, rcx
        mov     qword ptr [rbp - 32], rax
        mov     rdi, qword ptr [rbp - 32]
        call    std::enable_if<std::is_same<unsigned long long, unsigned long>::value||std::is_same<unsigned long long, unsigned long long>::value, void>::type cl::sycl::detail::checkValueRangeImpl<cl::sycl::range<3>, unsigned long long>(unsigned long long)
        mov     rax, qword ptr [rbp - 24]
        add     rax, 1
        mov     qword ptr [rbp - 24], rax
        jmp     .LBB496_1
.LBB496_4:
        add     rsp, 48
        pop     rbp
        ret
std::enable_if<std::is_same<unsigned long, unsigned long>::value||std::is_same<unsigned long, unsigned long long>::value, void>::type cl::sycl::detail::checkValueRangeImpl<cl::sycl::range<3>, unsigned long>(unsigned long): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        cmp     qword ptr [rbp - 8], 2147483647
        jbe     .LBB497_4
        mov     edi, 64
        call    __cxa_allocate_exception
        mov     rdi, rax
        mov     rax, rdi
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        mov     esi, offset .L.str.16
        mov     edx, -30
        call    cl::sycl::runtime_error::runtime_error(char const*, int) [base object constructor]
        jmp     .LBB497_2
.LBB497_2:
        mov     rdi, qword ptr [rbp - 32]       # 8-byte Reload
        movabs  rsi, offset typeinfo for cl::sycl::runtime_error
        movabs  rdx, offset cl::sycl::runtime_error::~runtime_error() [base object destructor]
        call    __cxa_throw
        mov     rdi, qword ptr [rbp - 32]       # 8-byte Reload
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 16], rcx
        mov     dword ptr [rbp - 20], eax
        call    __cxa_free_exception
        jmp     .LBB497_5
.LBB497_4:
        add     rsp, 32
        pop     rbp
        ret
.LBB497_5:
        mov     rdi, qword ptr [rbp - 16]
        call    _Unwind_Resume@PLT
std::enable_if<std::is_same<unsigned long long, unsigned long>::value||std::is_same<unsigned long long, unsigned long long>::value, void>::type cl::sycl::detail::checkValueRangeImpl<cl::sycl::range<3>, unsigned long long>(unsigned long long): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        cmp     qword ptr [rbp - 8], 2147483647
        jbe     .LBB498_4
        mov     edi, 64
        call    __cxa_allocate_exception
        mov     rdi, rax
        mov     rax, rdi
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        mov     esi, offset .L.str.16
        mov     edx, -30
        call    cl::sycl::runtime_error::runtime_error(char const*, int) [base object constructor]
        jmp     .LBB498_2
.LBB498_2:
        mov     rdi, qword ptr [rbp - 32]       # 8-byte Reload
        movabs  rsi, offset typeinfo for cl::sycl::runtime_error
        movabs  rdx, offset cl::sycl::runtime_error::~runtime_error() [base object destructor]
        call    __cxa_throw
        mov     rdi, qword ptr [rbp - 32]       # 8-byte Reload
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 16], rcx
        mov     dword ptr [rbp - 20], eax
        call    __cxa_free_exception
        jmp     .LBB498_5
.LBB498_4:
        add     rsp, 32
        pop     rbp
        ret
.LBB498_5:
        mov     rdi, qword ptr [rbp - 16]
        call    _Unwind_Resume@PLT
std::enable_if<std::is_same<unsigned long, unsigned long>::value||std::is_same<unsigned long, unsigned long long>::value, void>::type cl::sycl::detail::checkValueRangeImpl<cl::sycl::id<3>, unsigned long>(unsigned long): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        cmp     qword ptr [rbp - 8], 2147483647
        jbe     .LBB499_4
        mov     edi, 64
        call    __cxa_allocate_exception
        mov     rdi, rax
        mov     rax, rdi
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        mov     esi, offset .L.str.17
        mov     edx, -30
        call    cl::sycl::runtime_error::runtime_error(char const*, int) [base object constructor]
        jmp     .LBB499_2
.LBB499_2:
        mov     rdi, qword ptr [rbp - 32]       # 8-byte Reload
        movabs  rsi, offset typeinfo for cl::sycl::runtime_error
        movabs  rdx, offset cl::sycl::runtime_error::~runtime_error() [base object destructor]
        call    __cxa_throw
        mov     rdi, qword ptr [rbp - 32]       # 8-byte Reload
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 16], rcx
        mov     dword ptr [rbp - 20], eax
        call    __cxa_free_exception
        jmp     .LBB499_5
.LBB499_4:
        add     rsp, 32
        pop     rbp
        ret
.LBB499_5:
        mov     rdi, qword ptr [rbp - 16]
        call    _Unwind_Resume@PLT
std::enable_if<std::is_same<unsigned long long, unsigned long>::value||std::is_same<unsigned long long, unsigned long long>::value, void>::type cl::sycl::detail::checkValueRangeImpl<cl::sycl::id<3>, unsigned long long>(unsigned long long): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        cmp     qword ptr [rbp - 8], 2147483647
        jbe     .LBB500_4
        mov     edi, 64
        call    __cxa_allocate_exception
        mov     rdi, rax
        mov     rax, rdi
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        mov     esi, offset .L.str.17
        mov     edx, -30
        call    cl::sycl::runtime_error::runtime_error(char const*, int) [base object constructor]
        jmp     .LBB500_2
.LBB500_2:
        mov     rdi, qword ptr [rbp - 32]       # 8-byte Reload
        movabs  rsi, offset typeinfo for cl::sycl::runtime_error
        movabs  rdx, offset cl::sycl::runtime_error::~runtime_error() [base object destructor]
        call    __cxa_throw
        mov     rdi, qword ptr [rbp - 32]       # 8-byte Reload
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 16], rcx
        mov     dword ptr [rbp - 20], eax
        call    __cxa_free_exception
        jmp     .LBB500_5
.LBB500_4:
        add     rsp, 32
        pop     rbp
        ret
.LBB500_5:
        mov     rdi, qword ptr [rbp - 16]
        call    _Unwind_Resume@PLT
cl::sycl::detail::NDRDescT::setNDRangeLeftover(int): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     dword ptr [rbp - 12], esi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 24], rax       # 8-byte Spill
        mov     eax, dword ptr [rbp - 12]
        mov     dword ptr [rbp - 16], eax
.LBB501_1:                              # =>This Inner Loop Header: Depth=1
        cmp     dword ptr [rbp - 16], 3
        jge     .LBB501_4
        mov     rdi, qword ptr [rbp - 24]       # 8-byte Reload
        mov     esi, dword ptr [rbp - 16]
        call    cl::sycl::detail::array<3>::operator[](int)
        mov     rdi, qword ptr [rbp - 24]       # 8-byte Reload
        mov     qword ptr [rax], 1
        add     rdi, 24
        xor     esi, esi
        call    cl::sycl::detail::array<3>::operator[](int)
        mov     rdi, qword ptr [rbp - 24]       # 8-byte Reload
        mov     rdx, qword ptr [rax]
        xor     eax, eax
        mov     ecx, 1
        cmp     rdx, 0
        cmovne  eax, ecx
        cdqe
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        add     rdi, 24
        mov     esi, dword ptr [rbp - 16]
        call    cl::sycl::detail::array<3>::operator[](int)
        mov     rcx, qword ptr [rbp - 32]       # 8-byte Reload
        mov     rdi, qword ptr [rbp - 24]       # 8-byte Reload
        mov     qword ptr [rax], rcx
        add     rdi, 48
        mov     esi, dword ptr [rbp - 16]
        call    cl::sycl::detail::array<3>::operator[](int)
        mov     rdi, qword ptr [rbp - 24]       # 8-byte Reload
        mov     qword ptr [rax], 0
        add     rdi, 72
        mov     esi, dword ptr [rbp - 16]
        call    cl::sycl::detail::array<3>::operator[](int)
        mov     qword ptr [rax], 0
        mov     eax, dword ptr [rbp - 16]
        add     eax, 1
        mov     dword ptr [rbp - 16], eax
        jmp     .LBB501_1
.LBB501_4:
        add     rsp, 32
        pop     rbp
        ret
std::enable_if<std::is_same<cl::sycl::nd_item<3>, cl::sycl::nd_item<3> >::value, call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}*>::type cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     rsi, qword ptr [rbp - 16]
        call    call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}* cl::sycl::handler::ResetHostKernelHelper<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)
        add     rsp, 16
        pop     rbp
        ret
std::vector<cl::sycl::detail::ArgDesc, std::allocator<cl::sycl::detail::ArgDesc> >::clear(): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        mov     rsi, qword ptr [rdi]
        call    std::vector<cl::sycl::detail::ArgDesc, std::allocator<cl::sycl::detail::ArgDesc> >::_M_erase_at_end(cl::sycl::detail::ArgDesc*)
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::detail::KernelInfo<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}>::getNumParams(): # 
        push    rbp
        mov     rbp, rsp
        call    cl::sycl::detail::KernelInfoData<(char)95, (char)90, (char)84, (char)83, (char)90, (char)90, (char)49, (char)56, (char)99, (char)97, (char)108, (char)108, (char)95, (char)99, (char)111, (char)109, (char)109, (char)97, (char)110, (char)100, (char)95, (char)113, (char)117, (char)101, (char)117, (char)101, (char)80, (char)105, (char)69, (char)78, (char)75, (char)85, (char)108, (char)82, (char)78, (char)50, (char)99, (char)108, (char)52, (char)115, (char)121, (char)99, (char)108, (char)55, (char)104, (char)97, (char)110, (char)100, (char)108, (char)101, (char)114, (char)69, (char)69, (char)95, (char)99, (char)108, (char)69, (char)83, (char)51, (char)95, (char)69, (char)85, (char)108, (char)78, (char)83, (char)49, (char)95, (char)55, (char)110, (char)100, (char)95, (char)105, (char)116, (char)101, (char)109, (char)73, (char)76, (char)105, (char)51, (char)69, (char)69, (char)69, (char)69, (char)95>::getNumParams()
        pop     rbp
        ret
cl::sycl::detail::KernelInfo<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}>::getParamDesc(int): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     dword ptr [rbp - 4], edi
        mov     edi, dword ptr [rbp - 4]
        call    cl::sycl::detail::KernelInfoData<(char)95, (char)90, (char)84, (char)83, (char)90, (char)90, (char)49, (char)56, (char)99, (char)97, (char)108, (char)108, (char)95, (char)99, (char)111, (char)109, (char)109, (char)97, (char)110, (char)100, (char)95, (char)113, (char)117, (char)101, (char)117, (char)101, (char)80, (char)105, (char)69, (char)78, (char)75, (char)85, (char)108, (char)82, (char)78, (char)50, (char)99, (char)108, (char)52, (char)115, (char)121, (char)99, (char)108, (char)55, (char)104, (char)97, (char)110, (char)100, (char)108, (char)101, (char)114, (char)69, (char)69, (char)95, (char)99, (char)108, (char)69, (char)83, (char)51, (char)95, (char)69, (char)85, (char)108, (char)78, (char)83, (char)49, (char)95, (char)55, (char)110, (char)100, (char)95, (char)105, (char)116, (char)101, (char)109, (char)73, (char)76, (char)105, (char)51, (char)69, (char)69, (char)69, (char)69, (char)95>::getParamDesc(unsigned int)
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::detail::KernelInfo<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}>::isESIMD(): # 
        push    rbp
        mov     rbp, rsp
        call    cl::sycl::detail::KernelInfoData<(char)95, (char)90, (char)84, (char)83, (char)90, (char)90, (char)49, (char)56, (char)99, (char)97, (char)108, (char)108, (char)95, (char)99, (char)111, (char)109, (char)109, (char)97, (char)110, (char)100, (char)95, (char)113, (char)117, (char)101, (char)117, (char)101, (char)80, (char)105, (char)69, (char)78, (char)75, (char)85, (char)108, (char)82, (char)78, (char)50, (char)99, (char)108, (char)52, (char)115, (char)121, (char)99, (char)108, (char)55, (char)104, (char)97, (char)110, (char)100, (char)108, (char)101, (char)114, (char)69, (char)69, (char)95, (char)99, (char)108, (char)69, (char)83, (char)51, (char)95, (char)69, (char)85, (char)108, (char)78, (char)83, (char)49, (char)95, (char)55, (char)110, (char)100, (char)95, (char)105, (char)116, (char)101, (char)109, (char)73, (char)76, (char)105, (char)51, (char)69, (char)69, (char)69, (char)69, (char)95>::isESIMD()
        and     al, 1
        movzx   eax, al
        pop     rbp
        ret
call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}* cl::sycl::handler::ResetHostKernelHelper<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 224
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 200], rax      # 8-byte Spill
        mov     rsi, qword ptr [rbp - 16]
        lea     rdi, [rbp - 48]
        mov     qword ptr [rbp - 192], rdi      # 8-byte Spill
        call    cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType::NormalizedKernelType(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&) [base object constructor]
        mov     rsi, qword ptr [rbp - 192]      # 8-byte Reload
        lea     rdi, [rbp - 112]
        mov     qword ptr [rbp - 184], rdi      # 8-byte Spill
        call    cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType::NormalizedKernelType(NormalizedKernelType const&) [base object constructor]
        mov     rsi, qword ptr [rbp - 184]      # 8-byte Reload
        lea     rdi, [rbp - 80]
        call    std::function<void (cl::sycl::nd_item<3> const&)>::function<cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType, void, void>(cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType)
        jmp     .LBB507_1
.LBB507_1:
        lea     rdi, [rbp - 112]
        call    cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType::~NormalizedKernelType() [base object destructor]
        mov     edi, 40
        call    operator new(unsigned long)
        mov     qword ptr [rbp - 208], rax      # 8-byte Spill
        jmp     .LBB507_2
.LBB507_2:
        mov     rax, qword ptr [rbp - 208]      # 8-byte Reload
        mov     byte ptr [rbp - 169], 1
        mov     qword ptr [rbp - 216], rax      # 8-byte Spill
        lea     rdi, [rbp - 168]
        lea     rsi, [rbp - 80]
        call    std::function<void (cl::sycl::nd_item<3> const&)>::function(std::function<void (cl::sycl::nd_item<3> const&)> const&) [base object constructor]
        jmp     .LBB507_3
.LBB507_3:
        mov     rdi, qword ptr [rbp - 216]      # 8-byte Reload
        lea     rsi, [rbp - 168]
        call    cl::sycl::detail::HostKernel<std::function<void (cl::sycl::nd_item<3> const&)>, cl::sycl::nd_item<3>, 3>::HostKernel(std::function<void (cl::sycl::nd_item<3> const&)>) [base object constructor]
        jmp     .LBB507_4
.LBB507_4:
        mov     byte ptr [rbp - 169], 0
        lea     rdi, [rbp - 168]
        call    std::function<void (cl::sycl::nd_item<3> const&)>::~function() [base object destructor]
        mov     rax, qword ptr [rbp - 216]      # 8-byte Reload
        mov     rdi, qword ptr [rbp - 200]      # 8-byte Reload
        mov     qword ptr [rbp - 136], rax
        add     rdi, 416
        mov     rsi, qword ptr [rbp - 136]
        call    std::unique_ptr<cl::sycl::detail::HostKernelBase, std::default_delete<cl::sycl::detail::HostKernelBase> >::reset(cl::sycl::detail::HostKernelBase*)
        mov     rdi, qword ptr [rbp - 136]
        add     rdi, 8
        call    cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType* std::function<void (cl::sycl::nd_item<3> const&)>::target<cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType>()
        mov     qword ptr [rbp - 224], rax      # 8-byte Spill
        lea     rdi, [rbp - 80]
        call    std::function<void (cl::sycl::nd_item<3> const&)>::~function() [base object destructor]
        lea     rdi, [rbp - 48]
        call    cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType::~NormalizedKernelType() [base object destructor]
        mov     rax, qword ptr [rbp - 224]      # 8-byte Reload
        add     rsp, 224
        pop     rbp
        ret
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 120], rcx
        mov     dword ptr [rbp - 124], eax
        lea     rdi, [rbp - 112]
        call    cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType::~NormalizedKernelType() [base object destructor]
        jmp     .LBB507_13
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 120], rcx
        mov     dword ptr [rbp - 124], eax
        jmp     .LBB507_12
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 120], rcx
        mov     dword ptr [rbp - 124], eax
        jmp     .LBB507_9
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 120], rcx
        mov     dword ptr [rbp - 124], eax
        lea     rdi, [rbp - 168]
        call    std::function<void (cl::sycl::nd_item<3> const&)>::~function() [base object destructor]
.LBB507_9:
        test    byte ptr [rbp - 169], 1
        jne     .LBB507_10
        jmp     .LBB507_11
.LBB507_10:
        mov     rdi, qword ptr [rbp - 208]      # 8-byte Reload
        call    operator delete(void*)
.LBB507_11:
        jmp     .LBB507_12
.LBB507_12:
        lea     rdi, [rbp - 80]
        call    std::function<void (cl::sycl::nd_item<3> const&)>::~function() [base object destructor]
.LBB507_13:
        lea     rdi, [rbp - 48]
        call    cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType::~NormalizedKernelType() [base object destructor]
        mov     rdi, qword ptr [rbp - 120]
        call    _Unwind_Resume@PLT
cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType::NormalizedKernelType(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     rsi, qword ptr [rbp - 16]
        call    call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}::nd_item({lambda(cl::sycl::nd_item<3>)#1} const&) [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType::NormalizedKernelType(NormalizedKernelType const&) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     rsi, qword ptr [rbp - 16]
        call    call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}::nd_item({lambda(cl::sycl::nd_item<3>)#1} const&) [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
std::function<void (cl::sycl::nd_item<3> const&)>::function<cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType, void, void>(cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        mov     qword ptr [rbp - 32], rsi       # 8-byte Spill
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 40], rdi       # 8-byte Spill
        call    std::_Function_base::_Function_base() [base object constructor]
        mov     rdi, qword ptr [rbp - 32]       # 8-byte Reload
        call    bool std::_Function_base::_Base_manager<cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType>::_M_not_empty_function<cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType>(cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType const&)
        mov     byte ptr [rbp - 21], al         # 1-byte Spill
        jmp     .LBB510_1
.LBB510_1:
        mov     al, byte ptr [rbp - 21]         # 1-byte Reload
        test    al, 1
        jne     .LBB510_2
        jmp     .LBB510_5
.LBB510_2:
        mov     rdi, qword ptr [rbp - 32]       # 8-byte Reload
        call    std::remove_reference<cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType&>::type&& std::move<cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType&>(cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType&)
        mov     rdi, qword ptr [rbp - 40]       # 8-byte Reload
        mov     rsi, rax
        call    std::_Function_base::_Base_manager<cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType>::_M_init_functor(std::_Any_data&, cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType&&)
        jmp     .LBB510_3
.LBB510_3:
        mov     rax, qword ptr [rbp - 40]       # 8-byte Reload
        movabs  rcx, offset std::_Function_handler<void (cl::sycl::nd_item<3> const&), cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType>::_M_invoke(std::_Any_data const&, cl::sycl::nd_item<3> const&)
        mov     qword ptr [rax + 24], rcx
        movabs  rcx, offset std::_Function_handler<void (cl::sycl::nd_item<3> const&), cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
        mov     qword ptr [rax + 16], rcx
        jmp     .LBB510_5
        mov     rdi, qword ptr [rbp - 40]       # 8-byte Reload
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 16], rcx
        mov     dword ptr [rbp - 20], eax
        call    std::_Function_base::~_Function_base() [base object destructor]
        jmp     .LBB510_6
.LBB510_5:
        add     rsp, 48
        pop     rbp
        ret
.LBB510_6:
        mov     rdi, qword ptr [rbp - 16]
        call    _Unwind_Resume@PLT
cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType::~NormalizedKernelType() [base object destructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}::~nd_item() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
std::function<void (cl::sycl::nd_item<3> const&)>::function(std::function<void (cl::sycl::nd_item<3> const&)> const&) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 40], rdi       # 8-byte Spill
        call    std::_Function_base::_Function_base() [base object constructor]
        mov     rdi, qword ptr [rbp - 16]
        call    std::function<void (cl::sycl::nd_item<3> const&)>::operator bool() const
        test    al, 1
        jne     .LBB512_1
        jmp     .LBB512_4
.LBB512_1:
        mov     rdi, qword ptr [rbp - 40]       # 8-byte Reload
        mov     rsi, qword ptr [rbp - 16]
        mov     rax, qword ptr [rsi + 16]
        mov     edx, 2
        call    rax
        jmp     .LBB512_2
.LBB512_2:
        mov     rax, qword ptr [rbp - 40]       # 8-byte Reload
        mov     rcx, qword ptr [rbp - 16]
        mov     rcx, qword ptr [rcx + 24]
        mov     qword ptr [rax + 24], rcx
        mov     rcx, qword ptr [rbp - 16]
        mov     rcx, qword ptr [rcx + 16]
        mov     qword ptr [rax + 16], rcx
        jmp     .LBB512_4
        mov     rdi, qword ptr [rbp - 40]       # 8-byte Reload
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 24], rcx
        mov     dword ptr [rbp - 28], eax
        call    std::_Function_base::~_Function_base() [base object destructor]
        jmp     .LBB512_5
.LBB512_4:
        add     rsp, 48
        pop     rbp
        ret
.LBB512_5:
        mov     rdi, qword ptr [rbp - 24]
        call    _Unwind_Resume@PLT
cl::sycl::detail::HostKernel<std::function<void (cl::sycl::nd_item<3> const&)>, cl::sycl::nd_item<3>, 3>::HostKernel(std::function<void (cl::sycl::nd_item<3> const&)>) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        mov     qword ptr [rbp - 32], rsi       # 8-byte Spill
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 40], rdi       # 8-byte Spill
        call    cl::sycl::detail::HostKernelBase::HostKernelBase() [base object constructor]
        mov     rdi, qword ptr [rbp - 40]       # 8-byte Reload
        mov     rsi, qword ptr [rbp - 32]       # 8-byte Reload
        mov     qword ptr [rdi], offset vtable for cl::sycl::detail::HostKernel<std::function<void (cl::sycl::nd_item<3> const&)>, cl::sycl::nd_item<3>, 3>+16
        add     rdi, 8
        call    std::function<void (cl::sycl::nd_item<3> const&)>::function(std::function<void (cl::sycl::nd_item<3> const&)> const&) [base object constructor]
        jmp     .LBB513_1
.LBB513_1:
        add     rsp, 48
        pop     rbp
        ret
        mov     rdi, qword ptr [rbp - 40]       # 8-byte Reload
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 16], rcx
        mov     dword ptr [rbp - 20], eax
        call    cl::sycl::detail::HostKernelBase::~HostKernelBase() [base object destructor]
        mov     rdi, qword ptr [rbp - 16]
        call    _Unwind_Resume@PLT
std::function<void (cl::sycl::nd_item<3> const&)>::~function() [base object destructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::_Function_base::~_Function_base() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
std::unique_ptr<cl::sycl::detail::HostKernelBase, std::default_delete<cl::sycl::detail::HostKernelBase> >::reset(cl::sycl::detail::HostKernelBase*): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 24], rax       # 8-byte Spill
        lea     rdi, [rbp - 16]
        call    std::remove_reference<cl::sycl::detail::HostKernelBase*&>::type&& std::move<cl::sycl::detail::HostKernelBase*&>(cl::sycl::detail::HostKernelBase*&)
        mov     rdi, qword ptr [rbp - 24]       # 8-byte Reload
        mov     rsi, qword ptr [rax]
        call    std::__uniq_ptr_impl<cl::sycl::detail::HostKernelBase, std::default_delete<cl::sycl::detail::HostKernelBase> >::reset(cl::sycl::detail::HostKernelBase*)
        add     rsp, 32
        pop     rbp
        ret
cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType* std::function<void (cl::sycl::nd_item<3> const&)>::target<cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType>(): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 16], rax
        mov     rdi, qword ptr [rbp - 16]
        call    cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType const* std::function<void (cl::sycl::nd_item<3> const&)>::target<cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType>() const
        mov     qword ptr [rbp - 24], rax
        mov     rax, qword ptr [rbp - 24]
        add     rsp, 32
        pop     rbp
        ret
bool std::_Function_base::_Base_manager<cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType>::_M_not_empty_function<cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType>(cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType const&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     al, 1
        and     al, 1
        movzx   eax, al
        pop     rbp
        ret
std::_Function_base::_Base_manager<cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType>::_M_init_functor(std::_Any_data&, cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType&&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 16]
        call    std::remove_reference<cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType&>::type&& std::move<cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType&>(cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType&)
        mov     rdi, qword ptr [rbp - 32]       # 8-byte Reload
        mov     rsi, rax
        call    std::_Function_base::_Base_manager<cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType>::_M_init_functor(std::_Any_data&, cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType&&, std::integral_constant<bool, false>)
        add     rsp, 32
        pop     rbp
        ret
std::remove_reference<cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType&>::type&& std::move<cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType&>(cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
std::_Function_handler<void (cl::sycl::nd_item<3> const&), cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType>::_M_invoke(std::_Any_data const&, cl::sycl::nd_item<3> const&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        call    std::_Function_base::_Base_manager<cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType>::_M_get_pointer(std::_Any_data const&)
        mov     qword ptr [rbp - 24], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 16]
        call    cl::sycl::nd_item<3> const& std::forward<cl::sycl::nd_item<3> const&>(std::remove_reference<cl::sycl::nd_item<3> const&>::type&)
        mov     rdi, qword ptr [rbp - 24]       # 8-byte Reload
        mov     rsi, rax
        call    std::enable_if<is_invocable_r_v<void, cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType&, cl::sycl::nd_item<3> const&>, void>::type std::__invoke_r<void, cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType&, cl::sycl::nd_item<3> const&>(cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType&, cl::sycl::nd_item<3> const&)
        add     rsp, 32
        pop     rbp
        ret
std::_Function_handler<void (cl::sycl::nd_item<3> const&), cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     dword ptr [rbp - 20], edx
        mov     eax, dword ptr [rbp - 20]
        mov     dword ptr [rbp - 24], eax       # 4-byte Spill
        test    eax, eax
        je      .LBB521_1
        jmp     .LBB521_5
.LBB521_5:
        mov     eax, dword ptr [rbp - 24]       # 4-byte Reload
        sub     eax, 1
        je      .LBB521_2
        jmp     .LBB521_3
.LBB521_1:
        mov     rdi, qword ptr [rbp - 8]
        call    std::type_info const*& std::_Any_data::_M_access<std::type_info const*>()
        movabs  rcx, offset typeinfo for cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType
        mov     qword ptr [rax], rcx
        jmp     .LBB521_4
.LBB521_2:
        mov     rdi, qword ptr [rbp - 16]
        call    std::_Function_base::_Base_manager<cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType>::_M_get_pointer(std::_Any_data const&)
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 8]
        call    cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType*& std::_Any_data::_M_access<cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType*>()
        mov     rcx, qword ptr [rbp - 32]       # 8-byte Reload
        mov     qword ptr [rax], rcx
        jmp     .LBB521_4
.LBB521_3:
        mov     rdi, qword ptr [rbp - 8]
        mov     rsi, qword ptr [rbp - 16]
        mov     edx, dword ptr [rbp - 20]
        call    std::_Function_base::_Base_manager<cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
.LBB521_4:
        xor     eax, eax
        and     al, 1
        movzx   eax, al
        add     rsp, 32
        pop     rbp
        ret
std::_Function_base::_Base_manager<cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType>::_M_init_functor(std::_Any_data&, cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType&&, std::integral_constant<bool, false>): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 16], rdi
        mov     qword ptr [rbp - 24], rsi
        mov     edi, 32
        call    operator new(unsigned long)
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 24]
        call    std::remove_reference<cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType&>::type&& std::move<cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType&>(cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType&)
        mov     rdi, qword ptr [rbp - 32]       # 8-byte Reload
        mov     rsi, rax
        call    cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType::NormalizedKernelType(NormalizedKernelType&&) [base object constructor]
        mov     rdi, qword ptr [rbp - 16]
        call    cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType*& std::_Any_data::_M_access<cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType*>()
        mov     rcx, qword ptr [rbp - 32]       # 8-byte Reload
        mov     qword ptr [rax], rcx
        add     rsp, 32
        pop     rbp
        ret
cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType::NormalizedKernelType(NormalizedKernelType&&) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     rsi, qword ptr [rbp - 16]
        call    call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}::nd_item({lambda(cl::sycl::nd_item<3>)#1}&&) [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType*& std::_Any_data::_M_access<cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType*>(): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::_Any_data::_M_access()
        add     rsp, 16
        pop     rbp
        ret
call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}::nd_item({lambda(cl::sycl::nd_item<3>)#1}&&) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     rsi, qword ptr [rbp - 16]
        call    cl::sycl::accessor<int, 1, (cl::sycl::access::mode)1026, (cl::sycl::access::target)2014, (cl::sycl::access::placeholder)0, cl::sycl::ext::oneapi::accessor_property_list<> >::accessor(cl::sycl::accessor<int, 1, (cl::sycl::access::mode)1026, (cl::sycl::access::target)2014, (cl::sycl::access::placeholder)0, cl::sycl::ext::oneapi::accessor_property_list<> >&&) [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::accessor<int, 1, (cl::sycl::access::mode)1026, (cl::sycl::access::target)2014, (cl::sycl::access::placeholder)0, cl::sycl::ext::oneapi::accessor_property_list<> >::accessor(cl::sycl::accessor<int, 1, (cl::sycl::access::mode)1026, (cl::sycl::access::target)2014, (cl::sycl::access::placeholder)0, cl::sycl::ext::oneapi::accessor_property_list<> >&&) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 24], rdi       # 8-byte Spill
        mov     rsi, qword ptr [rbp - 16]
        call    cl::sycl::detail::AccessorBaseHost::AccessorBaseHost(cl::sycl::detail::AccessorBaseHost&&) [base object constructor]
        mov     rax, qword ptr [rbp - 24]       # 8-byte Reload
        mov     rcx, qword ptr [rbp - 16]
        mov     rdx, qword ptr [rcx + 16]
        mov     qword ptr [rax + 16], rdx
        mov     rcx, qword ptr [rcx + 24]
        mov     qword ptr [rax + 24], rcx
        add     rsp, 32
        pop     rbp
        ret
cl::sycl::detail::AccessorBaseHost::AccessorBaseHost(cl::sycl::detail::AccessorBaseHost&&) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     rsi, qword ptr [rbp - 16]
        call    std::shared_ptr<cl::sycl::detail::AccessorImplHost>::shared_ptr(std::shared_ptr<cl::sycl::detail::AccessorImplHost>&&) [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
std::shared_ptr<cl::sycl::detail::AccessorImplHost>::shared_ptr(std::shared_ptr<cl::sycl::detail::AccessorImplHost>&&) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 24], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 16]
        call    std::remove_reference<std::shared_ptr<cl::sycl::detail::AccessorImplHost>&>::type&& std::move<std::shared_ptr<cl::sycl::detail::AccessorImplHost>&>(std::shared_ptr<cl::sycl::detail::AccessorImplHost>&)
        mov     rdi, qword ptr [rbp - 24]       # 8-byte Reload
        mov     rsi, rax
        call    std::__shared_ptr<cl::sycl::detail::AccessorImplHost, (__gnu_cxx::_Lock_policy)2>::__shared_ptr(std::__shared_ptr<cl::sycl::detail::AccessorImplHost, (__gnu_cxx::_Lock_policy)2>&&) [base object constructor]
        add     rsp, 32
        pop     rbp
        ret
std::enable_if<is_invocable_r_v<void, cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType&, cl::sycl::nd_item<3> const&>, void>::type std::__invoke_r<void, cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType&, cl::sycl::nd_item<3> const&>(cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType&, cl::sycl::nd_item<3> const&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        call    cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType& std::forward<cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType&>(std::remove_reference<cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType&>::type&)
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 16]
        call    cl::sycl::nd_item<3> const& std::forward<cl::sycl::nd_item<3> const&>(std::remove_reference<cl::sycl::nd_item<3> const&>::type&)
        mov     rdi, qword ptr [rbp - 32]       # 8-byte Reload
        mov     rsi, rax
        call    void std::__invoke_impl<void, cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType&, cl::sycl::nd_item<3> const&>(std::__invoke_other, cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType&, cl::sycl::nd_item<3> const&)
        add     rsp, 32
        pop     rbp
        ret
std::_Function_base::_Base_manager<cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType>::_M_get_pointer(std::_Any_data const&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType* const& std::_Any_data::_M_access<cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType*>() const
        mov     rax, qword ptr [rax]
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::nd_item<3> const& std::forward<cl::sycl::nd_item<3> const&>(std::remove_reference<cl::sycl::nd_item<3> const&>::type&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
void std::__invoke_impl<void, cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType&, cl::sycl::nd_item<3> const&>(std::__invoke_other, cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType&, cl::sycl::nd_item<3> const&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 16], rdi
        mov     qword ptr [rbp - 24], rsi
        mov     rdi, qword ptr [rbp - 16]
        call    cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType& std::forward<cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType&>(std::remove_reference<cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType&>::type&)
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 24]
        call    cl::sycl::nd_item<3> const& std::forward<cl::sycl::nd_item<3> const&>(std::remove_reference<cl::sycl::nd_item<3> const&>::type&)
        mov     rdi, qword ptr [rbp - 32]       # 8-byte Reload
        mov     rsi, rax
        call    cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType::operator()(cl::sycl::nd_item<3> const&)
        add     rsp, 32
        pop     rbp
        ret
cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType& std::forward<cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType&>(std::remove_reference<cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType&>::type&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType::operator()(cl::sycl::nd_item<3> const&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 512
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rsi, qword ptr [rbp - 8]
        lea     rdi, [rbp - 48]
        mov     qword ptr [rbp - 288], rdi      # 8-byte Spill
        call    call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}::nd_item({lambda(cl::sycl::nd_item<3>)#1} const&) [base object constructor]
        mov     rsi, qword ptr [rbp - 16]
        lea     rdi, [rbp - 264]
        mov     qword ptr [rbp - 296], rdi      # 8-byte Spill
        mov     edx, 216
        call    memcpy@PLT
        mov     rsi, qword ptr [rbp - 296]      # 8-byte Reload
        mov     rdi, rsp
        mov     ecx, 27
        rep movsq es:[rdi], [rsi]
        mov     rdi, qword ptr [rbp - 288]      # 8-byte Reload
        call    std::enable_if<!KernelLambdaHasKernelHandlerArgT<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3> >::value, void>::type cl::sycl::detail::runKernelWithArg<cl::sycl::nd_item<3>, call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>)
        jmp     .LBB534_1
.LBB534_1:
        lea     rdi, [rbp - 48]
        call    call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}::~nd_item() [base object destructor]
        add     rsp, 512
        pop     rbp
        ret
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 272], rcx
        mov     dword ptr [rbp - 276], eax
        lea     rdi, [rbp - 48]
        call    call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}::~nd_item() [base object destructor]
        mov     rdi, qword ptr [rbp - 272]
        call    _Unwind_Resume@PLT
std::enable_if<!KernelLambdaHasKernelHandlerArgT<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3> >::value, void>::type cl::sycl::detail::runKernelWithArg<cl::sycl::nd_item<3>, call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 448
        mov     qword ptr [rbp - 224], rdi      # 8-byte Spill
        lea     rsi, [rbp + 16]
        lea     rdi, [rbp - 216]
        mov     edx, 216
        call    memcpy@PLT
        mov     rdi, rsp
        mov     ecx, 27
        lea     rsi, [rbp - 216]
        rep movsq es:[rdi], [rsi]
        mov     rdi, qword ptr [rbp - 224]      # 8-byte Reload
        call    call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}::operator()(cl::sycl::nd_item<3>) const
        add     rsp, 448
        pop     rbp
        ret
call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}::operator()(cl::sycl::nd_item<3>) const: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 80
        lea     rax, [rbp + 16]
        mov     qword ptr [rbp - 64], rax       # 8-byte Spill
        mov     qword ptr [rbp - 8], rdi
        mov     rsi, qword ptr [rbp - 8]
        lea     rdi, [rbp - 40]
        mov     qword ptr [rbp - 72], rdi       # 8-byte Spill
        call    cl::sycl::accessor<int, 1, (cl::sycl::access::mode)1026, (cl::sycl::access::target)2014, (cl::sycl::access::placeholder)0, cl::sycl::ext::oneapi::accessor_property_list<> >::accessor(cl::sycl::accessor<int, 1, (cl::sycl::access::mode)1026, (cl::sycl::access::target)2014, (cl::sycl::access::placeholder)0, cl::sycl::ext::oneapi::accessor_property_list<> > const&) [base object constructor]
        mov     rdi, qword ptr [rbp - 72]       # 8-byte Reload
        mov     rsi, qword ptr [rbp - 64]       # 8-byte Reload
        call    block_reduce_kernel(cl::sycl::accessor<int, 1, (cl::sycl::access::mode)1026, (cl::sycl::access::target)2014, (cl::sycl::access::placeholder)0, cl::sycl::ext::oneapi::accessor_property_list<> >, cl::sycl::nd_item<3> const&)
        jmp     .LBB536_1
.LBB536_1:
        lea     rdi, [rbp - 40]
        call    cl::sycl::accessor<int, 1, (cl::sycl::access::mode)1026, (cl::sycl::access::target)2014, (cl::sycl::access::placeholder)0, cl::sycl::ext::oneapi::accessor_property_list<> >::~accessor() [base object destructor]
        add     rsp, 80
        pop     rbp
        ret
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 48], rcx
        mov     dword ptr [rbp - 52], eax
        lea     rdi, [rbp - 40]
        call    cl::sycl::accessor<int, 1, (cl::sycl::access::mode)1026, (cl::sycl::access::target)2014, (cl::sycl::access::placeholder)0, cl::sycl::ext::oneapi::accessor_property_list<> >::~accessor() [base object destructor]
        mov     rdi, qword ptr [rbp - 48]
        call    _Unwind_Resume@PLT
cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType* const& std::_Any_data::_M_access<cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType*>() const: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::_Any_data::_M_access() const
        add     rsp, 16
        pop     rbp
        ret
std::_Function_base::_Base_manager<cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     dword ptr [rbp - 20], edx
        mov     eax, dword ptr [rbp - 20]
        mov     qword ptr [rbp - 40], rax       # 8-byte Spill
        sub     rax, 3
        ja      .LBB538_5
        mov     rax, qword ptr [rbp - 40]       # 8-byte Reload
        mov     rax, qword ptr [8*rax + .LJTI538_0]
        jmp     rax
.LBB538_1:
        mov     rdi, qword ptr [rbp - 8]
        call    std::type_info const*& std::_Any_data::_M_access<std::type_info const*>()
        movabs  rcx, offset typeinfo for cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType
        mov     qword ptr [rax], rcx
        jmp     .LBB538_5
.LBB538_2:
        mov     rdi, qword ptr [rbp - 16]
        call    std::_Function_base::_Base_manager<cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType>::_M_get_pointer(std::_Any_data const&)
        mov     qword ptr [rbp - 48], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 8]
        call    cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType*& std::_Any_data::_M_access<cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType*>()
        mov     rcx, qword ptr [rbp - 48]       # 8-byte Reload
        mov     qword ptr [rax], rcx
        jmp     .LBB538_5
.LBB538_3:
        mov     rdi, qword ptr [rbp - 8]
        mov     rsi, qword ptr [rbp - 16]
        call    std::_Function_base::_Base_manager<cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType>::_M_clone(std::_Any_data&, std::_Any_data const&, std::integral_constant<bool, false>)
        jmp     .LBB538_5
.LBB538_4:
        mov     rdi, qword ptr [rbp - 8]
        call    std::_Function_base::_Base_manager<cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType>::_M_destroy(std::_Any_data&, std::integral_constant<bool, false>)
.LBB538_5:
        xor     eax, eax
        and     al, 1
        movzx   eax, al
        add     rsp, 48
        pop     rbp
        ret
.LJTI538_0:
        .quad   .LBB538_1
        .quad   .LBB538_2
        .quad   .LBB538_3
        .quad   .LBB538_4
        .intel_syntax noprefix
std::_Function_base::_Base_manager<cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType>::_M_clone(std::_Any_data&, std::_Any_data const&, std::integral_constant<bool, false>): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 64
        mov     qword ptr [rbp - 16], rdi
        mov     qword ptr [rbp - 24], rsi
        mov     edi, 32
        call    operator new(unsigned long)
        mov     rcx, rax
        mov     qword ptr [rbp - 64], rcx       # 8-byte Spill
        mov     qword ptr [rbp - 56], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 24]
        call    cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType const* const& std::_Any_data::_M_access<cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType const*>() const
        mov     qword ptr [rbp - 48], rax       # 8-byte Spill
        jmp     .LBB539_1
.LBB539_1:
        mov     rdi, qword ptr [rbp - 56]       # 8-byte Reload
        mov     rax, qword ptr [rbp - 48]       # 8-byte Reload
        mov     rsi, qword ptr [rax]
        call    cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType::NormalizedKernelType(NormalizedKernelType const&) [base object constructor]
        mov     rdi, qword ptr [rbp - 16]
        call    cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType*& std::_Any_data::_M_access<cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType*>()
        mov     rcx, qword ptr [rbp - 56]       # 8-byte Reload
        mov     qword ptr [rax], rcx
        add     rsp, 64
        pop     rbp
        ret
        mov     rdi, qword ptr [rbp - 64]       # 8-byte Reload
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 32], rcx
        mov     dword ptr [rbp - 36], eax
        call    operator delete(void*)
        mov     rdi, qword ptr [rbp - 32]
        call    _Unwind_Resume@PLT
std::_Function_base::_Base_manager<cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType>::_M_destroy(std::_Any_data&, std::integral_constant<bool, false>): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 16], rdi
        mov     rdi, qword ptr [rbp - 16]
        call    cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType*& std::_Any_data::_M_access<cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType*>()
        mov     rax, qword ptr [rax]
        mov     qword ptr [rbp - 24], rax       # 8-byte Spill
        cmp     rax, 0
        je      .LBB540_2
        mov     rdi, qword ptr [rbp - 24]       # 8-byte Reload
        call    cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType::~NormalizedKernelType() [base object destructor]
        mov     rdi, qword ptr [rbp - 24]       # 8-byte Reload
        call    operator delete(void*)
.LBB540_2:
        add     rsp, 32
        pop     rbp
        ret
cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType const* const& std::_Any_data::_M_access<cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType const*>() const: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::_Any_data::_M_access() const
        add     rsp, 16
        pop     rbp
        ret
std::function<void (cl::sycl::nd_item<3> const&)>::operator bool() const: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::_Function_base::_M_empty() const
        mov     byte ptr [rbp - 9], al          # 1-byte Spill
        jmp     .LBB542_1
.LBB542_1:
        mov     al, byte ptr [rbp - 9]          # 1-byte Reload
        xor     al, -1
        and     al, 1
        movzx   eax, al
        add     rsp, 16
        pop     rbp
        ret
        mov     rdi, rax
        call    __clang_call_terminate
std::_Function_base::_M_empty() const:      # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        cmp     qword ptr [rax + 16], 0
        setne   al
        xor     al, -1
        and     al, 1
        movzx   eax, al
        pop     rbp
        ret
cl::sycl::detail::HostKernelBase::HostKernelBase() [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        movabs  rcx, offset vtable for cl::sycl::detail::HostKernelBase
        add     rcx, 16
        mov     qword ptr [rax], rcx
        pop     rbp
        ret
cl::sycl::detail::HostKernel<std::function<void (cl::sycl::nd_item<3> const&)>, cl::sycl::nd_item<3>, 3>::call(cl::sycl::detail::NDRDescT const&, cl::sycl::detail::HostProfilingInfo*): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 368
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 288], rax      # 8-byte Spill
        mov     rsi, qword ptr [rbp - 16]
        lea     rdi, [rbp - 128]
        mov     edx, 104
        call    memcpy@PLT
        mov     rdi, qword ptr [rbp - 16]
        xor     esi, esi
        call    cl::sycl::detail::array<3>::operator[](int) const
        cmp     rax, 0
        jne     .LBB545_3
        mov     rdi, qword ptr [rbp - 16]
        add     rdi, 72
        xor     esi, esi
        call    cl::sycl::detail::array<3>::operator[](int) const
        cmp     rax, 0
        je      .LBB545_3
        lea     rdi, [rbp - 152]
        mov     ecx, 1
        mov     rsi, rcx
        mov     rdx, rcx
        call    cl::sycl::range<3>::range<3>(std::enable_if<(3)==(3), unsigned long>::type, unsigned long, unsigned long)
        mov     rax, qword ptr [rbp - 16]
        mov     rax, qword ptr [rax + 96]
        mov     dword ptr [rbp - 292], eax      # 4-byte Spill
        mov     rsi, qword ptr [rbp - 16]
        add     rsi, 72
        lea     rdi, [rbp - 248]
        lea     rdx, [rbp - 152]
        call    cl::sycl::operator*(cl::sycl::range<3> const&, cl::sycl::range<3> const&)
        mov     rax, qword ptr [rbp - 152]
        mov     qword ptr [rbp - 272], rax
        mov     rax, qword ptr [rbp - 144]
        mov     qword ptr [rbp - 264], rax
        mov     rax, qword ptr [rbp - 136]
        mov     qword ptr [rbp - 256], rax
        lea     rdi, [rbp - 224]
        lea     rcx, [rbp - 248]
        lea     rax, [rbp - 272]
        mov     rdx, qword ptr [rcx]
        mov     qword ptr [rsp], rdx
        mov     rdx, qword ptr [rcx + 8]
        mov     qword ptr [rsp + 8], rdx
        mov     rcx, qword ptr [rcx + 16]
        mov     qword ptr [rsp + 16], rcx
        mov     rcx, qword ptr [rax]
        mov     qword ptr [rsp + 24], rcx
        mov     rcx, qword ptr [rax + 8]
        mov     qword ptr [rsp + 32], rcx
        mov     rax, qword ptr [rax + 16]
        mov     qword ptr [rsp + 40], rax
        call    cl::sycl::nd_range<3>::nd_range(cl::sycl::range<3>, cl::sycl::range<3>) [base object constructor]
        mov     esi, dword ptr [rbp - 292]      # 4-byte Reload
        mov     rcx, qword ptr [rbp - 160]
        mov     rax, rsp
        mov     qword ptr [rax + 64], rcx
        movups  xmm0, xmmword ptr [rbp - 224]
        movups  xmm1, xmmword ptr [rbp - 208]
        movups  xmm2, xmmword ptr [rbp - 192]
        movups  xmm3, xmmword ptr [rbp - 176]
        movups  xmmword ptr [rax + 48], xmm3
        movups  xmmword ptr [rax + 32], xmm2
        movups  xmmword ptr [rax + 16], xmm1
        movups  xmmword ptr [rax], xmm0
        lea     rdi, [rbp - 128]
        call    cl::sycl::detail::NDRDescT::set(int, cl::sycl::nd_range<3>)
.LBB545_3:
        lea     rdi, [rbp - 128]
        add     rdi, 24
        xor     esi, esi
        call    cl::sycl::detail::array<3>::operator[](int)
        cmp     qword ptr [rax], 0
        jne     .LBB545_9
        mov     qword ptr [rbp - 280], 0
.LBB545_5:                              # =>This Inner Loop Header: Depth=1
        mov     rax, qword ptr [rbp - 280]
        cmp     rax, qword ptr [rbp - 32]
        jae     .LBB545_8
        lea     rdi, [rbp - 128]
        add     rdi, 24
        mov     rax, qword ptr [rbp - 280]
        mov     esi, eax
        call    cl::sycl::detail::array<3>::operator[](int)
        mov     qword ptr [rax], 1
        mov     rax, qword ptr [rbp - 280]
        add     rax, 1
        mov     qword ptr [rbp - 280], rax
        jmp     .LBB545_5
.LBB545_8:
        jmp     .LBB545_9
.LBB545_9:
        cmp     qword ptr [rbp - 24], 0
        je      .LBB545_11
        mov     rdi, qword ptr [rbp - 24]
        call    cl::sycl::detail::HostProfilingInfo::start()
.LBB545_11:
        mov     rdi, qword ptr [rbp - 288]      # 8-byte Reload
        lea     rsi, [rbp - 128]
        call    std::enable_if<std::is_same<cl::sycl::nd_item<3>, cl::sycl::nd_item<3> >::value, void>::type cl::sycl::detail::HostKernel<std::function<void (cl::sycl::nd_item<3> const&)>, cl::sycl::nd_item<3>, 3>::runOnHost<cl::sycl::nd_item<3> >(cl::sycl::detail::NDRDescT const&)
        cmp     qword ptr [rbp - 24], 0
        je      .LBB545_13
        mov     rdi, qword ptr [rbp - 24]
        call    cl::sycl::detail::HostProfilingInfo::end()
.LBB545_13:
        add     rsp, 368
        pop     rbp
        ret
cl::sycl::detail::HostKernel<std::function<void (cl::sycl::nd_item<3> const&)>, cl::sycl::nd_item<3>, 3>::getPtr(): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        add     rax, 8
        pop     rbp
        ret
cl::sycl::detail::HostKernel<std::function<void (cl::sycl::nd_item<3> const&)>, cl::sycl::nd_item<3>, 3>::~HostKernel() [base object destructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 16], rdi       # 8-byte Spill
        movabs  rax, offset vtable for cl::sycl::detail::HostKernel<std::function<void (cl::sycl::nd_item<3> const&)>, cl::sycl::nd_item<3>, 3>
        add     rax, 16
        mov     qword ptr [rdi], rax
        add     rdi, 8
        call    std::function<void (cl::sycl::nd_item<3> const&)>::~function() [base object destructor]
        mov     rdi, qword ptr [rbp - 16]       # 8-byte Reload
        call    cl::sycl::detail::HostKernelBase::~HostKernelBase() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::detail::HostKernel<std::function<void (cl::sycl::nd_item<3> const&)>, cl::sycl::nd_item<3>, 3>::~HostKernel() [deleting destructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 16], rdi       # 8-byte Spill
        call    cl::sycl::detail::HostKernel<std::function<void (cl::sycl::nd_item<3> const&)>, cl::sycl::nd_item<3>, 3>::~HostKernel() [base object destructor]
        mov     rdi, qword ptr [rbp - 16]       # 8-byte Reload
        call    operator delete(void*)
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::detail::HostKernelBase::~HostKernelBase() [base object destructor]: # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        pop     rbp
        ret
cl::sycl::detail::HostKernelBase::~HostKernelBase() [deleting destructor]: # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        ud2
cl::sycl::detail::NDRDescT::set(int, cl::sycl::nd_range<3>): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 128
        lea     rax, [rbp + 16]
        mov     qword ptr [rbp - 104], rax      # 8-byte Spill
        mov     qword ptr [rbp - 8], rdi
        mov     dword ptr [rbp - 12], esi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 96], rax       # 8-byte Spill
        mov     dword ptr [rbp - 16], 0
.LBB551_1:                              # =>This Inner Loop Header: Depth=1
        mov     eax, dword ptr [rbp - 16]
        cmp     eax, dword ptr [rbp - 12]
        jge     .LBB551_4
        mov     rsi, qword ptr [rbp - 104]      # 8-byte Reload
        lea     rdi, [rbp - 40]
        call    cl::sycl::nd_range<3>::get_global_range() const
        lea     rdi, [rbp - 40]
        mov     esi, dword ptr [rbp - 16]
        call    cl::sycl::detail::array<3>::operator[](int)
        mov     rdi, qword ptr [rbp - 96]       # 8-byte Reload
        mov     rax, qword ptr [rax]
        mov     qword ptr [rbp - 128], rax      # 8-byte Spill
        mov     esi, dword ptr [rbp - 16]
        call    cl::sycl::detail::array<3>::operator[](int)
        mov     rcx, qword ptr [rbp - 128]      # 8-byte Reload
        mov     rsi, qword ptr [rbp - 104]      # 8-byte Reload
        mov     qword ptr [rax], rcx
        lea     rdi, [rbp - 64]
        call    cl::sycl::nd_range<3>::get_local_range() const
        lea     rdi, [rbp - 64]
        mov     esi, dword ptr [rbp - 16]
        call    cl::sycl::detail::array<3>::operator[](int)
        mov     rdi, qword ptr [rbp - 96]       # 8-byte Reload
        mov     rax, qword ptr [rax]
        mov     qword ptr [rbp - 120], rax      # 8-byte Spill
        add     rdi, 24
        mov     esi, dword ptr [rbp - 16]
        call    cl::sycl::detail::array<3>::operator[](int)
        mov     rcx, qword ptr [rbp - 120]      # 8-byte Reload
        mov     rsi, qword ptr [rbp - 104]      # 8-byte Reload
        mov     qword ptr [rax], rcx
        lea     rdi, [rbp - 88]
        call    cl::sycl::nd_range<3>::get_offset() const
        lea     rdi, [rbp - 88]
        mov     esi, dword ptr [rbp - 16]
        call    cl::sycl::detail::array<3>::operator[](int)
        mov     rdi, qword ptr [rbp - 96]       # 8-byte Reload
        mov     rax, qword ptr [rax]
        mov     qword ptr [rbp - 112], rax      # 8-byte Spill
        add     rdi, 48
        mov     esi, dword ptr [rbp - 16]
        call    cl::sycl::detail::array<3>::operator[](int)
        mov     rcx, qword ptr [rbp - 112]      # 8-byte Reload
        mov     rdi, qword ptr [rbp - 96]       # 8-byte Reload
        mov     qword ptr [rax], rcx
        add     rdi, 72
        mov     esi, dword ptr [rbp - 16]
        call    cl::sycl::detail::array<3>::operator[](int)
        mov     qword ptr [rax], 0
        mov     eax, dword ptr [rbp - 16]
        add     eax, 1
        mov     dword ptr [rbp - 16], eax
        jmp     .LBB551_1
.LBB551_4:
        mov     rdi, qword ptr [rbp - 96]       # 8-byte Reload
        mov     esi, dword ptr [rbp - 12]
        call    cl::sycl::detail::NDRDescT::setNDRangeLeftover(int)
        mov     rax, qword ptr [rbp - 96]       # 8-byte Reload
        movsxd  rcx, dword ptr [rbp - 12]
        mov     qword ptr [rax + 96], rcx
        add     rsp, 128
        pop     rbp
        ret
cl::sycl::operator*(cl::sycl::range<3> const&, cl::sycl::range<3> const&):   # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 40], rdi       # 8-byte Spill
        mov     rax, rdi
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        mov     qword ptr [rbp - 8], rsi
        mov     qword ptr [rbp - 16], rdx
        mov     rax, qword ptr [rbp - 8]
        mov     rcx, qword ptr [rax]
        mov     qword ptr [rdi], rcx
        mov     rcx, qword ptr [rax + 8]
        mov     qword ptr [rdi + 8], rcx
        mov     rax, qword ptr [rax + 16]
        mov     qword ptr [rdi + 16], rax
        mov     dword ptr [rbp - 20], 0
.LBB552_1:                              # =>This Inner Loop Header: Depth=1
        cmp     dword ptr [rbp - 20], 3
        jge     .LBB552_4
        mov     rax, qword ptr [rbp - 40]       # 8-byte Reload
        mov     rcx, qword ptr [rbp - 8]
        movsxd  rdx, dword ptr [rbp - 20]
        mov     rdx, qword ptr [rcx + 8*rdx]
        mov     rcx, qword ptr [rbp - 16]
        movsxd  rsi, dword ptr [rbp - 20]
        imul    rdx, qword ptr [rcx + 8*rsi]
        movsxd  rcx, dword ptr [rbp - 20]
        mov     qword ptr [rax + 8*rcx], rdx
        mov     eax, dword ptr [rbp - 20]
        add     eax, 1
        mov     dword ptr [rbp - 20], eax
        jmp     .LBB552_1
.LBB552_4:
        mov     rax, qword ptr [rbp - 32]       # 8-byte Reload
        pop     rbp
        ret
std::enable_if<std::is_same<cl::sycl::nd_item<3>, cl::sycl::nd_item<3> >::value, void>::type cl::sycl::detail::HostKernel<std::function<void (cl::sycl::nd_item<3> const&)>, cl::sycl::nd_item<3>, 3>::runOnHost<cl::sycl::nd_item<3> >(cl::sycl::detail::NDRDescT const&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 464
        mov     qword ptr [rbp - 176], rdi
        mov     qword ptr [rbp - 184], rsi
        mov     rax, qword ptr [rbp - 176]
        mov     qword ptr [rbp - 360], rax      # 8-byte Spill
        lea     rdi, [rbp - 208]
        call    cl::sycl::range<3> cl::sycl::detail::InitializedVal<3, cl::sycl::range>::get<0>()
        mov     dword ptr [rbp - 212], 0
.LBB553_1:                              # =>This Inner Loop Header: Depth=1
        cmp     dword ptr [rbp - 212], 3
        jge     .LBB553_9
        mov     rdi, qword ptr [rbp - 184]
        add     rdi, 24
        mov     esi, dword ptr [rbp - 212]
        call    cl::sycl::detail::array<3>::operator[](int) const
        cmp     rax, 0
        je      .LBB553_4
        mov     rdi, qword ptr [rbp - 184]
        mov     esi, dword ptr [rbp - 212]
        call    cl::sycl::detail::array<3>::operator[](int) const
        mov     qword ptr [rbp - 368], rax      # 8-byte Spill
        mov     rdi, qword ptr [rbp - 184]
        add     rdi, 24
        mov     esi, dword ptr [rbp - 212]
        call    cl::sycl::detail::array<3>::operator[](int) const
        mov     rcx, rax
        mov     rax, qword ptr [rbp - 368]      # 8-byte Reload
        xor     edx, edx
        div     rcx
        cmp     rdx, 0
        je      .LBB553_7
.LBB553_4:
        mov     edi, 64
        call    __cxa_allocate_exception
        mov     rdi, rax
        mov     rax, rdi
        mov     qword ptr [rbp - 376], rax      # 8-byte Spill
        mov     esi, offset .L.str.18
        mov     edx, -54
        call    cl::sycl::nd_range_error::nd_range_error(char const*, int) [base object constructor]
        jmp     .LBB553_5
.LBB553_5:
        mov     rdi, qword ptr [rbp - 376]      # 8-byte Reload
        movabs  rsi, offset typeinfo for cl::sycl::nd_range_error
        movabs  rdx, offset cl::sycl::nd_range_error::~nd_range_error() [base object destructor]
        call    __cxa_throw
        mov     rdi, qword ptr [rbp - 376]      # 8-byte Reload
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 224], rcx
        mov     dword ptr [rbp - 228], eax
        call    __cxa_free_exception
        jmp     .LBB553_14
.LBB553_7:                              #   in Loop: Header=BB553_1 Depth=1
        mov     rdi, qword ptr [rbp - 184]
        mov     esi, dword ptr [rbp - 212]
        call    cl::sycl::detail::array<3>::operator[](int) const
        mov     qword ptr [rbp - 392], rax      # 8-byte Spill
        mov     rdi, qword ptr [rbp - 184]
        add     rdi, 24
        mov     esi, dword ptr [rbp - 212]
        call    cl::sycl::detail::array<3>::operator[](int) const
        mov     rcx, rax
        mov     rax, qword ptr [rbp - 392]      # 8-byte Reload
        xor     edx, edx
        div     rcx
        mov     qword ptr [rbp - 384], rax      # 8-byte Spill
        lea     rdi, [rbp - 208]
        mov     esi, dword ptr [rbp - 212]
        call    cl::sycl::detail::array<3>::operator[](int)
        mov     rcx, qword ptr [rbp - 384]      # 8-byte Reload
        mov     qword ptr [rax], rcx
        mov     eax, dword ptr [rbp - 212]
        add     eax, 1
        mov     dword ptr [rbp - 212], eax
        jmp     .LBB553_1
.LBB553_9:
        lea     rdi, [rbp - 256]
        call    cl::sycl::range<3> cl::sycl::detail::InitializedVal<3, cl::sycl::range>::get<0>()
        lea     rdi, [rbp - 280]
        call    cl::sycl::range<3> cl::sycl::detail::InitializedVal<3, cl::sycl::range>::get<0>()
        lea     rdi, [rbp - 304]
        call    cl::sycl::id<3>::id() [base object constructor]
        mov     dword ptr [rbp - 308], 0
.LBB553_10:                             # =>This Inner Loop Header: Depth=1
        cmp     dword ptr [rbp - 308], 3
        jge     .LBB553_13
        mov     rdi, qword ptr [rbp - 184]
        add     rdi, 48
        mov     esi, dword ptr [rbp - 308]
        call    cl::sycl::detail::array<3>::operator[](int) const
        mov     qword ptr [rbp - 416], rax      # 8-byte Spill
        lea     rdi, [rbp - 304]
        mov     esi, dword ptr [rbp - 308]
        call    cl::sycl::detail::array<3>::operator[](int)
        mov     rcx, qword ptr [rbp - 416]      # 8-byte Reload
        mov     qword ptr [rax], rcx
        mov     rdi, qword ptr [rbp - 184]
        add     rdi, 24
        mov     esi, dword ptr [rbp - 308]
        call    cl::sycl::detail::array<3>::operator[](int) const
        mov     qword ptr [rbp - 408], rax      # 8-byte Spill
        lea     rdi, [rbp - 256]
        mov     esi, dword ptr [rbp - 308]
        call    cl::sycl::detail::array<3>::operator[](int)
        mov     rcx, qword ptr [rbp - 408]      # 8-byte Reload
        mov     qword ptr [rax], rcx
        mov     rdi, qword ptr [rbp - 184]
        mov     esi, dword ptr [rbp - 308]
        call    cl::sycl::detail::array<3>::operator[](int) const
        mov     qword ptr [rbp - 400], rax      # 8-byte Spill
        lea     rdi, [rbp - 280]
        mov     esi, dword ptr [rbp - 308]
        call    cl::sycl::detail::array<3>::operator[](int)
        mov     rcx, qword ptr [rbp - 400]      # 8-byte Reload
        mov     qword ptr [rax], rcx
        mov     eax, dword ptr [rbp - 308]
        add     eax, 1
        mov     dword ptr [rbp - 308], eax
        jmp     .LBB553_10
.LBB553_13:
        mov     rax, qword ptr [rbp - 360]      # 8-byte Reload
        lea     rcx, [rbp - 280]
        mov     qword ptr [rbp - 352], rcx
        lea     rcx, [rbp - 256]
        mov     qword ptr [rbp - 344], rcx
        lea     rcx, [rbp - 208]
        mov     qword ptr [rbp - 336], rcx
        lea     rcx, [rbp - 304]
        mov     qword ptr [rbp - 328], rcx
        mov     qword ptr [rbp - 320], rax
        lea     rdi, [rbp - 168]
        lea     rsi, [rbp - 352]
        mov     edx, 40
        call    memcpy@PLT
        lea     rax, [rbp - 208]
        mov     qword ptr [rbp - 8], rax
        lea     rdi, [rbp - 32]
        call    cl::sycl::range<3> cl::sycl::detail::InitializedVal<3, cl::sycl::range>::get<0>()
        lea     rdi, [rbp - 56]
        call    cl::sycl::range<3> cl::sycl::detail::InitializedVal<3, cl::sycl::range>::get<1>()
        lea     rdi, [rbp - 80]
        call    cl::sycl::range<3> cl::sycl::detail::InitializedVal<3, cl::sycl::range>::get<0>()
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 424], rax      # 8-byte Spill
        lea     rdi, [rbp - 128]
        lea     rsi, [rbp - 168]
        mov     edx, 40
        call    memcpy@PLT
        mov     rcx, qword ptr [rbp - 424]      # 8-byte Reload
        mov     rdx, qword ptr [rbp - 96]
        mov     rax, rsp
        mov     qword ptr [rax + 32], rdx
        movups  xmm0, xmmword ptr [rbp - 128]
        movups  xmm1, xmmword ptr [rbp - 112]
        movups  xmmword ptr [rax + 16], xmm1
        movups  xmmword ptr [rax], xmm0
        lea     rdi, [rbp - 88]
        lea     rsi, [rbp - 32]
        lea     rdx, [rbp - 56]
        lea     r8, [rbp - 80]
        call    cl::sycl::detail::NDLoopIterateImpl<3, 2, cl::sycl::range, cl::sycl::detail::HostKernel<std::function<void (cl::sycl::nd_item<3> const&)>, cl::sycl::nd_item<3>, 3>::runOnHost<cl::sycl::nd_item<3> >(cl::sycl::detail::NDRDescT const&)::{lambda(cl::sycl::id<3> const&)#1}, cl::sycl::range>::NDLoopIterateImpl(cl::sycl::range<3> const&, cl::sycl::range<3> const&, cl::sycl::range<3> const&, cl::sycl::detail::HostKernel<std::function<void (cl::sycl::nd_item<3> const&)>, cl::sycl::nd_item<3>, 3>::runOnHost<cl::sycl::nd_item<3> >(cl::sycl::detail::NDRDescT const&)::{lambda(cl::sycl::id<3> const&)#1}, cl::sycl::range<3>&) [base object constructor]
        add     rsp, 464
        pop     rbp
        ret
.LBB553_14:
        mov     rdi, qword ptr [rbp - 224]
        call    _Unwind_Resume@PLT
cl::sycl::nd_range_error::nd_range_error(char const*, int) [base object constructor]:     # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 112
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     dword ptr [rbp - 20], edx
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 104], rax      # 8-byte Spill
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rbp - 96], rax       # 8-byte Spill
        lea     rdi, [rbp - 64]
        mov     qword ptr [rbp - 88], rdi       # 8-byte Spill
        call    std::allocator<char>::allocator() [complete object constructor]
        mov     rsi, qword ptr [rbp - 96]       # 8-byte Reload
        mov     rdx, qword ptr [rbp - 88]       # 8-byte Reload
        lea     rdi, [rbp - 56]
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&)
        jmp     .LBB554_1
.LBB554_1:
        mov     rdi, qword ptr [rbp - 104]      # 8-byte Reload
        mov     edx, dword ptr [rbp - 20]
        lea     rsi, [rbp - 56]
        call    cl::sycl::nd_range_error::nd_range_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int) [base object constructor]
        jmp     .LBB554_2
.LBB554_2:
        lea     rdi, [rbp - 56]
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() [complete object destructor]
        lea     rdi, [rbp - 64]
        call    std::allocator<char>::~allocator() [complete object destructor]
        add     rsp, 112
        pop     rbp
        ret
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 72], rcx
        mov     dword ptr [rbp - 76], eax
        jmp     .LBB554_5
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 72], rcx
        mov     dword ptr [rbp - 76], eax
        lea     rdi, [rbp - 56]
        call    std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() [complete object destructor]
.LBB554_5:
        lea     rdi, [rbp - 64]
        call    std::allocator<char>::~allocator() [complete object destructor]
        mov     rdi, qword ptr [rbp - 72]
        call    _Unwind_Resume@PLT
cl::sycl::nd_range_error::~nd_range_error() [base object destructor]:        # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    cl::sycl::runtime_error::~runtime_error() [base object destructor]
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::id<3>::id() [base object constructor]:               # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    cl::sycl::detail::array<3>::array<3, 0ul>()
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::nd_range_error::nd_range_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 64
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     dword ptr [rbp - 20], edx
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 48], rax       # 8-byte Spill
        mov     qword ptr [rbp - 56], rax       # 8-byte Spill
        mov     edi, 4
        call    cl::sycl::make_error_code(cl::sycl::errc)
        mov     rdi, qword ptr [rbp - 56]       # 8-byte Reload
        mov     dword ptr [rbp - 40], eax
        mov     qword ptr [rbp - 32], rdx
        mov     rcx, qword ptr [rbp - 16]
        mov     r8d, dword ptr [rbp - 20]
        mov     esi, dword ptr [rbp - 40]
        mov     rdx, qword ptr [rbp - 32]
        call    cl::sycl::runtime_error::runtime_error(std::error_code, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int) [base object constructor]
        mov     rax, qword ptr [rbp - 48]       # 8-byte Reload
        movabs  rcx, offset vtable for cl::sycl::nd_range_error
        add     rcx, 16
        mov     qword ptr [rax], rcx
        add     rsp, 64
        pop     rbp
        ret
cl::sycl::nd_range_error::~nd_range_error() [deleting destructor]:        # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 16], rdi       # 8-byte Spill
        call    cl::sycl::nd_range_error::~nd_range_error() [base object destructor]
        mov     rdi, qword ptr [rbp - 16]       # 8-byte Reload
        call    operator delete(void*)
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::detail::array<3>::array<3, 0ul>(): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        xor     eax, eax
        mov     ecx, eax
        mov     rsi, rcx
        mov     rdx, rcx
        call    cl::sycl::detail::array<3>::array<3>(std::enable_if<(3)==(3), unsigned long>::type, unsigned long, unsigned long)
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::range<3> cl::sycl::detail::InitializedVal<3, cl::sycl::range>::get<1>(): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     rax, rdi
        mov     qword ptr [rbp - 8], rax        # 8-byte Spill
        mov     ecx, 1
        mov     rsi, rcx
        mov     rdx, rcx
        call    cl::sycl::range<3>::range<3>(std::enable_if<(3)==(3), unsigned long>::type, unsigned long, unsigned long)
        mov     rax, qword ptr [rbp - 8]        # 8-byte Reload
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::detail::NDLoopIterateImpl<3, 2, cl::sycl::range, cl::sycl::detail::HostKernel<std::function<void (cl::sycl::nd_item<3> const&)>, cl::sycl::nd_item<3>, 3>::runOnHost<cl::sycl::nd_item<3> >(cl::sycl::detail::NDRDescT const&)::{lambda(cl::sycl::id<3> const&)#1}, cl::sycl::range>::NDLoopIterateImpl(cl::sycl::range<3> const&, cl::sycl::range<3> const&, cl::sycl::range<3> const&, cl::sycl::detail::HostKernel<std::function<void (cl::sycl::nd_item<3> const&)>, cl::sycl::nd_item<3>, 3>::runOnHost<cl::sycl::nd_item<3> >(cl::sycl::detail::NDRDescT const&)::{lambda(cl::sycl::id<3> const&)#1}, cl::sycl::range<3>&) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 192
        lea     rax, [rbp + 16]
        mov     qword ptr [rbp - 112], rax      # 8-byte Spill
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        mov     qword ptr [rbp - 32], rcx
        mov     qword ptr [rbp - 40], r8
        mov     qword ptr [rbp - 48], 0
        mov     rdi, qword ptr [rbp - 16]
        xor     esi, esi
        call    cl::sycl::detail::array<3>::operator[](int) const
        mov     qword ptr [rbp - 104], rax      # 8-byte Spill
        mov     rdi, qword ptr [rbp - 40]
        xor     esi, esi
        call    cl::sycl::detail::array<3>::operator[](int)
        mov     rcx, qword ptr [rbp - 104]      # 8-byte Reload
        mov     qword ptr [rax], rcx
.LBB561_1:                              # =>This Inner Loop Header: Depth=1
        mov     rdi, qword ptr [rbp - 40]
        xor     esi, esi
        call    cl::sycl::detail::array<3>::operator[](int)
        mov     rax, qword ptr [rax]
        mov     qword ptr [rbp - 120], rax      # 8-byte Spill
        mov     rdi, qword ptr [rbp - 32]
        xor     esi, esi
        call    cl::sycl::detail::array<3>::operator[](int) const
        mov     rcx, rax
        mov     rax, qword ptr [rbp - 120]      # 8-byte Reload
        cmp     rax, rcx
        jae     .LBB561_4
        mov     rsi, qword ptr [rbp - 112]      # 8-byte Reload
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rbp - 144], rax      # 8-byte Spill
        mov     rax, qword ptr [rbp - 24]
        mov     qword ptr [rbp - 136], rax      # 8-byte Spill
        mov     rax, qword ptr [rbp - 32]
        mov     qword ptr [rbp - 128], rax      # 8-byte Spill
        lea     rdi, [rbp - 96]
        mov     edx, 40
        call    memcpy@PLT
        mov     rsi, qword ptr [rbp - 144]      # 8-byte Reload
        mov     rdx, qword ptr [rbp - 136]      # 8-byte Reload
        mov     rcx, qword ptr [rbp - 128]      # 8-byte Reload
        mov     r8, qword ptr [rbp - 40]
        mov     rdi, qword ptr [rbp - 64]
        mov     rax, rsp
        mov     qword ptr [rax + 32], rdi
        movups  xmm0, xmmword ptr [rbp - 96]
        movups  xmm1, xmmword ptr [rbp - 80]
        movups  xmmword ptr [rax + 16], xmm1
        movups  xmmword ptr [rax], xmm0
        lea     rdi, [rbp - 56]
        call    cl::sycl::detail::NDLoopIterateImpl<3, 1, cl::sycl::range, cl::sycl::detail::HostKernel<std::function<void (cl::sycl::nd_item<3> const&)>, cl::sycl::nd_item<3>, 3>::runOnHost<cl::sycl::nd_item<3> >(cl::sycl::detail::NDRDescT const&)::{lambda(cl::sycl::id<3> const&)#1}, cl::sycl::range>::NDLoopIterateImpl(cl::sycl::range<3> const&, cl::sycl::range<3> const&, cl::sycl::range<3> const&, cl::sycl::detail::HostKernel<std::function<void (cl::sycl::nd_item<3> const&)>, cl::sycl::nd_item<3>, 3>::runOnHost<cl::sycl::nd_item<3> >(cl::sycl::detail::NDRDescT const&)::{lambda(cl::sycl::id<3> const&)#1}, cl::sycl::range<3>&) [base object constructor]
        mov     rdi, qword ptr [rbp - 24]
        xor     esi, esi
        call    cl::sycl::detail::array<3>::operator[](int) const
        mov     qword ptr [rbp - 152], rax      # 8-byte Spill
        mov     rdi, qword ptr [rbp - 40]
        xor     esi, esi
        call    cl::sycl::detail::array<3>::operator[](int)
        mov     rcx, qword ptr [rbp - 152]      # 8-byte Reload
        add     rcx, qword ptr [rax]
        mov     qword ptr [rax], rcx
        jmp     .LBB561_1
.LBB561_4:
        add     rsp, 192
        pop     rbp
        ret
cl::sycl::detail::NDLoopIterateImpl<3, 1, cl::sycl::range, cl::sycl::detail::HostKernel<std::function<void (cl::sycl::nd_item<3> const&)>, cl::sycl::nd_item<3>, 3>::runOnHost<cl::sycl::nd_item<3> >(cl::sycl::detail::NDRDescT const&)::{lambda(cl::sycl::id<3> const&)#1}, cl::sycl::range>::NDLoopIterateImpl(cl::sycl::range<3> const&, cl::sycl::range<3> const&, cl::sycl::range<3> const&, cl::sycl::detail::HostKernel<std::function<void (cl::sycl::nd_item<3> const&)>, cl::sycl::nd_item<3>, 3>::runOnHost<cl::sycl::nd_item<3> >(cl::sycl::detail::NDRDescT const&)::{lambda(cl::sycl::id<3> const&)#1}, cl::sycl::range<3>&) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 192
        lea     rax, [rbp + 16]
        mov     qword ptr [rbp - 112], rax      # 8-byte Spill
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        mov     qword ptr [rbp - 32], rcx
        mov     qword ptr [rbp - 40], r8
        mov     qword ptr [rbp - 48], 1
        mov     rdi, qword ptr [rbp - 16]
        mov     esi, 1
        call    cl::sycl::detail::array<3>::operator[](int) const
        mov     qword ptr [rbp - 104], rax      # 8-byte Spill
        mov     rdi, qword ptr [rbp - 40]
        mov     esi, 1
        call    cl::sycl::detail::array<3>::operator[](int)
        mov     rcx, qword ptr [rbp - 104]      # 8-byte Reload
        mov     qword ptr [rax], rcx
.LBB562_1:                              # =>This Inner Loop Header: Depth=1
        mov     rdi, qword ptr [rbp - 40]
        mov     esi, 1
        call    cl::sycl::detail::array<3>::operator[](int)
        mov     rax, qword ptr [rax]
        mov     qword ptr [rbp - 120], rax      # 8-byte Spill
        mov     rdi, qword ptr [rbp - 32]
        mov     esi, 1
        call    cl::sycl::detail::array<3>::operator[](int) const
        mov     rcx, rax
        mov     rax, qword ptr [rbp - 120]      # 8-byte Reload
        cmp     rax, rcx
        jae     .LBB562_4
        mov     rsi, qword ptr [rbp - 112]      # 8-byte Reload
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rbp - 144], rax      # 8-byte Spill
        mov     rax, qword ptr [rbp - 24]
        mov     qword ptr [rbp - 136], rax      # 8-byte Spill
        mov     rax, qword ptr [rbp - 32]
        mov     qword ptr [rbp - 128], rax      # 8-byte Spill
        lea     rdi, [rbp - 96]
        mov     edx, 40
        call    memcpy@PLT
        mov     rsi, qword ptr [rbp - 144]      # 8-byte Reload
        mov     rdx, qword ptr [rbp - 136]      # 8-byte Reload
        mov     rcx, qword ptr [rbp - 128]      # 8-byte Reload
        mov     r8, qword ptr [rbp - 40]
        mov     rdi, qword ptr [rbp - 64]
        mov     rax, rsp
        mov     qword ptr [rax + 32], rdi
        movups  xmm0, xmmword ptr [rbp - 96]
        movups  xmm1, xmmword ptr [rbp - 80]
        movups  xmmword ptr [rax + 16], xmm1
        movups  xmmword ptr [rax], xmm0
        lea     rdi, [rbp - 56]
        call    cl::sycl::detail::NDLoopIterateImpl<3, 0, cl::sycl::range, cl::sycl::detail::HostKernel<std::function<void (cl::sycl::nd_item<3> const&)>, cl::sycl::nd_item<3>, 3>::runOnHost<cl::sycl::nd_item<3> >(cl::sycl::detail::NDRDescT const&)::{lambda(cl::sycl::id<3> const&)#1}, cl::sycl::range>::NDLoopIterateImpl(cl::sycl::range<3> const&, cl::sycl::range<3> const&, cl::sycl::range<3> const&, cl::sycl::detail::HostKernel<std::function<void (cl::sycl::nd_item<3> const&)>, cl::sycl::nd_item<3>, 3>::runOnHost<cl::sycl::nd_item<3> >(cl::sycl::detail::NDRDescT const&)::{lambda(cl::sycl::id<3> const&)#1}, cl::sycl::range<3>&) [base object constructor]
        mov     rdi, qword ptr [rbp - 24]
        mov     esi, 1
        call    cl::sycl::detail::array<3>::operator[](int) const
        mov     qword ptr [rbp - 152], rax      # 8-byte Spill
        mov     rdi, qword ptr [rbp - 40]
        mov     esi, 1
        call    cl::sycl::detail::array<3>::operator[](int)
        mov     rcx, qword ptr [rbp - 152]      # 8-byte Reload
        add     rcx, qword ptr [rax]
        mov     qword ptr [rax], rcx
        jmp     .LBB562_1
.LBB562_4:
        add     rsp, 192
        pop     rbp
        ret
cl::sycl::detail::NDLoopIterateImpl<3, 0, cl::sycl::range, cl::sycl::detail::HostKernel<std::function<void (cl::sycl::nd_item<3> const&)>, cl::sycl::nd_item<3>, 3>::runOnHost<cl::sycl::nd_item<3> >(cl::sycl::detail::NDRDescT const&)::{lambda(cl::sycl::id<3> const&)#1}, cl::sycl::range>::NDLoopIterateImpl(cl::sycl::range<3> const&, cl::sycl::range<3> const&, cl::sycl::range<3> const&, cl::sycl::detail::HostKernel<std::function<void (cl::sycl::nd_item<3> const&)>, cl::sycl::nd_item<3>, 3>::runOnHost<cl::sycl::nd_item<3> >(cl::sycl::detail::NDRDescT const&)::{lambda(cl::sycl::id<3> const&)#1}, cl::sycl::range<3>&) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 112
        lea     rax, [rbp + 16]
        mov     qword ptr [rbp - 88], rax       # 8-byte Spill
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        mov     qword ptr [rbp - 32], rcx
        mov     qword ptr [rbp - 40], r8
        mov     qword ptr [rbp - 48], 2
        mov     rdi, qword ptr [rbp - 16]
        mov     esi, 2
        call    cl::sycl::detail::array<3>::operator[](int) const
        mov     qword ptr [rbp - 80], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 40]
        mov     esi, 2
        call    cl::sycl::detail::array<3>::operator[](int)
        mov     rcx, qword ptr [rbp - 80]       # 8-byte Reload
        mov     qword ptr [rax], rcx
.LBB563_1:                              # =>This Inner Loop Header: Depth=1
        mov     rdi, qword ptr [rbp - 40]
        mov     esi, 2
        call    cl::sycl::detail::array<3>::operator[](int)
        mov     rax, qword ptr [rax]
        mov     qword ptr [rbp - 96], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 32]
        mov     esi, 2
        call    cl::sycl::detail::array<3>::operator[](int) const
        mov     rcx, rax
        mov     rax, qword ptr [rbp - 96]       # 8-byte Reload
        cmp     rax, rcx
        jae     .LBB563_4
        mov     rsi, qword ptr [rbp - 40]
        lea     rdi, [rbp - 72]
        call    cl::sycl::detail::array<3>::operator cl::sycl::id<3>() const
        mov     rdi, qword ptr [rbp - 88]       # 8-byte Reload
        lea     rsi, [rbp - 72]
        call    cl::sycl::detail::HostKernel<std::function<void (cl::sycl::nd_item<3> const&)>, cl::sycl::nd_item<3>, 3>::runOnHost<cl::sycl::nd_item<3> >(cl::sycl::detail::NDRDescT const&)::{lambda(cl::sycl::id<3> const&)#1}::operator()(cl::sycl::id<3> const&) const
        mov     rdi, qword ptr [rbp - 24]
        mov     esi, 2
        call    cl::sycl::detail::array<3>::operator[](int) const
        mov     qword ptr [rbp - 104], rax      # 8-byte Spill
        mov     rdi, qword ptr [rbp - 40]
        mov     esi, 2
        call    cl::sycl::detail::array<3>::operator[](int)
        mov     rcx, qword ptr [rbp - 104]      # 8-byte Reload
        add     rcx, qword ptr [rax]
        mov     qword ptr [rax], rcx
        jmp     .LBB563_1
.LBB563_4:
        add     rsp, 112
        pop     rbp
        ret
cl::sycl::detail::HostKernel<std::function<void (cl::sycl::nd_item<3> const&)>, cl::sycl::nd_item<3>, 3>::runOnHost<cl::sycl::nd_item<3> >(cl::sycl::detail::NDRDescT const&)::{lambda(cl::sycl::id<3> const&)#1}::operator()(cl::sycl::id<3> const&) const: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 432
        mov     qword ptr [rbp - 192], rdi
        mov     qword ptr [rbp - 200], rsi
        mov     rax, qword ptr [rbp - 192]
        mov     qword ptr [rbp - 376], rax      # 8-byte Spill
        mov     rcx, qword ptr [rax + 32]
        mov     qword ptr [rbp - 368], rcx      # 8-byte Spill
        mov     rsi, qword ptr [rax]
        mov     rdx, qword ptr [rax + 8]
        mov     rcx, qword ptr [rax + 16]
        mov     r8, qword ptr [rbp - 200]
        lea     rdi, [rbp - 296]
        call    cl::sycl::group<3> cl::sycl::detail::Builder::createGroup<3>(cl::sycl::range<3> const&, cl::sycl::range<3> const&, cl::sycl::range<3> const&, cl::sycl::id<3> const&)
        mov     rcx, qword ptr [rbp - 376]      # 8-byte Reload
        mov     rax, qword ptr [rbp - 368]      # 8-byte Reload
        mov     rdx, qword ptr [rcx + 8]
        mov     qword ptr [rbp - 360], rdx      # 8-byte Spill
        mov     rdx, qword ptr [rbp - 200]
        mov     qword ptr [rbp - 344], rdx
        mov     rdx, qword ptr [rcx + 8]
        mov     qword ptr [rbp - 336], rdx
        mov     rdx, qword ptr [rcx + 24]
        mov     qword ptr [rbp - 328], rdx
        mov     rcx, qword ptr [rcx]
        mov     qword ptr [rbp - 320], rcx
        lea     rcx, [rbp - 296]
        mov     qword ptr [rbp - 312], rcx
        mov     qword ptr [rbp - 304], rax
        lea     rdi, [rbp - 184]
        lea     rsi, [rbp - 344]
        mov     edx, 48
        call    memcpy@PLT
        mov     rax, qword ptr [rbp - 360]      # 8-byte Reload
        mov     qword ptr [rbp - 8], rax
        lea     rdi, [rbp - 32]
        call    cl::sycl::range<3> cl::sycl::detail::InitializedVal<3, cl::sycl::range>::get<0>()
        lea     rdi, [rbp - 56]
        call    cl::sycl::range<3> cl::sycl::detail::InitializedVal<3, cl::sycl::range>::get<1>()
        lea     rdi, [rbp - 80]
        call    cl::sycl::range<3> cl::sycl::detail::InitializedVal<3, cl::sycl::range>::get<0>()
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 352], rax      # 8-byte Spill
        lea     rdi, [rbp - 136]
        lea     rsi, [rbp - 184]
        mov     edx, 48
        call    memcpy@PLT
        mov     rcx, qword ptr [rbp - 352]      # 8-byte Reload
        movups  xmm0, xmmword ptr [rbp - 136]
        movups  xmm1, xmmword ptr [rbp - 120]
        movups  xmm2, xmmword ptr [rbp - 104]
        mov     rax, rsp
        movups  xmmword ptr [rax + 32], xmm2
        movups  xmmword ptr [rax + 16], xmm1
        movups  xmmword ptr [rax], xmm0
        lea     rdi, [rbp - 88]
        lea     rsi, [rbp - 32]
        lea     rdx, [rbp - 56]
        lea     r8, [rbp - 80]
        call    cl::sycl::detail::NDLoopIterateImpl<3, 2, cl::sycl::range, cl::sycl::detail::HostKernel<std::function<void (cl::sycl::nd_item<3> const&)>, cl::sycl::nd_item<3>, 3>::runOnHost<cl::sycl::nd_item<3> >(cl::sycl::detail::NDRDescT const&)::{lambda(cl::sycl::id<3> const&)#1}::operator()(cl::sycl::id<3> const&) const::{lambda(cl::sycl::id<3> const&)#1}, cl::sycl::range>::NDLoopIterateImpl(cl::sycl::range<3> const&, cl::sycl::range<3> const&, cl::sycl::range<3> const&, cl::sycl::detail::HostKernel<std::function<void (cl::sycl::nd_item<3> const&)>, cl::sycl::nd_item<3>, 3>::runOnHost<cl::sycl::nd_item<3> >(cl::sycl::detail::NDRDescT const&)::{lambda(cl::sycl::id<3> const&)#1}::operator()(cl::sycl::id<3> const&) const::{lambda(cl::sycl::id<3> const&)#1}, cl::sycl::range<3>&) [base object constructor]
        add     rsp, 432
        pop     rbp
        ret
cl::sycl::detail::array<3>::operator cl::sycl::id<3>() const: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        mov     qword ptr [rbp - 40], rdi       # 8-byte Spill
        mov     rax, rdi
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        mov     qword ptr [rbp - 8], rsi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 24], rax       # 8-byte Spill
        call    cl::sycl::id<3>::id() [base object constructor]
        mov     dword ptr [rbp - 12], 0
.LBB565_1:                              # =>This Inner Loop Header: Depth=1
        cmp     dword ptr [rbp - 12], 3
        jge     .LBB565_4
        mov     rdi, qword ptr [rbp - 40]       # 8-byte Reload
        mov     rax, qword ptr [rbp - 24]       # 8-byte Reload
        movsxd  rcx, dword ptr [rbp - 12]
        mov     rax, qword ptr [rax + 8*rcx]
        mov     qword ptr [rbp - 48], rax       # 8-byte Spill
        mov     esi, dword ptr [rbp - 12]
        call    cl::sycl::detail::array<3>::operator[](int)
        mov     rcx, qword ptr [rbp - 48]       # 8-byte Reload
        mov     qword ptr [rax], rcx
        mov     eax, dword ptr [rbp - 12]
        add     eax, 1
        mov     dword ptr [rbp - 12], eax
        jmp     .LBB565_1
.LBB565_4:
        mov     rax, qword ptr [rbp - 32]       # 8-byte Reload
        add     rsp, 48
        pop     rbp
        ret
cl::sycl::group<3> cl::sycl::detail::Builder::createGroup<3>(cl::sycl::range<3> const&, cl::sycl::range<3> const&, cl::sycl::range<3> const&, cl::sycl::id<3> const&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 96
        mov     rax, rdi
        mov     qword ptr [rbp - 64], rax       # 8-byte Spill
        mov     qword ptr [rbp - 8], rsi
        mov     qword ptr [rbp - 16], rdx
        mov     qword ptr [rbp - 24], rcx
        mov     qword ptr [rbp - 32], r8
        mov     rsi, qword ptr [rbp - 8]
        mov     rdx, qword ptr [rbp - 16]
        mov     rax, qword ptr [rbp - 24]
        mov     rcx, qword ptr [rax]
        mov     qword ptr [rbp - 56], rcx
        mov     rcx, qword ptr [rax + 8]
        mov     qword ptr [rbp - 48], rcx
        mov     rax, qword ptr [rax + 16]
        mov     qword ptr [rbp - 40], rax
        mov     rcx, qword ptr [rbp - 32]
        lea     rax, [rbp - 56]
        mov     r8, qword ptr [rax]
        mov     qword ptr [rsp], r8
        mov     r8, qword ptr [rax + 8]
        mov     qword ptr [rsp + 8], r8
        mov     rax, qword ptr [rax + 16]
        mov     qword ptr [rsp + 16], rax
        call    cl::sycl::group<3>::group(cl::sycl::range<3> const&, cl::sycl::range<3> const&, cl::sycl::range<3>, cl::sycl::id<3> const&) [base object constructor]
        mov     rax, qword ptr [rbp - 64]       # 8-byte Reload
        add     rsp, 96
        pop     rbp
        ret
cl::sycl::group<3>::group(cl::sycl::range<3> const&, cl::sycl::range<3> const&, cl::sycl::range<3>, cl::sycl::id<3> const&) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 144
        mov     rax, rcx
        lea     rcx, [rbp + 16]
        mov     qword ptr [rbp - 128], rcx      # 8-byte Spill
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        mov     qword ptr [rbp - 32], rax
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 120], rax      # 8-byte Spill
        mov     rdx, qword ptr [rbp - 16]
        mov     rsi, qword ptr [rdx]
        mov     qword ptr [rax], rsi
        mov     rsi, qword ptr [rdx + 8]
        mov     qword ptr [rax + 8], rsi
        mov     rdx, qword ptr [rdx + 16]
        mov     qword ptr [rax + 16], rdx
        mov     rdx, qword ptr [rbp - 24]
        mov     rsi, qword ptr [rdx]
        mov     qword ptr [rax + 24], rsi
        mov     rsi, qword ptr [rdx + 8]
        mov     qword ptr [rax + 32], rsi
        mov     rdx, qword ptr [rdx + 16]
        mov     qword ptr [rax + 40], rdx
        mov     rdx, qword ptr [rcx]
        mov     qword ptr [rax + 48], rdx
        mov     rdx, qword ptr [rcx + 8]
        mov     qword ptr [rax + 56], rdx
        mov     rcx, qword ptr [rcx + 16]
        mov     qword ptr [rax + 64], rcx
        mov     rcx, qword ptr [rbp - 32]
        mov     rdx, qword ptr [rcx]
        mov     qword ptr [rax + 72], rdx
        mov     rdx, qword ptr [rcx + 8]
        mov     qword ptr [rax + 80], rdx
        mov     rcx, qword ptr [rcx + 16]
        mov     qword ptr [rax + 88], rcx
        mov     rsi, qword ptr [rbp - 16]
        mov     rdx, qword ptr [rbp - 24]
        lea     rdi, [rbp - 56]
        call    cl::sycl::operator%(cl::sycl::range<3> const&, cl::sycl::range<3> const&)
        lea     rdi, [rbp - 56]
        call    cl::sycl::range<3>::size() const
        mov     rcx, rax
        xor     eax, eax
        cmp     rcx, 0
        mov     byte ptr [rbp - 105], al        # 1-byte Spill
        jne     .LBB567_2
        mov     al, 1
        mov     byte ptr [rbp - 105], al        # 1-byte Spill
        jmp     .LBB567_2
.LBB567_2:
        mov     al, byte ptr [rbp - 105]        # 1-byte Reload
        test    al, 1
        jne     .LBB567_3
        jmp     .LBB567_4
.LBB567_3:
        jmp     .LBB567_5
.LBB567_4:
        movabs  rdi, offset .L.str.20
        movabs  rsi, offset .L.str.21
        mov     edx, 535
        movabs  rcx, offset .L__PRETTY_FUNCTION__._ZN2cl4sycl5groupILi3EEC2ERKNS0_5rangeILi3EEES6_S4_RKNS0_2idILi3EEE [base object constructor]
        call    __assert_fail
.LBB567_5:
        mov     rsi, qword ptr [rbp - 16]
        mov     rdx, qword ptr [rbp - 24]
        lea     rdi, [rbp - 104]
        call    cl::sycl::operator/(cl::sycl::range<3> const&, cl::sycl::range<3> const&)
        mov     rdx, qword ptr [rbp - 128]      # 8-byte Reload
        lea     rdi, [rbp - 80]
        lea     rsi, [rbp - 104]
        call    cl::sycl::operator-(cl::sycl::range<3> const&, cl::sycl::range<3> const&)
        lea     rdi, [rbp - 80]
        call    cl::sycl::range<3>::size() const
        mov     rcx, rax
        xor     eax, eax
        cmp     rcx, 0
        mov     byte ptr [rbp - 129], al        # 1-byte Spill
        jne     .LBB567_7
        mov     al, 1
        mov     byte ptr [rbp - 129], al        # 1-byte Spill
        jmp     .LBB567_7
.LBB567_7:
        mov     al, byte ptr [rbp - 129]        # 1-byte Reload
        test    al, 1
        jne     .LBB567_8
        jmp     .LBB567_9
.LBB567_8:
        jmp     .LBB567_10
.LBB567_9:
        movabs  rdi, offset .L.str.23
        movabs  rsi, offset .L.str.21
        mov     edx, 537
        movabs  rcx, offset .L__PRETTY_FUNCTION__._ZN2cl4sycl5groupILi3EEC2ERKNS0_5rangeILi3EEES6_S4_RKNS0_2idILi3EEE [base object constructor]
        call    __assert_fail
.LBB567_10:
        add     rsp, 144
        pop     rbp
        ret
cl::sycl::operator%(cl::sycl::range<3> const&, cl::sycl::range<3> const&):   # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 40], rdi       # 8-byte Spill
        mov     rax, rdi
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        mov     qword ptr [rbp - 8], rsi
        mov     qword ptr [rbp - 16], rdx
        mov     rax, qword ptr [rbp - 8]
        mov     rcx, qword ptr [rax]
        mov     qword ptr [rdi], rcx
        mov     rcx, qword ptr [rax + 8]
        mov     qword ptr [rdi + 8], rcx
        mov     rax, qword ptr [rax + 16]
        mov     qword ptr [rdi + 16], rax
        mov     dword ptr [rbp - 20], 0
.LBB568_1:                              # =>This Inner Loop Header: Depth=1
        cmp     dword ptr [rbp - 20], 3
        jge     .LBB568_4
        mov     rax, qword ptr [rbp - 8]
        movsxd  rcx, dword ptr [rbp - 20]
        mov     rax, qword ptr [rax + 8*rcx]
        mov     rcx, qword ptr [rbp - 16]
        movsxd  rsi, dword ptr [rbp - 20]
        xor     edx, edx
        div     qword ptr [rcx + 8*rsi]
        mov     rax, qword ptr [rbp - 40]       # 8-byte Reload
        movsxd  rcx, dword ptr [rbp - 20]
        mov     qword ptr [rax + 8*rcx], rdx
        mov     eax, dword ptr [rbp - 20]
        add     eax, 1
        mov     dword ptr [rbp - 20], eax
        jmp     .LBB568_1
.LBB568_4:
        mov     rax, qword ptr [rbp - 32]       # 8-byte Reload
        pop     rbp
        ret
cl::sycl::range<3>::size() const:        # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        mov     qword ptr [rbp - 16], 1
        mov     dword ptr [rbp - 20], 0
.LBB569_1:                              # =>This Inner Loop Header: Depth=1
        cmp     dword ptr [rbp - 20], 3
        jge     .LBB569_4
        mov     rdi, qword ptr [rbp - 32]       # 8-byte Reload
        mov     esi, dword ptr [rbp - 20]
        call    cl::sycl::detail::array<3>::get(int) const
        imul    rax, qword ptr [rbp - 16]
        mov     qword ptr [rbp - 16], rax
        mov     eax, dword ptr [rbp - 20]
        add     eax, 1
        mov     dword ptr [rbp - 20], eax
        jmp     .LBB569_1
.LBB569_4:
        mov     rax, qword ptr [rbp - 16]
        add     rsp, 32
        pop     rbp
        ret
cl::sycl::operator-(cl::sycl::range<3> const&, cl::sycl::range<3> const&):   # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 40], rdi       # 8-byte Spill
        mov     rax, rdi
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        mov     qword ptr [rbp - 8], rsi
        mov     qword ptr [rbp - 16], rdx
        mov     rax, qword ptr [rbp - 8]
        mov     rcx, qword ptr [rax]
        mov     qword ptr [rdi], rcx
        mov     rcx, qword ptr [rax + 8]
        mov     qword ptr [rdi + 8], rcx
        mov     rax, qword ptr [rax + 16]
        mov     qword ptr [rdi + 16], rax
        mov     dword ptr [rbp - 20], 0
.LBB570_1:                              # =>This Inner Loop Header: Depth=1
        cmp     dword ptr [rbp - 20], 3
        jge     .LBB570_4
        mov     rax, qword ptr [rbp - 40]       # 8-byte Reload
        mov     rcx, qword ptr [rbp - 8]
        movsxd  rdx, dword ptr [rbp - 20]
        mov     rdx, qword ptr [rcx + 8*rdx]
        mov     rcx, qword ptr [rbp - 16]
        movsxd  rsi, dword ptr [rbp - 20]
        sub     rdx, qword ptr [rcx + 8*rsi]
        movsxd  rcx, dword ptr [rbp - 20]
        mov     qword ptr [rax + 8*rcx], rdx
        mov     eax, dword ptr [rbp - 20]
        add     eax, 1
        mov     dword ptr [rbp - 20], eax
        jmp     .LBB570_1
.LBB570_4:
        mov     rax, qword ptr [rbp - 32]       # 8-byte Reload
        pop     rbp
        ret
cl::sycl::operator/(cl::sycl::range<3> const&, cl::sycl::range<3> const&):   # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 40], rdi       # 8-byte Spill
        mov     rax, rdi
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        mov     qword ptr [rbp - 8], rsi
        mov     qword ptr [rbp - 16], rdx
        mov     rax, qword ptr [rbp - 8]
        mov     rcx, qword ptr [rax]
        mov     qword ptr [rdi], rcx
        mov     rcx, qword ptr [rax + 8]
        mov     qword ptr [rdi + 8], rcx
        mov     rax, qword ptr [rax + 16]
        mov     qword ptr [rdi + 16], rax
        mov     dword ptr [rbp - 20], 0
.LBB571_1:                              # =>This Inner Loop Header: Depth=1
        cmp     dword ptr [rbp - 20], 3
        jge     .LBB571_4
        mov     rax, qword ptr [rbp - 8]
        movsxd  rcx, dword ptr [rbp - 20]
        mov     rax, qword ptr [rax + 8*rcx]
        mov     rcx, qword ptr [rbp - 16]
        movsxd  rsi, dword ptr [rbp - 20]
        xor     edx, edx
        div     qword ptr [rcx + 8*rsi]
        mov     rdx, rax
        mov     rax, qword ptr [rbp - 40]       # 8-byte Reload
        movsxd  rcx, dword ptr [rbp - 20]
        mov     qword ptr [rax + 8*rcx], rdx
        mov     eax, dword ptr [rbp - 20]
        add     eax, 1
        mov     dword ptr [rbp - 20], eax
        jmp     .LBB571_1
.LBB571_4:
        mov     rax, qword ptr [rbp - 32]       # 8-byte Reload
        pop     rbp
        ret
cl::sycl::detail::array<3>::get(int) const:  # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 64
        mov     qword ptr [rbp - 40], rdi
        mov     dword ptr [rbp - 44], esi
        mov     rcx, qword ptr [rbp - 40]
        mov     qword ptr [rbp - 56], rcx       # 8-byte Spill
        mov     eax, dword ptr [rbp - 44]
        mov     qword ptr [rbp - 8], rcx
        mov     dword ptr [rbp - 12], eax
        cmp     dword ptr [rbp - 12], 3
        jge     .LBB572_2
        cmp     dword ptr [rbp - 12], 0
        jge     .LBB572_5
.LBB572_2:
        mov     edi, 64
        call    __cxa_allocate_exception
        mov     rdi, rax
        mov     rax, rdi
        mov     qword ptr [rbp - 64], rax       # 8-byte Spill
        mov     esi, offset .L.str.5
        mov     edx, -30
        call    cl::sycl::invalid_parameter_error::invalid_parameter_error(char const*, int) [base object constructor]
        jmp     .LBB572_3
.LBB572_3:
        mov     rdi, qword ptr [rbp - 64]       # 8-byte Reload
        movabs  rsi, offset typeinfo for cl::sycl::invalid_parameter_error
        movabs  rdx, offset cl::sycl::invalid_parameter_error::~invalid_parameter_error() [base object destructor]
        call    __cxa_throw
        mov     rdi, qword ptr [rbp - 64]       # 8-byte Reload
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 24], rcx
        mov     dword ptr [rbp - 28], eax
        call    __cxa_free_exception
        mov     rdi, qword ptr [rbp - 24]
        call    _Unwind_Resume@PLT
.LBB572_5:
        mov     rax, qword ptr [rbp - 56]       # 8-byte Reload
        movsxd  rcx, dword ptr [rbp - 44]
        mov     rax, qword ptr [rax + 8*rcx]
        add     rsp, 64
        pop     rbp
        ret
cl::sycl::detail::NDLoopIterateImpl<3, 2, cl::sycl::range, cl::sycl::detail::HostKernel<std::function<void (cl::sycl::nd_item<3> const&)>, cl::sycl::nd_item<3>, 3>::runOnHost<cl::sycl::nd_item<3> >(cl::sycl::detail::NDRDescT const&)::{lambda(cl::sycl::id<3> const&)#1}::operator()(cl::sycl::id<3> const&) const::{lambda(cl::sycl::id<3> const&)#1}, cl::sycl::range>::NDLoopIterateImpl(cl::sycl::range<3> const&, cl::sycl::range<3> const&, cl::sycl::range<3> const&, cl::sycl::detail::HostKernel<std::function<void (cl::sycl::nd_item<3> const&)>, cl::sycl::nd_item<3>, 3>::runOnHost<cl::sycl::nd_item<3> >(cl::sycl::detail::NDRDescT const&)::{lambda(cl::sycl::id<3> const&)#1}::operator()(cl::sycl::id<3> const&) const::{lambda(cl::sycl::id<3> const&)#1}, cl::sycl::range<3>&) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 208
        lea     rax, [rbp + 16]
        mov     qword ptr [rbp - 120], rax      # 8-byte Spill
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        mov     qword ptr [rbp - 32], rcx
        mov     qword ptr [rbp - 40], r8
        mov     qword ptr [rbp - 48], 0
        mov     rdi, qword ptr [rbp - 16]
        xor     esi, esi
        call    cl::sycl::detail::array<3>::operator[](int) const
        mov     qword ptr [rbp - 112], rax      # 8-byte Spill
        mov     rdi, qword ptr [rbp - 40]
        xor     esi, esi
        call    cl::sycl::detail::array<3>::operator[](int)
        mov     rcx, qword ptr [rbp - 112]      # 8-byte Reload
        mov     qword ptr [rax], rcx
.LBB573_1:                              # =>This Inner Loop Header: Depth=1
        mov     rdi, qword ptr [rbp - 40]
        xor     esi, esi
        call    cl::sycl::detail::array<3>::operator[](int)
        mov     rax, qword ptr [rax]
        mov     qword ptr [rbp - 128], rax      # 8-byte Spill
        mov     rdi, qword ptr [rbp - 32]
        xor     esi, esi
        call    cl::sycl::detail::array<3>::operator[](int) const
        mov     rcx, rax
        mov     rax, qword ptr [rbp - 128]      # 8-byte Reload
        cmp     rax, rcx
        jae     .LBB573_4
        mov     rsi, qword ptr [rbp - 120]      # 8-byte Reload
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rbp - 152], rax      # 8-byte Spill
        mov     rax, qword ptr [rbp - 24]
        mov     qword ptr [rbp - 144], rax      # 8-byte Spill
        mov     rax, qword ptr [rbp - 32]
        mov     qword ptr [rbp - 136], rax      # 8-byte Spill
        lea     rdi, [rbp - 104]
        mov     edx, 48
        call    memcpy@PLT
        mov     rsi, qword ptr [rbp - 152]      # 8-byte Reload
        mov     rdx, qword ptr [rbp - 144]      # 8-byte Reload
        mov     rcx, qword ptr [rbp - 136]      # 8-byte Reload
        mov     r8, qword ptr [rbp - 40]
        movups  xmm0, xmmword ptr [rbp - 104]
        movups  xmm1, xmmword ptr [rbp - 88]
        movups  xmm2, xmmword ptr [rbp - 72]
        mov     rax, rsp
        movups  xmmword ptr [rax + 32], xmm2
        movups  xmmword ptr [rax + 16], xmm1
        movups  xmmword ptr [rax], xmm0
        lea     rdi, [rbp - 56]
        call    cl::sycl::detail::NDLoopIterateImpl<3, 1, cl::sycl::range, cl::sycl::detail::HostKernel<std::function<void (cl::sycl::nd_item<3> const&)>, cl::sycl::nd_item<3>, 3>::runOnHost<cl::sycl::nd_item<3> >(cl::sycl::detail::NDRDescT const&)::{lambda(cl::sycl::id<3> const&)#1}::operator()(cl::sycl::id<3> const&) const::{lambda(cl::sycl::id<3> const&)#1}, cl::sycl::range>::NDLoopIterateImpl(cl::sycl::range<3> const&, cl::sycl::range<3> const&, cl::sycl::range<3> const&, cl::sycl::detail::HostKernel<std::function<void (cl::sycl::nd_item<3> const&)>, cl::sycl::nd_item<3>, 3>::runOnHost<cl::sycl::nd_item<3> >(cl::sycl::detail::NDRDescT const&)::{lambda(cl::sycl::id<3> const&)#1}::operator()(cl::sycl::id<3> const&) const::{lambda(cl::sycl::id<3> const&)#1}, cl::sycl::range<3>&) [base object constructor]
        mov     rdi, qword ptr [rbp - 24]
        xor     esi, esi
        call    cl::sycl::detail::array<3>::operator[](int) const
        mov     qword ptr [rbp - 160], rax      # 8-byte Spill
        mov     rdi, qword ptr [rbp - 40]
        xor     esi, esi
        call    cl::sycl::detail::array<3>::operator[](int)
        mov     rcx, qword ptr [rbp - 160]      # 8-byte Reload
        add     rcx, qword ptr [rax]
        mov     qword ptr [rax], rcx
        jmp     .LBB573_1
.LBB573_4:
        add     rsp, 208
        pop     rbp
        ret
cl::sycl::detail::NDLoopIterateImpl<3, 1, cl::sycl::range, cl::sycl::detail::HostKernel<std::function<void (cl::sycl::nd_item<3> const&)>, cl::sycl::nd_item<3>, 3>::runOnHost<cl::sycl::nd_item<3> >(cl::sycl::detail::NDRDescT const&)::{lambda(cl::sycl::id<3> const&)#1}::operator()(cl::sycl::id<3> const&) const::{lambda(cl::sycl::id<3> const&)#1}, cl::sycl::range>::NDLoopIterateImpl(cl::sycl::range<3> const&, cl::sycl::range<3> const&, cl::sycl::range<3> const&, cl::sycl::detail::HostKernel<std::function<void (cl::sycl::nd_item<3> const&)>, cl::sycl::nd_item<3>, 3>::runOnHost<cl::sycl::nd_item<3> >(cl::sycl::detail::NDRDescT const&)::{lambda(cl::sycl::id<3> const&)#1}::operator()(cl::sycl::id<3> const&) const::{lambda(cl::sycl::id<3> const&)#1}, cl::sycl::range<3>&) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 208
        lea     rax, [rbp + 16]
        mov     qword ptr [rbp - 120], rax      # 8-byte Spill
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        mov     qword ptr [rbp - 32], rcx
        mov     qword ptr [rbp - 40], r8
        mov     qword ptr [rbp - 48], 1
        mov     rdi, qword ptr [rbp - 16]
        mov     esi, 1
        call    cl::sycl::detail::array<3>::operator[](int) const
        mov     qword ptr [rbp - 112], rax      # 8-byte Spill
        mov     rdi, qword ptr [rbp - 40]
        mov     esi, 1
        call    cl::sycl::detail::array<3>::operator[](int)
        mov     rcx, qword ptr [rbp - 112]      # 8-byte Reload
        mov     qword ptr [rax], rcx
.LBB574_1:                              # =>This Inner Loop Header: Depth=1
        mov     rdi, qword ptr [rbp - 40]
        mov     esi, 1
        call    cl::sycl::detail::array<3>::operator[](int)
        mov     rax, qword ptr [rax]
        mov     qword ptr [rbp - 128], rax      # 8-byte Spill
        mov     rdi, qword ptr [rbp - 32]
        mov     esi, 1
        call    cl::sycl::detail::array<3>::operator[](int) const
        mov     rcx, rax
        mov     rax, qword ptr [rbp - 128]      # 8-byte Reload
        cmp     rax, rcx
        jae     .LBB574_4
        mov     rsi, qword ptr [rbp - 120]      # 8-byte Reload
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rbp - 152], rax      # 8-byte Spill
        mov     rax, qword ptr [rbp - 24]
        mov     qword ptr [rbp - 144], rax      # 8-byte Spill
        mov     rax, qword ptr [rbp - 32]
        mov     qword ptr [rbp - 136], rax      # 8-byte Spill
        lea     rdi, [rbp - 104]
        mov     edx, 48
        call    memcpy@PLT
        mov     rsi, qword ptr [rbp - 152]      # 8-byte Reload
        mov     rdx, qword ptr [rbp - 144]      # 8-byte Reload
        mov     rcx, qword ptr [rbp - 136]      # 8-byte Reload
        mov     r8, qword ptr [rbp - 40]
        movups  xmm0, xmmword ptr [rbp - 104]
        movups  xmm1, xmmword ptr [rbp - 88]
        movups  xmm2, xmmword ptr [rbp - 72]
        mov     rax, rsp
        movups  xmmword ptr [rax + 32], xmm2
        movups  xmmword ptr [rax + 16], xmm1
        movups  xmmword ptr [rax], xmm0
        lea     rdi, [rbp - 56]
        call    cl::sycl::detail::NDLoopIterateImpl<3, 0, cl::sycl::range, cl::sycl::detail::HostKernel<std::function<void (cl::sycl::nd_item<3> const&)>, cl::sycl::nd_item<3>, 3>::runOnHost<cl::sycl::nd_item<3> >(cl::sycl::detail::NDRDescT const&)::{lambda(cl::sycl::id<3> const&)#1}::operator()(cl::sycl::id<3> const&) const::{lambda(cl::sycl::id<3> const&)#1}, cl::sycl::range>::NDLoopIterateImpl(cl::sycl::range<3> const&, cl::sycl::range<3> const&, cl::sycl::range<3> const&, cl::sycl::detail::HostKernel<std::function<void (cl::sycl::nd_item<3> const&)>, cl::sycl::nd_item<3>, 3>::runOnHost<cl::sycl::nd_item<3> >(cl::sycl::detail::NDRDescT const&)::{lambda(cl::sycl::id<3> const&)#1}::operator()(cl::sycl::id<3> const&) const::{lambda(cl::sycl::id<3> const&)#1}, cl::sycl::range<3>&) [base object constructor]
        mov     rdi, qword ptr [rbp - 24]
        mov     esi, 1
        call    cl::sycl::detail::array<3>::operator[](int) const
        mov     qword ptr [rbp - 160], rax      # 8-byte Spill
        mov     rdi, qword ptr [rbp - 40]
        mov     esi, 1
        call    cl::sycl::detail::array<3>::operator[](int)
        mov     rcx, qword ptr [rbp - 160]      # 8-byte Reload
        add     rcx, qword ptr [rax]
        mov     qword ptr [rax], rcx
        jmp     .LBB574_1
.LBB574_4:
        add     rsp, 208
        pop     rbp
        ret
cl::sycl::detail::NDLoopIterateImpl<3, 0, cl::sycl::range, cl::sycl::detail::HostKernel<std::function<void (cl::sycl::nd_item<3> const&)>, cl::sycl::nd_item<3>, 3>::runOnHost<cl::sycl::nd_item<3> >(cl::sycl::detail::NDRDescT const&)::{lambda(cl::sycl::id<3> const&)#1}::operator()(cl::sycl::id<3> const&) const::{lambda(cl::sycl::id<3> const&)#1}, cl::sycl::range>::NDLoopIterateImpl(cl::sycl::range<3> const&, cl::sycl::range<3> const&, cl::sycl::range<3> const&, cl::sycl::detail::HostKernel<std::function<void (cl::sycl::nd_item<3> const&)>, cl::sycl::nd_item<3>, 3>::runOnHost<cl::sycl::nd_item<3> >(cl::sycl::detail::NDRDescT const&)::{lambda(cl::sycl::id<3> const&)#1}::operator()(cl::sycl::id<3> const&) const::{lambda(cl::sycl::id<3> const&)#1}, cl::sycl::range<3>&) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 112
        lea     rax, [rbp + 16]
        mov     qword ptr [rbp - 88], rax       # 8-byte Spill
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        mov     qword ptr [rbp - 32], rcx
        mov     qword ptr [rbp - 40], r8
        mov     qword ptr [rbp - 48], 2
        mov     rdi, qword ptr [rbp - 16]
        mov     esi, 2
        call    cl::sycl::detail::array<3>::operator[](int) const
        mov     qword ptr [rbp - 80], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 40]
        mov     esi, 2
        call    cl::sycl::detail::array<3>::operator[](int)
        mov     rcx, qword ptr [rbp - 80]       # 8-byte Reload
        mov     qword ptr [rax], rcx
.LBB575_1:                              # =>This Inner Loop Header: Depth=1
        mov     rdi, qword ptr [rbp - 40]
        mov     esi, 2
        call    cl::sycl::detail::array<3>::operator[](int)
        mov     rax, qword ptr [rax]
        mov     qword ptr [rbp - 96], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 32]
        mov     esi, 2
        call    cl::sycl::detail::array<3>::operator[](int) const
        mov     rcx, rax
        mov     rax, qword ptr [rbp - 96]       # 8-byte Reload
        cmp     rax, rcx
        jae     .LBB575_4
        mov     rsi, qword ptr [rbp - 40]
        lea     rdi, [rbp - 72]
        call    cl::sycl::detail::array<3>::operator cl::sycl::id<3>() const
        mov     rdi, qword ptr [rbp - 88]       # 8-byte Reload
        lea     rsi, [rbp - 72]
        call    cl::sycl::detail::HostKernel<std::function<void (cl::sycl::nd_item<3> const&)>, cl::sycl::nd_item<3>, 3>::runOnHost<cl::sycl::nd_item<3> >(cl::sycl::detail::NDRDescT const&)::{lambda(cl::sycl::id<3> const&)#1}::operator()(cl::sycl::id<3> const&) const::{lambda(cl::sycl::id<3> const&)#1}::operator()(cl::sycl::id<3> const&) const
        mov     rdi, qword ptr [rbp - 24]
        mov     esi, 2
        call    cl::sycl::detail::array<3>::operator[](int) const
        mov     qword ptr [rbp - 104], rax      # 8-byte Spill
        mov     rdi, qword ptr [rbp - 40]
        mov     esi, 2
        call    cl::sycl::detail::array<3>::operator[](int)
        mov     rcx, qword ptr [rbp - 104]      # 8-byte Reload
        add     rcx, qword ptr [rax]
        mov     qword ptr [rax], rcx
        jmp     .LBB575_1
.LBB575_4:
        add     rsp, 112
        pop     rbp
        ret
cl::sycl::detail::HostKernel<std::function<void (cl::sycl::nd_item<3> const&)>, cl::sycl::nd_item<3>, 3>::runOnHost<cl::sycl::nd_item<3> >(cl::sycl::detail::NDRDescT const&)::{lambda(cl::sycl::id<3> const&)#1}::operator()(cl::sycl::id<3> const&) const::{lambda(cl::sycl::id<3> const&)#1}::operator()(cl::sycl::id<3> const&) const: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 1024
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 768], rax      # 8-byte Spill
        mov     rcx, qword ptr [rax + 40]
        mov     qword ptr [rbp - 744], rcx      # 8-byte Spill
        mov     rcx, qword ptr [rax]
        mov     qword ptr [rbp - 808], rcx      # 8-byte Spill
        mov     rsi, qword ptr [rax + 8]
        lea     rdi, [rbp - 112]
        mov     qword ptr [rbp - 800], rdi      # 8-byte Spill
        call    cl::sycl::detail::array<3>::operator cl::sycl::id<3>() const
        mov     rsi, qword ptr [rbp - 808]      # 8-byte Reload
        mov     rdx, qword ptr [rbp - 800]      # 8-byte Reload
        lea     rdi, [rbp - 88]
        mov     qword ptr [rbp - 792], rdi      # 8-byte Spill
        call    cl::sycl::operator*(cl::sycl::id<3> const&, cl::sycl::id<3> const&)
        mov     rsi, qword ptr [rbp - 792]      # 8-byte Reload
        mov     rdx, qword ptr [rbp - 16]
        lea     rdi, [rbp - 64]
        mov     qword ptr [rbp - 784], rdi      # 8-byte Spill
        call    cl::sycl::operator+(cl::sycl::id<3> const&, cl::sycl::id<3> const&)
        mov     rsi, qword ptr [rbp - 784]      # 8-byte Reload
        mov     rax, qword ptr [rbp - 768]      # 8-byte Reload
        mov     rdx, qword ptr [rax + 16]
        lea     rdi, [rbp - 40]
        mov     qword ptr [rbp - 776], rdi      # 8-byte Spill
        call    cl::sycl::operator+(cl::sycl::id<3> const&, cl::sycl::id<3> const&)
        mov     rdx, qword ptr [rbp - 776]      # 8-byte Reload
        mov     rax, qword ptr [rbp - 768]      # 8-byte Reload
        mov     rcx, qword ptr [rax + 16]
        mov     rsi, qword ptr [rax + 24]
        lea     rdi, [rbp - 184]
        mov     qword ptr [rbp - 760], rdi      # 8-byte Spill
        call    std::enable_if<true, cl::sycl::item<3, true> >::type cl::sycl::detail::Builder::createItem<3, true>(cl::sycl::range<3> const&, cl::sycl::id<3> const&, cl::sycl::id<3> const&)
        mov     rax, qword ptr [rbp - 768]      # 8-byte Reload
        mov     rsi, qword ptr [rax + 8]
        mov     rdx, qword ptr [rbp - 16]
        lea     rdi, [rbp - 232]
        mov     qword ptr [rbp - 752], rdi      # 8-byte Spill
        call    std::enable_if<!(false), cl::sycl::item<3, false> >::type cl::sycl::detail::Builder::createItem<3, false>(cl::sycl::range<3> const&, cl::sycl::id<3> const&)
        mov     rax, qword ptr [rbp - 768]      # 8-byte Reload
        mov     rsi, qword ptr [rbp - 760]      # 8-byte Reload
        mov     rdx, qword ptr [rbp - 752]      # 8-byte Reload
        mov     rcx, qword ptr [rax + 32]
        lea     rdi, [rbp - 448]
        mov     qword ptr [rbp - 736], rdi      # 8-byte Spill
        call    cl::sycl::nd_item<3> cl::sycl::detail::Builder::createNDItem<3>(cl::sycl::item<3, true> const&, cl::sycl::item<3, false> const&, cl::sycl::group<3> const&)
        mov     rsi, qword ptr [rbp - 744]      # 8-byte Reload
        add     rsi, 8
        lea     rdi, [rbp - 480]
        mov     qword ptr [rbp - 720], rdi      # 8-byte Spill
        call    std::function<void (cl::sycl::nd_item<3> const&)>::function(std::function<void (cl::sycl::nd_item<3> const&)> const&) [base object constructor]
        mov     rsi, qword ptr [rbp - 736]      # 8-byte Reload
        lea     rdi, [rbp - 696]
        mov     qword ptr [rbp - 728], rdi      # 8-byte Spill
        mov     edx, 216
        call    memcpy@PLT
        mov     rsi, qword ptr [rbp - 728]      # 8-byte Reload
        mov     rdi, rsp
        mov     ecx, 27
        rep movsq es:[rdi], [rsi]
        mov     rdi, qword ptr [rbp - 720]      # 8-byte Reload
        call    std::enable_if<!KernelLambdaHasKernelHandlerArgT<std::function<void (cl::sycl::nd_item<3> const&)>, cl::sycl::nd_item<3> const>::value, void>::type cl::sycl::detail::runKernelWithArg<cl::sycl::nd_item<3> const, std::function<void (cl::sycl::nd_item<3> const&)> >(std::function<void (cl::sycl::nd_item<3> const&)>, cl::sycl::nd_item<3> const)
        jmp     .LBB576_1
.LBB576_1:
        lea     rdi, [rbp - 480]
        call    std::function<void (cl::sycl::nd_item<3> const&)>::~function() [base object destructor]
        add     rsp, 1024
        pop     rbp
        ret
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rbp - 704], rcx
        mov     dword ptr [rbp - 708], eax
        lea     rdi, [rbp - 480]
        call    std::function<void (cl::sycl::nd_item<3> const&)>::~function() [base object destructor]
        mov     rdi, qword ptr [rbp - 704]
        call    _Unwind_Resume@PLT
cl::sycl::operator+(cl::sycl::id<3> const&, cl::sycl::id<3> const&):      # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        mov     qword ptr [rbp - 40], rdi       # 8-byte Spill
        mov     rax, rdi
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        mov     qword ptr [rbp - 8], rsi
        mov     qword ptr [rbp - 16], rdx
        call    cl::sycl::id<3>::id() [base object constructor]
        mov     dword ptr [rbp - 20], 0
.LBB577_1:                              # =>This Inner Loop Header: Depth=1
        cmp     dword ptr [rbp - 20], 3
        jge     .LBB577_4
        mov     rax, qword ptr [rbp - 40]       # 8-byte Reload
        mov     rcx, qword ptr [rbp - 8]
        movsxd  rdx, dword ptr [rbp - 20]
        mov     rdx, qword ptr [rcx + 8*rdx]
        mov     rcx, qword ptr [rbp - 16]
        movsxd  rsi, dword ptr [rbp - 20]
        add     rdx, qword ptr [rcx + 8*rsi]
        movsxd  rcx, dword ptr [rbp - 20]
        mov     qword ptr [rax + 8*rcx], rdx
        mov     eax, dword ptr [rbp - 20]
        add     eax, 1
        mov     dword ptr [rbp - 20], eax
        jmp     .LBB577_1
.LBB577_4:
        mov     rax, qword ptr [rbp - 32]       # 8-byte Reload
        add     rsp, 48
        pop     rbp
        ret
cl::sycl::operator*(cl::sycl::id<3> const&, cl::sycl::id<3> const&):      # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        mov     qword ptr [rbp - 40], rdi       # 8-byte Spill
        mov     rax, rdi
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        mov     qword ptr [rbp - 8], rsi
        mov     qword ptr [rbp - 16], rdx
        call    cl::sycl::id<3>::id() [base object constructor]
        mov     dword ptr [rbp - 20], 0
.LBB578_1:                              # =>This Inner Loop Header: Depth=1
        cmp     dword ptr [rbp - 20], 3
        jge     .LBB578_4
        mov     rax, qword ptr [rbp - 40]       # 8-byte Reload
        mov     rcx, qword ptr [rbp - 8]
        movsxd  rdx, dword ptr [rbp - 20]
        mov     rdx, qword ptr [rcx + 8*rdx]
        mov     rcx, qword ptr [rbp - 16]
        movsxd  rsi, dword ptr [rbp - 20]
        imul    rdx, qword ptr [rcx + 8*rsi]
        movsxd  rcx, dword ptr [rbp - 20]
        mov     qword ptr [rax + 8*rcx], rdx
        mov     eax, dword ptr [rbp - 20]
        add     eax, 1
        mov     dword ptr [rbp - 20], eax
        jmp     .LBB578_1
.LBB578_4:
        mov     rax, qword ptr [rbp - 32]       # 8-byte Reload
        add     rsp, 48
        pop     rbp
        ret
std::enable_if<true, cl::sycl::item<3, true> >::type cl::sycl::detail::Builder::createItem<3, true>(cl::sycl::range<3> const&, cl::sycl::id<3> const&, cl::sycl::id<3> const&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     rax, rdi
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        mov     qword ptr [rbp - 8], rsi
        mov     qword ptr [rbp - 16], rdx
        mov     qword ptr [rbp - 24], rcx
        mov     rsi, qword ptr [rbp - 8]
        mov     rdx, qword ptr [rbp - 16]
        mov     rcx, qword ptr [rbp - 24]
        call    cl::sycl::item<3, true>::item<true>(std::enable_if<true, cl::sycl::range<3> const>::type&, cl::sycl::id<3> const&, cl::sycl::id<3> const&)
        mov     rax, qword ptr [rbp - 32]       # 8-byte Reload
        add     rsp, 32
        pop     rbp
        ret
std::enable_if<!(false), cl::sycl::item<3, false> >::type cl::sycl::detail::Builder::createItem<3, false>(cl::sycl::range<3> const&, cl::sycl::id<3> const&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     rax, rdi
        mov     qword ptr [rbp - 24], rax       # 8-byte Spill
        mov     qword ptr [rbp - 8], rsi
        mov     qword ptr [rbp - 16], rdx
        mov     rsi, qword ptr [rbp - 8]
        mov     rdx, qword ptr [rbp - 16]
        call    cl::sycl::item<3, false>::item<false>(std::enable_if<!(false), cl::sycl::range<3> const>::type&, cl::sycl::id<3> const&)
        mov     rax, qword ptr [rbp - 24]       # 8-byte Reload
        add     rsp, 32
        pop     rbp
        ret
cl::sycl::nd_item<3> cl::sycl::detail::Builder::createNDItem<3>(cl::sycl::item<3, true> const&, cl::sycl::item<3, false> const&, cl::sycl::group<3> const&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     rax, rdi
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        mov     qword ptr [rbp - 8], rsi
        mov     qword ptr [rbp - 16], rdx
        mov     qword ptr [rbp - 24], rcx
        mov     rsi, qword ptr [rbp - 8]
        mov     rdx, qword ptr [rbp - 16]
        mov     rcx, qword ptr [rbp - 24]
        call    cl::sycl::nd_item<3>::nd_item(cl::sycl::item<3, true> const&, cl::sycl::item<3, false> const&, cl::sycl::group<3> const&) [base object constructor]
        mov     rax, qword ptr [rbp - 32]       # 8-byte Reload
        add     rsp, 32
        pop     rbp
        ret
std::enable_if<!KernelLambdaHasKernelHandlerArgT<std::function<void (cl::sycl::nd_item<3> const&)>, cl::sycl::nd_item<3> const>::value, void>::type cl::sycl::detail::runKernelWithArg<cl::sycl::nd_item<3> const, std::function<void (cl::sycl::nd_item<3> const&)> >(std::function<void (cl::sycl::nd_item<3> const&)>, cl::sycl::nd_item<3> const): # 
        push    rbp
        mov     rbp, rsp
        lea     rsi, [rbp + 16]
        call    std::function<void (cl::sycl::nd_item<3> const&)>::operator()(cl::sycl::nd_item<3> const&) const
        pop     rbp
        ret
cl::sycl::item<3, true>::item<true>(std::enable_if<true, cl::sycl::range<3> const>::type&, cl::sycl::id<3> const&, cl::sycl::id<3> const&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        mov     qword ptr [rbp - 32], rcx
        mov     rax, qword ptr [rbp - 8]
        mov     rcx, qword ptr [rbp - 16]
        mov     rdx, qword ptr [rcx]
        mov     qword ptr [rax], rdx
        mov     rdx, qword ptr [rcx + 8]
        mov     qword ptr [rax + 8], rdx
        mov     rcx, qword ptr [rcx + 16]
        mov     qword ptr [rax + 16], rcx
        mov     rcx, qword ptr [rbp - 24]
        mov     rdx, qword ptr [rcx]
        mov     qword ptr [rax + 24], rdx
        mov     rdx, qword ptr [rcx + 8]
        mov     qword ptr [rax + 32], rdx
        mov     rcx, qword ptr [rcx + 16]
        mov     qword ptr [rax + 40], rcx
        mov     rcx, qword ptr [rbp - 32]
        mov     rdx, qword ptr [rcx]
        mov     qword ptr [rax + 48], rdx
        mov     rdx, qword ptr [rcx + 8]
        mov     qword ptr [rax + 56], rdx
        mov     rcx, qword ptr [rcx + 16]
        mov     qword ptr [rax + 64], rcx
        pop     rbp
        ret
cl::sycl::item<3, false>::item<false>(std::enable_if<!(false), cl::sycl::range<3> const>::type&, cl::sycl::id<3> const&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        mov     rax, qword ptr [rbp - 8]
        mov     rcx, qword ptr [rbp - 16]
        mov     rdx, qword ptr [rcx]
        mov     qword ptr [rax], rdx
        mov     rdx, qword ptr [rcx + 8]
        mov     qword ptr [rax + 8], rdx
        mov     rcx, qword ptr [rcx + 16]
        mov     qword ptr [rax + 16], rcx
        mov     rcx, qword ptr [rbp - 24]
        mov     rdx, qword ptr [rcx]
        mov     qword ptr [rax + 24], rdx
        mov     rdx, qword ptr [rcx + 8]
        mov     qword ptr [rax + 32], rdx
        mov     rcx, qword ptr [rcx + 16]
        mov     qword ptr [rax + 40], rcx
        pop     rbp
        ret
cl::sycl::nd_item<3>::nd_item(cl::sycl::item<3, true> const&, cl::sycl::item<3, false> const&, cl::sycl::group<3> const&) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        mov     qword ptr [rbp - 32], rcx
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 40], rdi       # 8-byte Spill
        mov     rsi, qword ptr [rbp - 16]
        mov     edx, 72
        call    memcpy@PLT
        mov     rdi, qword ptr [rbp - 40]       # 8-byte Reload
        add     rdi, 72
        mov     rsi, qword ptr [rbp - 24]
        mov     edx, 48
        call    memcpy@PLT
        mov     rdi, qword ptr [rbp - 40]       # 8-byte Reload
        add     rdi, 120
        mov     rsi, qword ptr [rbp - 32]
        mov     edx, 96
        call    memcpy@PLT
        add     rsp, 48
        pop     rbp
        ret
std::function<void (cl::sycl::nd_item<3> const&)>::operator()(cl::sycl::nd_item<3> const&) const: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 24], rdi       # 8-byte Spill
        call    std::_Function_base::_M_empty() const
        test    al, 1
        jne     .LBB586_1
        jmp     .LBB586_2
.LBB586_1:
        call    std::__throw_bad_function_call()
.LBB586_2:
        mov     rax, qword ptr [rbp - 24]       # 8-byte Reload
        mov     rcx, qword ptr [rax + 24]
        mov     qword ptr [rbp - 32], rcx       # 8-byte Spill
        mov     qword ptr [rbp - 40], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 16]
        call    cl::sycl::nd_item<3> const& std::forward<cl::sycl::nd_item<3> const&>(std::remove_reference<cl::sycl::nd_item<3> const&>::type&)
        mov     rdi, qword ptr [rbp - 40]       # 8-byte Reload
        mov     rsi, rax
        mov     rax, qword ptr [rbp - 32]       # 8-byte Reload
        call    rax
        add     rsp, 48
        pop     rbp
        ret
std::__uniq_ptr_impl<cl::sycl::detail::HostKernelBase, std::default_delete<cl::sycl::detail::HostKernelBase> >::reset(cl::sycl::detail::HostKernelBase*): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 64
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 40], rdi       # 8-byte Spill
        call    std::__uniq_ptr_impl<cl::sycl::detail::HostKernelBase, std::default_delete<cl::sycl::detail::HostKernelBase> >::_M_ptr()
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        jmp     .LBB587_1
.LBB587_1:
        mov     rdi, qword ptr [rbp - 40]       # 8-byte Reload
        mov     rax, qword ptr [rbp - 32]       # 8-byte Reload
        mov     rax, qword ptr [rax]
        mov     qword ptr [rbp - 24], rax
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rbp - 56], rax       # 8-byte Spill
        call    std::__uniq_ptr_impl<cl::sycl::detail::HostKernelBase, std::default_delete<cl::sycl::detail::HostKernelBase> >::_M_ptr()
        mov     qword ptr [rbp - 48], rax       # 8-byte Spill
        jmp     .LBB587_2
.LBB587_2:
        mov     rax, qword ptr [rbp - 48]       # 8-byte Reload
        mov     rcx, qword ptr [rbp - 56]       # 8-byte Reload
        mov     qword ptr [rax], rcx
        cmp     qword ptr [rbp - 24], 0
        je      .LBB587_6
        mov     rdi, qword ptr [rbp - 40]       # 8-byte Reload
        call    std::__uniq_ptr_impl<cl::sycl::detail::HostKernelBase, std::default_delete<cl::sycl::detail::HostKernelBase> >::_M_deleter()
        mov     qword ptr [rbp - 64], rax       # 8-byte Spill
        jmp     .LBB587_4
.LBB587_4:
        mov     rdi, qword ptr [rbp - 64]       # 8-byte Reload
        mov     rsi, qword ptr [rbp - 24]
        call    std::default_delete<cl::sycl::detail::HostKernelBase>::operator()(cl::sycl::detail::HostKernelBase*) const
        jmp     .LBB587_5
.LBB587_5:
        jmp     .LBB587_6
.LBB587_6:
        add     rsp, 64
        pop     rbp
        ret
        mov     rdi, rax
        call    __clang_call_terminate
std::remove_reference<cl::sycl::detail::HostKernelBase*&>::type&& std::move<cl::sycl::detail::HostKernelBase*&>(cl::sycl::detail::HostKernelBase*&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
std::__uniq_ptr_impl<cl::sycl::detail::HostKernelBase, std::default_delete<cl::sycl::detail::HostKernelBase> >::_M_ptr(): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::tuple_element<0ul, std::tuple<cl::sycl::detail::HostKernelBase*, std::default_delete<cl::sycl::detail::HostKernelBase> > >::type& std::get<0ul, cl::sycl::detail::HostKernelBase*, std::default_delete<cl::sycl::detail::HostKernelBase> >(std::tuple<cl::sycl::detail::HostKernelBase*, std::default_delete<cl::sycl::detail::HostKernelBase> >&)
        add     rsp, 16
        pop     rbp
        ret
std::__uniq_ptr_impl<cl::sycl::detail::HostKernelBase, std::default_delete<cl::sycl::detail::HostKernelBase> >::_M_deleter(): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::tuple_element<1ul, std::tuple<cl::sycl::detail::HostKernelBase*, std::default_delete<cl::sycl::detail::HostKernelBase> > >::type& std::get<1ul, cl::sycl::detail::HostKernelBase*, std::default_delete<cl::sycl::detail::HostKernelBase> >(std::tuple<cl::sycl::detail::HostKernelBase*, std::default_delete<cl::sycl::detail::HostKernelBase> >&)
        add     rsp, 16
        pop     rbp
        ret
std::default_delete<cl::sycl::detail::HostKernelBase>::operator()(cl::sycl::detail::HostKernelBase*) const: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rbp - 24], rax       # 8-byte Spill
        cmp     rax, 0
        je      .LBB591_2
        mov     rdi, qword ptr [rbp - 24]       # 8-byte Reload
        mov     rax, qword ptr [rdi]
        call    qword ptr [rax + 24]
.LBB591_2:
        add     rsp, 32
        pop     rbp
        ret
std::tuple_element<0ul, std::tuple<cl::sycl::detail::HostKernelBase*, std::default_delete<cl::sycl::detail::HostKernelBase> > >::type& std::get<0ul, cl::sycl::detail::HostKernelBase*, std::default_delete<cl::sycl::detail::HostKernelBase> >(std::tuple<cl::sycl::detail::HostKernelBase*, std::default_delete<cl::sycl::detail::HostKernelBase> >&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    cl::sycl::detail::HostKernelBase*& std::__get_helper<0ul, cl::sycl::detail::HostKernelBase*, std::default_delete<cl::sycl::detail::HostKernelBase> >(std::_Tuple_impl<0ul, cl::sycl::detail::HostKernelBase*, std::default_delete<cl::sycl::detail::HostKernelBase> >&)
        add     rsp, 16
        pop     rbp
        ret
cl::sycl::detail::HostKernelBase*& std::__get_helper<0ul, cl::sycl::detail::HostKernelBase*, std::default_delete<cl::sycl::detail::HostKernelBase> >(std::_Tuple_impl<0ul, cl::sycl::detail::HostKernelBase*, std::default_delete<cl::sycl::detail::HostKernelBase> >&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::_Tuple_impl<0ul, cl::sycl::detail::HostKernelBase*, std::default_delete<cl::sycl::detail::HostKernelBase> >::_M_head(std::_Tuple_impl<0ul, cl::sycl::detail::HostKernelBase*, std::default_delete<cl::sycl::detail::HostKernelBase> >&)
        add     rsp, 16
        pop     rbp
        ret
std::_Tuple_impl<0ul, cl::sycl::detail::HostKernelBase*, std::default_delete<cl::sycl::detail::HostKernelBase> >::_M_head(std::_Tuple_impl<0ul, cl::sycl::detail::HostKernelBase*, std::default_delete<cl::sycl::detail::HostKernelBase> >&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::_Head_base<0ul, cl::sycl::detail::HostKernelBase*, false>::_M_head(std::_Head_base<0ul, cl::sycl::detail::HostKernelBase*, false>&)
        add     rsp, 16
        pop     rbp
        ret
std::_Head_base<0ul, cl::sycl::detail::HostKernelBase*, false>::_M_head(std::_Head_base<0ul, cl::sycl::detail::HostKernelBase*, false>&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
std::tuple_element<1ul, std::tuple<cl::sycl::detail::HostKernelBase*, std::default_delete<cl::sycl::detail::HostKernelBase> > >::type& std::get<1ul, cl::sycl::detail::HostKernelBase*, std::default_delete<cl::sycl::detail::HostKernelBase> >(std::tuple<cl::sycl::detail::HostKernelBase*, std::default_delete<cl::sycl::detail::HostKernelBase> >&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::default_delete<cl::sycl::detail::HostKernelBase>& std::__get_helper<1ul, std::default_delete<cl::sycl::detail::HostKernelBase>>(std::_Tuple_impl<1ul, std::default_delete<cl::sycl::detail::HostKernelBase>>&)
        add     rsp, 16
        pop     rbp
        ret
std::default_delete<cl::sycl::detail::HostKernelBase>& std::__get_helper<1ul, std::default_delete<cl::sycl::detail::HostKernelBase>>(std::_Tuple_impl<1ul, std::default_delete<cl::sycl::detail::HostKernelBase>>&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::_Tuple_impl<1ul, std::default_delete<cl::sycl::detail::HostKernelBase> >::_M_head(std::_Tuple_impl<1ul, std::default_delete<cl::sycl::detail::HostKernelBase> >&)
        add     rsp, 16
        pop     rbp
        ret
std::_Tuple_impl<1ul, std::default_delete<cl::sycl::detail::HostKernelBase> >::_M_head(std::_Tuple_impl<1ul, std::default_delete<cl::sycl::detail::HostKernelBase> >&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::_Head_base<1ul, std::default_delete<cl::sycl::detail::HostKernelBase>, true>::_M_head(std::_Head_base<1ul, std::default_delete<cl::sycl::detail::HostKernelBase>, true>&)
        add     rsp, 16
        pop     rbp
        ret
std::_Head_base<1ul, std::default_delete<cl::sycl::detail::HostKernelBase>, true>::_M_head(std::_Head_base<1ul, std::default_delete<cl::sycl::detail::HostKernelBase>, true>&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType const* std::function<void (cl::sycl::nd_item<3> const&)>::target<cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType>() const: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        mov     qword ptr [rbp - 16], rdi
        mov     rdi, qword ptr [rbp - 16]
        mov     qword ptr [rbp - 40], rdi       # 8-byte Spill
        call    std::function<void (cl::sycl::nd_item<3> const&)>::target_type() const
        mov     rsi, rax
        movabs  rdi, offset typeinfo for cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType
        call    std::type_info::operator==(std::type_info const&) const
        test    al, 1
        jne     .LBB600_1
        jmp     .LBB600_5
.LBB600_1:
        mov     rax, qword ptr [rbp - 40]       # 8-byte Reload
        cmp     qword ptr [rax + 16], 0
        je      .LBB600_5
        mov     rsi, qword ptr [rbp - 40]       # 8-byte Reload
        mov     rax, qword ptr [rsi + 16]
        lea     rdi, [rbp - 32]
        mov     edx, 1
        call    rax
        jmp     .LBB600_3
.LBB600_3:
        lea     rdi, [rbp - 32]
        call    cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType const*& std::_Any_data::_M_access<cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType const*>()
        mov     qword ptr [rbp - 48], rax       # 8-byte Spill
        jmp     .LBB600_4
.LBB600_4:
        mov     rax, qword ptr [rbp - 48]       # 8-byte Reload
        mov     rax, qword ptr [rax]
        mov     qword ptr [rbp - 8], rax
        jmp     .LBB600_6
.LBB600_5:
        mov     qword ptr [rbp - 8], 0
.LBB600_6:
        mov     rax, qword ptr [rbp - 8]
        add     rsp, 48
        pop     rbp
        ret
        mov     rdi, rax
        call    __clang_call_terminate
std::function<void (cl::sycl::nd_item<3> const&)>::target_type() const: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        mov     qword ptr [rbp - 16], rdi
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rbp - 40], rax       # 8-byte Spill
        cmp     qword ptr [rax + 16], 0
        je      .LBB601_3
        mov     rsi, qword ptr [rbp - 40]       # 8-byte Reload
        mov     rax, qword ptr [rsi + 16]
        lea     rdi, [rbp - 32]
        xor     edx, edx
        call    rax
        jmp     .LBB601_2
.LBB601_2:
        lea     rdi, [rbp - 32]
        call    std::type_info const*& std::_Any_data::_M_access<std::type_info const*>()
        mov     rax, qword ptr [rax]
        mov     qword ptr [rbp - 8], rax
        jmp     .LBB601_4
.LBB601_3:
        movabs  rax, offset typeinfo for void
        mov     qword ptr [rbp - 8], rax
.LBB601_4:
        mov     rax, qword ptr [rbp - 8]
        add     rsp, 48
        pop     rbp
        ret
        mov     rdi, rax
        call    __clang_call_terminate
cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType const*& std::_Any_data::_M_access<cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType const*>(): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::_Any_data::_M_access()
        add     rsp, 16
        pop     rbp
        ret
std::vector<cl::sycl::detail::ArgDesc, std::allocator<cl::sycl::detail::ArgDesc> >::_M_erase_at_end(cl::sycl::detail::ArgDesc*): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rax, qword ptr [rbp - 8]
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        mov     rax, qword ptr [rax + 8]
        mov     rcx, qword ptr [rbp - 16]
        sub     rax, rcx
        mov     ecx, 24
        cqo
        idiv    rcx
        mov     qword ptr [rbp - 24], rax
        cmp     qword ptr [rbp - 24], 0
        je      .LBB603_3
        mov     rdi, qword ptr [rbp - 32]       # 8-byte Reload
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rbp - 48], rax       # 8-byte Spill
        mov     rax, qword ptr [rdi + 8]
        mov     qword ptr [rbp - 40], rax       # 8-byte Spill
        call    std::_Vector_base<cl::sycl::detail::ArgDesc, std::allocator<cl::sycl::detail::ArgDesc> >::_M_get_Tp_allocator()
        mov     rdi, qword ptr [rbp - 48]       # 8-byte Reload
        mov     rsi, qword ptr [rbp - 40]       # 8-byte Reload
        mov     rdx, rax
        call    void std::_Destroy<cl::sycl::detail::ArgDesc*, cl::sycl::detail::ArgDesc>(cl::sycl::detail::ArgDesc*, cl::sycl::detail::ArgDesc*, std::allocator<cl::sycl::detail::ArgDesc>&)
        jmp     .LBB603_2
.LBB603_2:
        mov     rax, qword ptr [rbp - 32]       # 8-byte Reload
        mov     rcx, qword ptr [rbp - 16]
        mov     qword ptr [rax + 8], rcx
.LBB603_3:
        add     rsp, 48
        pop     rbp
        ret
        mov     rdi, rax
        call    __clang_call_terminate
void std::_Destroy<cl::sycl::detail::ArgDesc*, cl::sycl::detail::ArgDesc>(cl::sycl::detail::ArgDesc*, cl::sycl::detail::ArgDesc*, std::allocator<cl::sycl::detail::ArgDesc>&): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        mov     rdi, qword ptr [rbp - 8]
        mov     rsi, qword ptr [rbp - 16]
        call    void std::_Destroy<cl::sycl::detail::ArgDesc*>(cl::sycl::detail::ArgDesc*, cl::sycl::detail::ArgDesc*)
        add     rsp, 32
        pop     rbp
        ret
std::_Vector_base<cl::sycl::detail::ArgDesc, std::allocator<cl::sycl::detail::ArgDesc> >::_M_get_Tp_allocator(): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
void std::_Destroy<cl::sycl::detail::ArgDesc*>(cl::sycl::detail::ArgDesc*, cl::sycl::detail::ArgDesc*): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     rsi, qword ptr [rbp - 16]
        call    void std::_Destroy_aux<true>::__destroy<cl::sycl::detail::ArgDesc*>(cl::sycl::detail::ArgDesc*, cl::sycl::detail::ArgDesc*)
        add     rsp, 16
        pop     rbp
        ret
void std::_Destroy_aux<true>::__destroy<cl::sycl::detail::ArgDesc*>(cl::sycl::detail::ArgDesc*, cl::sycl::detail::ArgDesc*): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        pop     rbp
        ret
cl::sycl::detail::KernelInfoData<(char)95, (char)90, (char)84, (char)83, (char)90, (char)90, (char)49, (char)56, (char)99, (char)97, (char)108, (char)108, (char)95, (char)99, (char)111, (char)109, (char)109, (char)97, (char)110, (char)100, (char)95, (char)113, (char)117, (char)101, (char)117, (char)101, (char)80, (char)105, (char)69, (char)78, (char)75, (char)85, (char)108, (char)82, (char)78, (char)50, (char)99, (char)108, (char)52, (char)115, (char)121, (char)99, (char)108, (char)55, (char)104, (char)97, (char)110, (char)100, (char)108, (char)101, (char)114, (char)69, (char)69, (char)95, (char)99, (char)108, (char)69, (char)83, (char)51, (char)95, (char)69, (char)85, (char)108, (char)78, (char)83, (char)49, (char)95, (char)55, (char)110, (char)100, (char)95, (char)105, (char)116, (char)101, (char)109, (char)73, (char)76, (char)105, (char)51, (char)69, (char)69, (char)69, (char)69, (char)95>::getNumParams(): # 
        push    rbp
        mov     rbp, rsp
        mov     eax, 1
        pop     rbp
        ret
cl::sycl::detail::KernelInfoData<(char)95, (char)90, (char)84, (char)83, (char)90, (char)90, (char)49, (char)56, (char)99, (char)97, (char)108, (char)108, (char)95, (char)99, (char)111, (char)109, (char)109, (char)97, (char)110, (char)100, (char)95, (char)113, (char)117, (char)101, (char)117, (char)101, (char)80, (char)105, (char)69, (char)78, (char)75, (char)85, (char)108, (char)82, (char)78, (char)50, (char)99, (char)108, (char)52, (char)115, (char)121, (char)99, (char)108, (char)55, (char)104, (char)97, (char)110, (char)100, (char)108, (char)101, (char)114, (char)69, (char)69, (char)95, (char)99, (char)108, (char)69, (char)83, (char)51, (char)95, (char)69, (char)85, (char)108, (char)78, (char)83, (char)49, (char)95, (char)55, (char)110, (char)100, (char)95, (char)105, (char)116, (char)101, (char)109, (char)73, (char)76, (char)105, (char)51, (char)69, (char)69, (char)69, (char)69, (char)95>::getParamDesc(unsigned int): # 
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], edi
        mov     eax, dword ptr [rbp - 4]
        add     eax, 0
        mov     eax, eax
        mov     ecx, eax
        movabs  rax, offset cl::sycl::detail::kernel_signatures
        imul    rcx, rcx, 12
        add     rax, rcx
        pop     rbp
        ret
cl::sycl::detail::KernelInfoData<(char)95, (char)90, (char)84, (char)83, (char)90, (char)90, (char)49, (char)56, (char)99, (char)97, (char)108, (char)108, (char)95, (char)99, (char)111, (char)109, (char)109, (char)97, (char)110, (char)100, (char)95, (char)113, (char)117, (char)101, (char)117, (char)101, (char)80, (char)105, (char)69, (char)78, (char)75, (char)85, (char)108, (char)82, (char)78, (char)50, (char)99, (char)108, (char)52, (char)115, (char)121, (char)99, (char)108, (char)55, (char)104, (char)97, (char)110, (char)100, (char)108, (char)101, (char)114, (char)69, (char)69, (char)95, (char)99, (char)108, (char)69, (char)83, (char)51, (char)95, (char)69, (char)85, (char)108, (char)78, (char)83, (char)49, (char)95, (char)55, (char)110, (char)100, (char)95, (char)105, (char)116, (char)101, (char)109, (char)73, (char)76, (char)105, (char)51, (char)69, (char)69, (char)69, (char)69, (char)95>::isESIMD(): # 
        push    rbp
        mov     rbp, rsp
        xor     eax, eax
        and     al, 1
        movzx   eax, al
        pop     rbp
        ret
cl::sycl::detail::getVersionedCGType(unsigned int, unsigned char): # 
        push    rbp
        mov     rbp, rsp
        mov     al, sil
        mov     dword ptr [rbp - 4], edi
        mov     byte ptr [rbp - 5], al
        mov     eax, dword ptr [rbp - 4]
        movzx   ecx, byte ptr [rbp - 5]
        shl     ecx, 24
        or      eax, ecx
        pop     rbp
        ret
cl::sycl::detail::AccessorBaseHost::AccessorBaseHost(cl::sycl::detail::AccessorBaseHost const&) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     rsi, qword ptr [rbp - 16]
        call    std::shared_ptr<cl::sycl::detail::AccessorImplHost>::shared_ptr(std::shared_ptr<cl::sycl::detail::AccessorImplHost> const&) [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
std::shared_ptr<cl::sycl::detail::AccessorImplHost>::shared_ptr(std::shared_ptr<cl::sycl::detail::AccessorImplHost> const&) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     rsi, qword ptr [rbp - 16]
        call    std::__shared_ptr<cl::sycl::detail::AccessorImplHost, (__gnu_cxx::_Lock_policy)2>::__shared_ptr(std::__shared_ptr<cl::sycl::detail::AccessorImplHost, (__gnu_cxx::_Lock_policy)2> const&) [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
std::__shared_ptr<cl::sycl::detail::AccessorImplHost, (__gnu_cxx::_Lock_policy)2>::__shared_ptr(std::__shared_ptr<cl::sycl::detail::AccessorImplHost, (__gnu_cxx::_Lock_policy)2> const&) [base object constructor]: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     rdi, qword ptr [rbp - 8]
        mov     rax, qword ptr [rbp - 16]
        mov     rax, qword ptr [rax]
        mov     qword ptr [rdi], rax
        add     rdi, 8
        mov     rsi, qword ptr [rbp - 16]
        add     rsi, 8
        call    std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count(std::__shared_count<(__gnu_cxx::_Lock_policy)2> const&) [base object constructor]
        add     rsp, 16
        pop     rbp
        ret
call_command_queue(int*)::{lambda(cl::sycl::handler&)#1} const& std::_Any_data::_M_access<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}>() const: # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::_Any_data::_M_access() const
        add     rsp, 16
        pop     rbp
        ret
call_command_queue(int*)::{lambda(cl::sycl::handler&)#1} const* std::__addressof<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1} const>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1} const&): # 
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}*& std::_Any_data::_M_access<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}*>(): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::_Any_data::_M_access()
        add     rsp, 16
        pop     rbp
        ret
std::_Function_base::_Base_manager<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     dword ptr [rbp - 20], edx
        mov     eax, dword ptr [rbp - 20]
        mov     qword ptr [rbp - 40], rax       # 8-byte Spill
        sub     rax, 3
        ja      .LBB618_5
        mov     rax, qword ptr [rbp - 40]       # 8-byte Reload
        mov     rax, qword ptr [8*rax + .LJTI618_0]
        jmp     rax
.LBB618_1:
        mov     rdi, qword ptr [rbp - 8]
        call    std::type_info const*& std::_Any_data::_M_access<std::type_info const*>()
        movabs  rcx, offset typeinfo for call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}
        mov     qword ptr [rax], rcx
        jmp     .LBB618_5
.LBB618_2:
        mov     rdi, qword ptr [rbp - 16]
        call    std::_Function_base::_Base_manager<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}>::_M_get_pointer(std::_Any_data const&)
        mov     qword ptr [rbp - 48], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 8]
        call    call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}*& std::_Any_data::_M_access<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}*>()
        mov     rcx, qword ptr [rbp - 48]       # 8-byte Reload
        mov     qword ptr [rax], rcx
        jmp     .LBB618_5
.LBB618_3:
        mov     rdi, qword ptr [rbp - 8]
        mov     rsi, qword ptr [rbp - 16]
        call    std::_Function_base::_Base_manager<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}>::_M_clone(std::_Any_data&, std::_Any_data const&, std::integral_constant<bool, true>)
        jmp     .LBB618_5
.LBB618_4:
        mov     rdi, qword ptr [rbp - 8]
        call    std::_Function_base::_Base_manager<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>)
.LBB618_5:
        xor     eax, eax
        and     al, 1
        movzx   eax, al
        add     rsp, 48
        pop     rbp
        ret
.LJTI618_0:
        .quad   .LBB618_1
        .quad   .LBB618_2
        .quad   .LBB618_3
        .quad   .LBB618_4
        .intel_syntax noprefix
std::_Function_base::_Base_manager<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}>::_M_clone(std::_Any_data&, std::_Any_data const&, std::integral_constant<bool, true>): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 16], rdi
        mov     qword ptr [rbp - 24], rsi
        mov     rdi, qword ptr [rbp - 16]
        call    std::_Any_data::_M_access()
        mov     qword ptr [rbp - 32], rax       # 8-byte Spill
        mov     rdi, qword ptr [rbp - 24]
        call    call_command_queue(int*)::{lambda(cl::sycl::handler&)#1} const& std::_Any_data::_M_access<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}>() const
        mov     rcx, rax
        mov     rax, qword ptr [rbp - 32]       # 8-byte Reload
        mov     rcx, qword ptr [rcx]
        mov     qword ptr [rax], rcx
        add     rsp, 32
        pop     rbp
        ret
std::_Function_base::_Base_manager<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 16], rdi
        mov     rdi, qword ptr [rbp - 16]
        call    call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}& std::_Any_data::_M_access<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}>()
        add     rsp, 16
        pop     rbp
        ret
call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}& std::_Any_data::_M_access<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}>(): # 
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], rdi
        mov     rdi, qword ptr [rbp - 8]
        call    std::_Any_data::_M_access()
        add     rsp, 16
        pop     rbp
        ret
_GLOBAL__sub_I_example_f032e1.cpp:      # 
        push    rbp
        mov     rbp, rsp
        call    __cxx_global_var_init
        pop     rbp
        ret
.L.str:
        .asciz  "Running on "

.L.str.1:
        .asciz  "\n"

.L.str.2:
        .asciz  "example.cpp"

.L.str.3:
        .asciz  "call_command_queue"

.L.str.4:
        .asciz  "Result Reduction"

.L.str.5:
        .asciz  "Index out of range"

typeinfo name for cl::sycl::invalid_parameter_error:
        .asciz  "N2cl4sycl23invalid_parameter_errorE"

typeinfo name for cl::sycl::runtime_error:
        .asciz  "N2cl4sycl13runtime_errorE"

typeinfo for cl::sycl::runtime_error:
        .quad   vtable for __cxxabiv1::__si_class_type_info+16
        .quad   typeinfo name for cl::sycl::runtime_error
        .quad   typeinfo for cl::sycl::exception

typeinfo for cl::sycl::invalid_parameter_error:
        .quad   vtable for __cxxabiv1::__si_class_type_info+16
        .quad   typeinfo name for cl::sycl::invalid_parameter_error
        .quad   typeinfo for cl::sycl::runtime_error

.L.str.6:
        .asciz  "basic_string::_M_construct null not valid"

vtable for cl::sycl::invalid_parameter_error:
        .quad   0
        .quad   typeinfo for cl::sycl::invalid_parameter_error
        .quad   cl::sycl::invalid_parameter_error::~invalid_parameter_error() [base object destructor]
        .quad   cl::sycl::invalid_parameter_error::~invalid_parameter_error() [deleting destructor]
        .quad   cl::sycl::exception::what() const

vtable for cl::sycl::runtime_error:
        .quad   0
        .quad   typeinfo for cl::sycl::runtime_error
        .quad   cl::sycl::runtime_error::~runtime_error() [base object destructor]
        .quad   cl::sycl::runtime_error::~runtime_error() [deleting destructor]
        .quad   cl::sycl::exception::what() const

.L.str.7:
        .asciz  " "

.L.str.8:
        .asciz  " ("

.L.str.9:
        .asciz  ")"

std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits:
        .asciz  "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899"

.L.str.10:
        .asciz  "Group algorithms are not supported on host device."

vtable for std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2>:
        .quad   0
        .quad   typeinfo for std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2>
        .quad   std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace() [base object destructor]
        .quad   std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace() [deleting destructor]
        .quad   std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
        .quad   std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
        .quad   std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)

typeinfo name for std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2>:
        .asciz  "St23_Sp_counted_ptr_inplaceIN2cl4sycl6detail11buffer_implESaIS3_ELN9__gnu_cxx12_Lock_policyE2EE"

typeinfo name for std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>:
        .asciz  "St16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE"

typeinfo name for std::_Mutex_base<(__gnu_cxx::_Lock_policy)2>:
        .asciz  "St11_Mutex_baseILN9__gnu_cxx12_Lock_policyE2EE"

typeinfo for std::_Mutex_base<(__gnu_cxx::_Lock_policy)2>:
        .quad   vtable for __cxxabiv1::__class_type_info+16
        .quad   typeinfo name for std::_Mutex_base<(__gnu_cxx::_Lock_policy)2>

typeinfo for std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>:
        .quad   vtable for __cxxabiv1::__si_class_type_info+16
        .quad   typeinfo name for std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>
        .quad   typeinfo for std::_Mutex_base<(__gnu_cxx::_Lock_policy)2>

typeinfo for std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2>:
        .quad   vtable for __cxxabiv1::__si_class_type_info+16
        .quad   typeinfo name for std::_Sp_counted_ptr_inplace<cl::sycl::detail::buffer_impl, std::allocator<cl::sycl::detail::buffer_impl>, (__gnu_cxx::_Lock_policy)2>
        .quad   typeinfo for std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>

vtable for std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>:
        .quad   0
        .quad   typeinfo for std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>
        .quad   std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::~_Sp_counted_base() [base object destructor]
        .quad   std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::~_Sp_counted_base() [deleting destructor]
        .quad   __cxa_pure_virtual
        .quad   std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_destroy()
        .quad   __cxa_pure_virtual

.L.str.11:
        .asciz  "The use_pinned_host_memory cannot be used with host pointer"

typeinfo name for cl::sycl::invalid_object_error:
        .asciz  "N2cl4sycl20invalid_object_errorE"

typeinfo name for cl::sycl::device_error:
        .asciz  "N2cl4sycl12device_errorE"

typeinfo for cl::sycl::device_error:
        .quad   vtable for __cxxabiv1::__si_class_type_info+16
        .quad   typeinfo name for cl::sycl::device_error
        .quad   typeinfo for cl::sycl::exception

typeinfo for cl::sycl::invalid_object_error:
        .quad   vtable for __cxxabiv1::__si_class_type_info+16
        .quad   typeinfo name for cl::sycl::invalid_object_error
        .quad   typeinfo for cl::sycl::device_error

vtable for cl::sycl::detail::SYCLMemObjI:
        .quad   0
        .quad   typeinfo for cl::sycl::detail::SYCLMemObjI
        .quad   cl::sycl::detail::SYCLMemObjI::~SYCLMemObjI() [base object destructor]
        .quad   cl::sycl::detail::SYCLMemObjI::~SYCLMemObjI() [deleting destructor]
        .quad   __cxa_pure_virtual
        .quad   __cxa_pure_virtual
        .quad   __cxa_pure_virtual
        .quad   __cxa_pure_virtual
        .quad   __cxa_pure_virtual
        .quad   __cxa_pure_virtual
        .quad   __cxa_pure_virtual

typeinfo name for cl::sycl::detail::SYCLMemObjI:
        .asciz  "N2cl4sycl6detail11SYCLMemObjIE"

typeinfo for cl::sycl::detail::SYCLMemObjI:
        .quad   vtable for __cxxabiv1::__class_type_info+16
        .quad   typeinfo name for cl::sycl::detail::SYCLMemObjI

vtable for cl::sycl::invalid_object_error:
        .quad   0
        .quad   typeinfo for cl::sycl::invalid_object_error
        .quad   cl::sycl::invalid_object_error::~invalid_object_error() [base object destructor]
        .quad   cl::sycl::invalid_object_error::~invalid_object_error() [deleting destructor]
        .quad   cl::sycl::exception::what() const

vtable for cl::sycl::device_error:
        .quad   0
        .quad   typeinfo for cl::sycl::device_error
        .quad   cl::sycl::device_error::~device_error() [base object destructor]
        .quad   cl::sycl::device_error::~device_error() [deleting destructor]
        .quad   cl::sycl::exception::what() const

typeinfo name for cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}:
        .asciz  "ZN2cl4sycl6detail11SYCLMemObjT14set_final_dataIPcEENSt9enable_ifIXsr3std10is_pointerIT_EE5valueEvE4typeES6_EUlvE_"

typeinfo for cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}:
        .quad   vtable for __cxxabiv1::__class_type_info+16
        .quad   typeinfo name for cl::sycl::detail::SYCLMemObjT::set_final_data<char*>(char*)::{lambda()#1}

typeinfo name for std::_Sp_make_shared_tag:
        .asciz  "St19_Sp_make_shared_tag"

typeinfo for std::_Sp_make_shared_tag:
        .quad   vtable for __cxxabiv1::__class_type_info+16
        .quad   typeinfo name for std::_Sp_make_shared_tag

std::_Sp_make_shared_tag::_S_ti()::__tag:
        .zero   16

vtable for cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >:
        .quad   0
        .quad   typeinfo for cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >
        .quad   cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >::getAllocatorImpl()
        .quad   cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >::~SYCLMemObjAllocatorHolder() [base object destructor]
        .quad   cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >::~SYCLMemObjAllocatorHolder() [deleting destructor]
        .quad   cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >::allocate(unsigned long)
        .quad   cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >::deallocate(void*, unsigned long)
        .quad   cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >::getValueSize() const
        .quad   cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >::setAlignment(unsigned long)

typeinfo name for cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >:
        .asciz  "N2cl4sycl6detail25SYCLMemObjAllocatorHolderINS1_17aligned_allocatorIcEEEE"

typeinfo name for cl::sycl::detail::SYCLMemObjAllocator:
        .asciz  "N2cl4sycl6detail19SYCLMemObjAllocatorE"

typeinfo for cl::sycl::detail::SYCLMemObjAllocator:
        .quad   vtable for __cxxabiv1::__class_type_info+16
        .quad   typeinfo name for cl::sycl::detail::SYCLMemObjAllocator

typeinfo for cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >:
        .quad   vtable for __cxxabiv1::__si_class_type_info+16
        .quad   typeinfo name for cl::sycl::detail::SYCLMemObjAllocatorHolder<cl::sycl::detail::aligned_allocator<char> >
        .quad   typeinfo for cl::sycl::detail::SYCLMemObjAllocator

vtable for cl::sycl::detail::SYCLMemObjAllocator:
        .quad   0
        .quad   typeinfo for cl::sycl::detail::SYCLMemObjAllocator
        .quad   __cxa_pure_virtual
        .quad   cl::sycl::detail::SYCLMemObjAllocator::~SYCLMemObjAllocator() [base object destructor]
        .quad   cl::sycl::detail::SYCLMemObjAllocator::~SYCLMemObjAllocator() [deleting destructor]
        .quad   __cxa_pure_virtual
        .quad   __cxa_pure_virtual
        .quad   __cxa_pure_virtual
        .quad   __cxa_pure_virtual

.L.str.12:
        .asciz  "operator()"

vtable for std::_Sp_counted_ptr<cl::sycl::detail::AccessorImplHost*, (__gnu_cxx::_Lock_policy)2>:
        .quad   0
        .quad   typeinfo for std::_Sp_counted_ptr<cl::sycl::detail::AccessorImplHost*, (__gnu_cxx::_Lock_policy)2>
        .quad   std::_Sp_counted_ptr<cl::sycl::detail::AccessorImplHost*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr() [base object destructor]
        .quad   std::_Sp_counted_ptr<cl::sycl::detail::AccessorImplHost*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr() [deleting destructor]
        .quad   std::_Sp_counted_ptr<cl::sycl::detail::AccessorImplHost*, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
        .quad   std::_Sp_counted_ptr<cl::sycl::detail::AccessorImplHost*, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
        .quad   std::_Sp_counted_ptr<cl::sycl::detail::AccessorImplHost*, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)

typeinfo name for std::_Sp_counted_ptr<cl::sycl::detail::AccessorImplHost*, (__gnu_cxx::_Lock_policy)2>:
        .asciz  "St15_Sp_counted_ptrIPN2cl4sycl6detail16AccessorImplHostELN9__gnu_cxx12_Lock_policyE2EE"

typeinfo for std::_Sp_counted_ptr<cl::sycl::detail::AccessorImplHost*, (__gnu_cxx::_Lock_policy)2>:
        .quad   vtable for __cxxabiv1::__si_class_type_info+16
        .quad   typeinfo name for std::_Sp_counted_ptr<cl::sycl::detail::AccessorImplHost*, (__gnu_cxx::_Lock_policy)2>
        .quad   typeinfo for std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>

.L.str.13:
        .asciz  "SYCL buffer size is zero. To create a device accessor, SYCL buffer size must be greater than zero."

.L.str.14:
        .asciz  "Attempt to set multiple actions for the command group. Command group must consist of a single kernel or explicit memory operation."

.L.str.15:
        .asciz  "_ZTSZZ18call_command_queuePiENKUlRN2cl4sycl7handlerEE_clES3_EUlNS1_7nd_itemILi3EEEE_"

cl::sycl::detail::checkValueRangeImpl<cl::sycl::range<3>, unsigned long>(unsigned long)::Limit:
        .quad   2147483647                      # 0x7fffffff

.L.str.16:
        .asciz  "Provided range is out of integer limits. Pass `-fno-sycl-id-queries-fit-in-int' to disable range check."

cl::sycl::detail::checkValueRangeImpl<cl::sycl::range<3>, unsigned long long>(unsigned long long)::Limit:
        .quad   2147483647                      # 0x7fffffff

cl::sycl::detail::checkValueRangeImpl<cl::sycl::id<3>, unsigned long>(unsigned long)::Limit:
        .quad   2147483647                      # 0x7fffffff

.L.str.17:
        .asciz  "Provided offset is out of integer limits. Pass `-fno-sycl-id-queries-fit-in-int' to disable offset check."

cl::sycl::detail::checkValueRangeImpl<cl::sycl::id<3>, unsigned long long>(unsigned long long)::Limit:
        .quad   2147483647                      # 0x7fffffff

typeinfo name for cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType:
        .asciz  "ZN2cl4sycl7handler15ResetHostKernelIZZ18call_command_queuePiENKUlRS1_E_clES4_EUlNS0_7nd_itemILi3EEEE_S7_Li3EEENSt9enable_ifIXsr3std7is_sameIT0_NS6_IXT1_EEEEE5valueEPT_E4typeERKSC_E20NormalizedKernelType"

typeinfo for cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType:
        .quad   vtable for __cxxabiv1::__class_type_info+16
        .quad   typeinfo name for cl::sycl::handler::ResetHostKernel<call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1}, cl::sycl::nd_item<3>, 3>(call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}::operator()(cl::sycl::handler&) const::{lambda(cl::sycl::nd_item<3>)#1} const&)::NormalizedKernelType

vtable for cl::sycl::detail::HostKernel<std::function<void (cl::sycl::nd_item<3> const&)>, cl::sycl::nd_item<3>, 3>:
        .quad   0
        .quad   typeinfo for cl::sycl::detail::HostKernel<std::function<void (cl::sycl::nd_item<3> const&)>, cl::sycl::nd_item<3>, 3>
        .quad   cl::sycl::detail::HostKernel<std::function<void (cl::sycl::nd_item<3> const&)>, cl::sycl::nd_item<3>, 3>::call(cl::sycl::detail::NDRDescT const&, cl::sycl::detail::HostProfilingInfo*)
        .quad   cl::sycl::detail::HostKernel<std::function<void (cl::sycl::nd_item<3> const&)>, cl::sycl::nd_item<3>, 3>::getPtr()
        .quad   cl::sycl::detail::HostKernel<std::function<void (cl::sycl::nd_item<3> const&)>, cl::sycl::nd_item<3>, 3>::~HostKernel() [base object destructor]
        .quad   cl::sycl::detail::HostKernel<std::function<void (cl::sycl::nd_item<3> const&)>, cl::sycl::nd_item<3>, 3>::~HostKernel() [deleting destructor]

typeinfo name for cl::sycl::detail::HostKernel<std::function<void (cl::sycl::nd_item<3> const&)>, cl::sycl::nd_item<3>, 3>:
        .asciz  "N2cl4sycl6detail10HostKernelISt8functionIFvRKNS0_7nd_itemILi3EEEEES5_Li3EEE"

typeinfo name for cl::sycl::detail::HostKernelBase:
        .asciz  "N2cl4sycl6detail14HostKernelBaseE"

typeinfo for cl::sycl::detail::HostKernelBase:
        .quad   vtable for __cxxabiv1::__class_type_info+16
        .quad   typeinfo name for cl::sycl::detail::HostKernelBase

typeinfo for cl::sycl::detail::HostKernel<std::function<void (cl::sycl::nd_item<3> const&)>, cl::sycl::nd_item<3>, 3>:
        .quad   vtable for __cxxabiv1::__si_class_type_info+16
        .quad   typeinfo name for cl::sycl::detail::HostKernel<std::function<void (cl::sycl::nd_item<3> const&)>, cl::sycl::nd_item<3>, 3>
        .quad   typeinfo for cl::sycl::detail::HostKernelBase

vtable for cl::sycl::detail::HostKernelBase:
        .quad   0
        .quad   typeinfo for cl::sycl::detail::HostKernelBase
        .quad   __cxa_pure_virtual
        .quad   __cxa_pure_virtual
        .quad   cl::sycl::detail::HostKernelBase::~HostKernelBase() [base object destructor]
        .quad   cl::sycl::detail::HostKernelBase::~HostKernelBase() [deleting destructor]

.L.str.18:
        .asciz  "Invalid local size for global size"

typeinfo name for cl::sycl::nd_range_error:
        .asciz  "N2cl4sycl14nd_range_errorE"

typeinfo for cl::sycl::nd_range_error:
        .quad   vtable for __cxxabiv1::__si_class_type_info+16
        .quad   typeinfo name for cl::sycl::nd_range_error
        .quad   typeinfo for cl::sycl::runtime_error

vtable for cl::sycl::nd_range_error:
        .quad   0
        .quad   typeinfo for cl::sycl::nd_range_error
        .quad   cl::sycl::nd_range_error::~nd_range_error() [base object destructor]
        .quad   cl::sycl::nd_range_error::~nd_range_error() [deleting destructor]
        .quad   cl::sycl::exception::what() const

.L.str.20:
        .asciz  "((G % L).size() == 0) && \"global range is not multiple of local\""

.L.str.21:
        .asciz  "/opt/compiler-explorer/intel-cpp-2022.1.0.137/compiler/2022.1.0/linux/bin-llvm/../include/sycl/CL/sycl/group.hpp"

.L__PRETTY_FUNCTION__._ZN2cl4sycl5groupILi3EEC2ERKNS0_5rangeILi3EEES6_S4_RKNS0_2idILi3EEE [base object constructor]:
        .asciz  "sycl::group<3>::group(const range<Dimensions> &, const range<Dimensions> &, const range<Dimensions>, const id<Dimensions> &) [Dimensions = 3]"

        .asciz  "inconsistent group constructor arguments"

.L.str.23:
        .asciz  "(((G / L) - GroupRange).size() == 0) && \"inconsistent group constructor arguments\""

cl::sycl::detail::kernel_signatures:
        .long   0                               # 0x0
        .long   4062                            # 0xfde
        .long   0                               # 0x0
        .long   15                              # 0xf
        .long   3307312975                      # 0xc521974f
        .long   3307312975                      # 0xc521974f

typeinfo name for call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}:
        .asciz  "Z18call_command_queuePiEUlRN2cl4sycl7handlerEE_"

typeinfo for call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}:
        .quad   vtable for __cxxabiv1::__class_type_info+16
        .quad   typeinfo name for call_command_queue(int*)::{lambda(cl::sycl::handler&)#1}